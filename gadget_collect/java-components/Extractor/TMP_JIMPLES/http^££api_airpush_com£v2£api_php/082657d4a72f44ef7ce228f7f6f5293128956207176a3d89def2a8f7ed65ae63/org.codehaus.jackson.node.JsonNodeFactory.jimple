public class org.codehaus.jackson.node.JsonNodeFactory extends java.lang.Object
{
    public static final org.codehaus.jackson.node.JsonNodeFactory instance;

    static void <clinit>()
    {
        org.codehaus.jackson.node.JsonNodeFactory $r0;

        $r0 = new org.codehaus.jackson.node.JsonNodeFactory;

        specialinvoke $r0.<org.codehaus.jackson.node.JsonNodeFactory: void <init>()>();

        <org.codehaus.jackson.node.JsonNodeFactory: org.codehaus.jackson.node.JsonNodeFactory instance> = $r0;

        return;
    }

    protected void <init>()
    {
        org.codehaus.jackson.node.JsonNodeFactory r0;

        r0 := @this: org.codehaus.jackson.node.JsonNodeFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public org.codehaus.jackson.node.POJONode POJONode(java.lang.Object)
    {
        org.codehaus.jackson.node.JsonNodeFactory r0;
        java.lang.Object $r1;
        org.codehaus.jackson.node.POJONode $r2;

        r0 := @this: org.codehaus.jackson.node.JsonNodeFactory;

        $r1 := @parameter0: java.lang.Object;

        $r2 = new org.codehaus.jackson.node.POJONode;

        specialinvoke $r2.<org.codehaus.jackson.node.POJONode: void <init>(java.lang.Object)>($r1);

        return $r2;
    }

    public org.codehaus.jackson.node.ArrayNode arrayNode()
    {
        org.codehaus.jackson.node.JsonNodeFactory r0;
        org.codehaus.jackson.node.ArrayNode $r1;

        r0 := @this: org.codehaus.jackson.node.JsonNodeFactory;

        $r1 = new org.codehaus.jackson.node.ArrayNode;

        specialinvoke $r1.<org.codehaus.jackson.node.ArrayNode: void <init>(org.codehaus.jackson.node.JsonNodeFactory)>(r0);

        return $r1;
    }

    public org.codehaus.jackson.node.BinaryNode binaryNode(byte[])
    {
        org.codehaus.jackson.node.JsonNodeFactory r0;
        byte[] $r1;
        org.codehaus.jackson.node.BinaryNode $r2;

        r0 := @this: org.codehaus.jackson.node.JsonNodeFactory;

        $r1 := @parameter0: byte[];

        $r2 = staticinvoke <org.codehaus.jackson.node.BinaryNode: org.codehaus.jackson.node.BinaryNode valueOf(byte[])>($r1);

        return $r2;
    }

    public org.codehaus.jackson.node.BinaryNode binaryNode(byte[], int, int)
    {
        org.codehaus.jackson.node.JsonNodeFactory r0;
        byte[] $r1;
        int $i0, $i1;
        org.codehaus.jackson.node.BinaryNode $r2;

        r0 := @this: org.codehaus.jackson.node.JsonNodeFactory;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = staticinvoke <org.codehaus.jackson.node.BinaryNode: org.codehaus.jackson.node.BinaryNode valueOf(byte[],int,int)>($r1, $i0, $i1);

        return $r2;
    }

    public org.codehaus.jackson.node.BooleanNode booleanNode(boolean)
    {
        org.codehaus.jackson.node.JsonNodeFactory r0;
        boolean $z0;
        org.codehaus.jackson.node.BooleanNode $r1;

        r0 := @this: org.codehaus.jackson.node.JsonNodeFactory;

        $z0 := @parameter0: boolean;

        if $z0 == 0 goto label1;

        $r1 = staticinvoke <org.codehaus.jackson.node.BooleanNode: org.codehaus.jackson.node.BooleanNode getTrue()>();

        return $r1;

     label1:
        $r1 = staticinvoke <org.codehaus.jackson.node.BooleanNode: org.codehaus.jackson.node.BooleanNode getFalse()>();

        return $r1;
    }

    public org.codehaus.jackson.node.NullNode nullNode()
    {
        org.codehaus.jackson.node.JsonNodeFactory r0;
        org.codehaus.jackson.node.NullNode $r1;

        r0 := @this: org.codehaus.jackson.node.JsonNodeFactory;

        $r1 = staticinvoke <org.codehaus.jackson.node.NullNode: org.codehaus.jackson.node.NullNode getInstance()>();

        return $r1;
    }

    public org.codehaus.jackson.node.NumericNode numberNode(byte)
    {
        org.codehaus.jackson.node.JsonNodeFactory r0;
        byte $b0;
        org.codehaus.jackson.node.IntNode $r1;

        r0 := @this: org.codehaus.jackson.node.JsonNodeFactory;

        $b0 := @parameter0: byte;

        $r1 = staticinvoke <org.codehaus.jackson.node.IntNode: org.codehaus.jackson.node.IntNode valueOf(int)>($b0);

        return $r1;
    }

    public org.codehaus.jackson.node.NumericNode numberNode(double)
    {
        org.codehaus.jackson.node.JsonNodeFactory r0;
        double $d0;
        org.codehaus.jackson.node.DoubleNode $r1;

        r0 := @this: org.codehaus.jackson.node.JsonNodeFactory;

        $d0 := @parameter0: double;

        $r1 = staticinvoke <org.codehaus.jackson.node.DoubleNode: org.codehaus.jackson.node.DoubleNode valueOf(double)>($d0);

        return $r1;
    }

    public org.codehaus.jackson.node.NumericNode numberNode(float)
    {
        org.codehaus.jackson.node.JsonNodeFactory r0;
        float $f0;
        org.codehaus.jackson.node.DoubleNode $r1;
        double $d0;

        r0 := @this: org.codehaus.jackson.node.JsonNodeFactory;

        $f0 := @parameter0: float;

        $d0 = (double) $f0;

        $r1 = staticinvoke <org.codehaus.jackson.node.DoubleNode: org.codehaus.jackson.node.DoubleNode valueOf(double)>($d0);

        return $r1;
    }

    public org.codehaus.jackson.node.NumericNode numberNode(int)
    {
        org.codehaus.jackson.node.JsonNodeFactory r0;
        int $i0;
        org.codehaus.jackson.node.IntNode $r1;

        r0 := @this: org.codehaus.jackson.node.JsonNodeFactory;

        $i0 := @parameter0: int;

        $r1 = staticinvoke <org.codehaus.jackson.node.IntNode: org.codehaus.jackson.node.IntNode valueOf(int)>($i0);

        return $r1;
    }

    public org.codehaus.jackson.node.NumericNode numberNode(long)
    {
        org.codehaus.jackson.node.JsonNodeFactory r0;
        long $l0;
        org.codehaus.jackson.node.LongNode $r1;

        r0 := @this: org.codehaus.jackson.node.JsonNodeFactory;

        $l0 := @parameter0: long;

        $r1 = staticinvoke <org.codehaus.jackson.node.LongNode: org.codehaus.jackson.node.LongNode valueOf(long)>($l0);

        return $r1;
    }

    public org.codehaus.jackson.node.NumericNode numberNode(java.math.BigDecimal)
    {
        org.codehaus.jackson.node.JsonNodeFactory r0;
        java.math.BigDecimal $r1;
        org.codehaus.jackson.node.DecimalNode $r2;

        r0 := @this: org.codehaus.jackson.node.JsonNodeFactory;

        $r1 := @parameter0: java.math.BigDecimal;

        $r2 = staticinvoke <org.codehaus.jackson.node.DecimalNode: org.codehaus.jackson.node.DecimalNode valueOf(java.math.BigDecimal)>($r1);

        return $r2;
    }

    public org.codehaus.jackson.node.NumericNode numberNode(java.math.BigInteger)
    {
        org.codehaus.jackson.node.JsonNodeFactory r0;
        java.math.BigInteger $r1;
        org.codehaus.jackson.node.BigIntegerNode $r2;

        r0 := @this: org.codehaus.jackson.node.JsonNodeFactory;

        $r1 := @parameter0: java.math.BigInteger;

        $r2 = staticinvoke <org.codehaus.jackson.node.BigIntegerNode: org.codehaus.jackson.node.BigIntegerNode valueOf(java.math.BigInteger)>($r1);

        return $r2;
    }

    public org.codehaus.jackson.node.NumericNode numberNode(short)
    {
        org.codehaus.jackson.node.JsonNodeFactory r0;
        short $s0;
        org.codehaus.jackson.node.IntNode $r1;

        r0 := @this: org.codehaus.jackson.node.JsonNodeFactory;

        $s0 := @parameter0: short;

        $r1 = staticinvoke <org.codehaus.jackson.node.IntNode: org.codehaus.jackson.node.IntNode valueOf(int)>($s0);

        return $r1;
    }

    public org.codehaus.jackson.node.ObjectNode objectNode()
    {
        org.codehaus.jackson.node.JsonNodeFactory r0;
        org.codehaus.jackson.node.ObjectNode $r1;

        r0 := @this: org.codehaus.jackson.node.JsonNodeFactory;

        $r1 = new org.codehaus.jackson.node.ObjectNode;

        specialinvoke $r1.<org.codehaus.jackson.node.ObjectNode: void <init>(org.codehaus.jackson.node.JsonNodeFactory)>(r0);

        return $r1;
    }

    public org.codehaus.jackson.node.TextNode textNode(java.lang.String)
    {
        org.codehaus.jackson.node.JsonNodeFactory r0;
        java.lang.String $r1;
        org.codehaus.jackson.node.TextNode $r2;

        r0 := @this: org.codehaus.jackson.node.JsonNodeFactory;

        $r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <org.codehaus.jackson.node.TextNode: org.codehaus.jackson.node.TextNode valueOf(java.lang.String)>($r1);

        return $r2;
    }
}
