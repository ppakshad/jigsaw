public class org.codehaus.jackson.map.ser.MapSerializer extends org.codehaus.jackson.map.ser.ContainerSerializerBase implements org.codehaus.jackson.map.ResolvableSerializer
{
    protected static final org.codehaus.jackson.type.JavaType UNSPECIFIED_TYPE;
    protected final java.util.HashSet _ignoredEntries;
    protected org.codehaus.jackson.map.JsonSerializer _keySerializer;
    protected final org.codehaus.jackson.type.JavaType _keyType;
    protected final org.codehaus.jackson.map.BeanProperty _property;
    protected org.codehaus.jackson.map.JsonSerializer _valueSerializer;
    protected final org.codehaus.jackson.type.JavaType _valueType;
    protected final boolean _valueTypeIsStatic;
    protected final org.codehaus.jackson.map.TypeSerializer _valueTypeSerializer;

    static void <clinit>()
    {
        org.codehaus.jackson.type.JavaType $r0;

        $r0 = staticinvoke <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType fastSimpleType(java.lang.Class)>(class "Ljava/lang/Object;");

        <org.codehaus.jackson.map.ser.MapSerializer: org.codehaus.jackson.type.JavaType UNSPECIFIED_TYPE> = $r0;

        return;
    }

    protected void <init>()
    {
        org.codehaus.jackson.map.ser.MapSerializer r0;

        r0 := @this: org.codehaus.jackson.map.ser.MapSerializer;

        specialinvoke r0.<org.codehaus.jackson.map.ser.MapSerializer: void <init>(java.util.HashSet,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.type.JavaType,boolean,org.codehaus.jackson.map.TypeSerializer,org.codehaus.jackson.map.JsonSerializer,org.codehaus.jackson.map.BeanProperty)>(null, null, null, 0, null, null, null);

        return;
    }

    protected void <init>(java.util.HashSet, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.type.JavaType, boolean, org.codehaus.jackson.map.TypeSerializer, org.codehaus.jackson.map.JsonSerializer, org.codehaus.jackson.map.BeanProperty)
    {
        org.codehaus.jackson.map.ser.MapSerializer r0;
        java.util.HashSet r1;
        org.codehaus.jackson.type.JavaType $r2, $r3;
        boolean $z0;
        org.codehaus.jackson.map.TypeSerializer $r4;
        org.codehaus.jackson.map.JsonSerializer r5;
        org.codehaus.jackson.map.BeanProperty $r6;

        r0 := @this: org.codehaus.jackson.map.ser.MapSerializer;

        r1 := @parameter0: java.util.HashSet;

        $r2 := @parameter1: org.codehaus.jackson.type.JavaType;

        $r3 := @parameter2: org.codehaus.jackson.type.JavaType;

        $z0 := @parameter3: boolean;

        $r4 := @parameter4: org.codehaus.jackson.map.TypeSerializer;

        r5 := @parameter5: org.codehaus.jackson.map.JsonSerializer;

        $r6 := @parameter6: org.codehaus.jackson.map.BeanProperty;

        specialinvoke r0.<org.codehaus.jackson.map.ser.ContainerSerializerBase: void <init>(java.lang.Class,boolean)>(class "Ljava/util/Map;", 0);

        r0.<org.codehaus.jackson.map.ser.MapSerializer: org.codehaus.jackson.map.BeanProperty _property> = $r6;

        r0.<org.codehaus.jackson.map.ser.MapSerializer: java.util.HashSet _ignoredEntries> = r1;

        r0.<org.codehaus.jackson.map.ser.MapSerializer: org.codehaus.jackson.type.JavaType _keyType> = $r2;

        r0.<org.codehaus.jackson.map.ser.MapSerializer: org.codehaus.jackson.type.JavaType _valueType> = $r3;

        r0.<org.codehaus.jackson.map.ser.MapSerializer: boolean _valueTypeIsStatic> = $z0;

        r0.<org.codehaus.jackson.map.ser.MapSerializer: org.codehaus.jackson.map.TypeSerializer _valueTypeSerializer> = $r4;

        r0.<org.codehaus.jackson.map.ser.MapSerializer: org.codehaus.jackson.map.JsonSerializer _keySerializer> = r5;

        return;
    }

    protected void <init>(java.util.HashSet, org.codehaus.jackson.type.JavaType, boolean, org.codehaus.jackson.map.TypeSerializer)
    {
        org.codehaus.jackson.map.ser.MapSerializer r0;
        java.util.HashSet r1;
        org.codehaus.jackson.type.JavaType $r2, $r4;
        boolean $z0;
        org.codehaus.jackson.map.TypeSerializer $r3;

        r0 := @this: org.codehaus.jackson.map.ser.MapSerializer;

        r1 := @parameter0: java.util.HashSet;

        $r2 := @parameter1: org.codehaus.jackson.type.JavaType;

        $z0 := @parameter2: boolean;

        $r3 := @parameter3: org.codehaus.jackson.map.TypeSerializer;

        $r4 = <org.codehaus.jackson.map.ser.MapSerializer: org.codehaus.jackson.type.JavaType UNSPECIFIED_TYPE>;

        specialinvoke r0.<org.codehaus.jackson.map.ser.MapSerializer: void <init>(java.util.HashSet,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.type.JavaType,boolean,org.codehaus.jackson.map.TypeSerializer,org.codehaus.jackson.map.JsonSerializer,org.codehaus.jackson.map.BeanProperty)>(r1, $r4, $r2, $z0, $r3, null, null);

        return;
    }

    public static org.codehaus.jackson.map.ser.MapSerializer construct(java.lang.String[], org.codehaus.jackson.type.JavaType, boolean, org.codehaus.jackson.map.TypeSerializer, org.codehaus.jackson.map.BeanProperty)
    {
        java.lang.String[] $r0;
        org.codehaus.jackson.type.JavaType $r1, r5;
        org.codehaus.jackson.map.TypeSerializer $r2;
        org.codehaus.jackson.map.BeanProperty $r3;
        boolean $z0;
        java.util.HashSet $r4;
        org.codehaus.jackson.map.ser.MapSerializer $r6;

        $r0 := @parameter0: java.lang.String[];

        $r1 := @parameter1: org.codehaus.jackson.type.JavaType;

        $z0 := @parameter2: boolean;

        $r2 := @parameter3: org.codehaus.jackson.map.TypeSerializer;

        $r3 := @parameter4: org.codehaus.jackson.map.BeanProperty;

        $r4 = staticinvoke <org.codehaus.jackson.map.ser.MapSerializer: java.util.HashSet toSet(java.lang.String[])>($r0);

        if $r1 != null goto label3;

        $r1 = <org.codehaus.jackson.map.ser.MapSerializer: org.codehaus.jackson.type.JavaType UNSPECIFIED_TYPE>;

        r5 = $r1;

     label1:
        if $z0 != 0 goto label2;

        if $r1 == null goto label4;

        $z0 = virtualinvoke $r1.<org.codehaus.jackson.type.JavaType: boolean isFinal()>();

        if $z0 == 0 goto label4;

        $z0 = 1;

     label2:
        $r6 = new org.codehaus.jackson.map.ser.MapSerializer;

        specialinvoke $r6.<org.codehaus.jackson.map.ser.MapSerializer: void <init>(java.util.HashSet,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.type.JavaType,boolean,org.codehaus.jackson.map.TypeSerializer,org.codehaus.jackson.map.JsonSerializer,org.codehaus.jackson.map.BeanProperty)>($r4, r5, $r1, $z0, $r2, null, $r3);

        return $r6;

     label3:
        r5 = virtualinvoke $r1.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType getKeyType()>();

        $r1 = virtualinvoke $r1.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType getContentType()>();

        goto label1;

     label4:
        $z0 = 0;

        goto label2;
    }

    private static java.util.HashSet toSet(java.lang.String[])
    {
        java.lang.String[] $r0;
        int i0, i1;
        java.lang.String r1;
        java.util.HashSet r2;

        $r0 := @parameter0: java.lang.String[];

        if $r0 == null goto label1;

        i0 = lengthof $r0;

        if i0 != 0 goto label2;

     label1:
        return null;

     label2:
        r2 = new java.util.HashSet;

        i0 = lengthof $r0;

        specialinvoke r2.<java.util.HashSet: void <init>(int)>(i0);

        i0 = lengthof $r0;

        i1 = 0;

     label3:
        if i1 >= i0 goto label4;

        r1 = $r0[i1];

        virtualinvoke r2.<java.util.HashSet: boolean add(java.lang.Object)>(r1);

        i1 = i1 + 1;

        goto label3;

     label4:
        return r2;
    }

    public org.codehaus.jackson.map.ser.ContainerSerializerBase _withValueTypeSerializer(org.codehaus.jackson.map.TypeSerializer)
    {
        org.codehaus.jackson.map.ser.MapSerializer r0, r2;
        org.codehaus.jackson.map.TypeSerializer $r1;
        org.codehaus.jackson.type.JavaType $r3, $r4;
        boolean $z0;
        org.codehaus.jackson.map.JsonSerializer $r5;
        org.codehaus.jackson.map.BeanProperty $r6;
        java.util.HashSet $r7;

        r0 := @this: org.codehaus.jackson.map.ser.MapSerializer;

        $r1 := @parameter0: org.codehaus.jackson.map.TypeSerializer;

        r2 = new org.codehaus.jackson.map.ser.MapSerializer;

        $r7 = r0.<org.codehaus.jackson.map.ser.MapSerializer: java.util.HashSet _ignoredEntries>;

        $r3 = r0.<org.codehaus.jackson.map.ser.MapSerializer: org.codehaus.jackson.type.JavaType _keyType>;

        $r4 = r0.<org.codehaus.jackson.map.ser.MapSerializer: org.codehaus.jackson.type.JavaType _valueType>;

        $z0 = r0.<org.codehaus.jackson.map.ser.MapSerializer: boolean _valueTypeIsStatic>;

        $r5 = r0.<org.codehaus.jackson.map.ser.MapSerializer: org.codehaus.jackson.map.JsonSerializer _keySerializer>;

        $r6 = r0.<org.codehaus.jackson.map.ser.MapSerializer: org.codehaus.jackson.map.BeanProperty _property>;

        specialinvoke r2.<org.codehaus.jackson.map.ser.MapSerializer: void <init>(java.util.HashSet,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.type.JavaType,boolean,org.codehaus.jackson.map.TypeSerializer,org.codehaus.jackson.map.JsonSerializer,org.codehaus.jackson.map.BeanProperty)>($r7, $r3, $r4, $z0, $r1, $r5, $r6);

        $r5 = r0.<org.codehaus.jackson.map.ser.MapSerializer: org.codehaus.jackson.map.JsonSerializer _valueSerializer>;

        if $r5 == null goto label1;

        $r5 = r0.<org.codehaus.jackson.map.ser.MapSerializer: org.codehaus.jackson.map.JsonSerializer _valueSerializer>;

        r2.<org.codehaus.jackson.map.ser.MapSerializer: org.codehaus.jackson.map.JsonSerializer _valueSerializer> = $r5;

     label1:
        return r2;
    }

    public org.codehaus.jackson.JsonNode getSchema(org.codehaus.jackson.map.SerializerProvider, java.lang.reflect.Type)
    {
        org.codehaus.jackson.map.ser.MapSerializer r0;
        org.codehaus.jackson.map.SerializerProvider $r1;
        java.lang.reflect.Type $r2;
        org.codehaus.jackson.node.ObjectNode $r3;

        r0 := @this: org.codehaus.jackson.map.ser.MapSerializer;

        $r1 := @parameter0: org.codehaus.jackson.map.SerializerProvider;

        $r2 := @parameter1: java.lang.reflect.Type;

        $r3 = virtualinvoke r0.<org.codehaus.jackson.map.ser.MapSerializer: org.codehaus.jackson.node.ObjectNode createSchemaNode(java.lang.String,boolean)>("object", 1);

        return $r3;
    }

    public void resolve(org.codehaus.jackson.map.SerializerProvider) throws org.codehaus.jackson.map.JsonMappingException
    {
        org.codehaus.jackson.map.ser.MapSerializer r0;
        org.codehaus.jackson.map.SerializerProvider $r1;
        boolean $z0;
        org.codehaus.jackson.type.JavaType $r2;
        org.codehaus.jackson.map.BeanProperty $r3;
        org.codehaus.jackson.map.JsonSerializer $r4;

        r0 := @this: org.codehaus.jackson.map.ser.MapSerializer;

        $r1 := @parameter0: org.codehaus.jackson.map.SerializerProvider;

        $z0 = r0.<org.codehaus.jackson.map.ser.MapSerializer: boolean _valueTypeIsStatic>;

        if $z0 == 0 goto label1;

        $r2 = r0.<org.codehaus.jackson.map.ser.MapSerializer: org.codehaus.jackson.type.JavaType _valueType>;

        $r3 = r0.<org.codehaus.jackson.map.ser.MapSerializer: org.codehaus.jackson.map.BeanProperty _property>;

        $r4 = virtualinvoke $r1.<org.codehaus.jackson.map.SerializerProvider: org.codehaus.jackson.map.JsonSerializer findValueSerializer(org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanProperty)>($r2, $r3);

        r0.<org.codehaus.jackson.map.ser.MapSerializer: org.codehaus.jackson.map.JsonSerializer _valueSerializer> = $r4;

     label1:
        $r2 = r0.<org.codehaus.jackson.map.ser.MapSerializer: org.codehaus.jackson.type.JavaType _keyType>;

        $r3 = r0.<org.codehaus.jackson.map.ser.MapSerializer: org.codehaus.jackson.map.BeanProperty _property>;

        $r4 = virtualinvoke $r1.<org.codehaus.jackson.map.SerializerProvider: org.codehaus.jackson.map.JsonSerializer getKeySerializer(org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanProperty)>($r2, $r3);

        r0.<org.codehaus.jackson.map.ser.MapSerializer: org.codehaus.jackson.map.JsonSerializer _keySerializer> = $r4;

        return;
    }

    public volatile void serialize(java.lang.Object, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        org.codehaus.jackson.map.ser.MapSerializer r0;
        org.codehaus.jackson.JsonGenerator $r1;
        org.codehaus.jackson.map.SerializerProvider $r2;
        java.lang.Object $r3;
        java.util.Map $r4;

        r0 := @this: org.codehaus.jackson.map.ser.MapSerializer;

        $r3 := @parameter0: java.lang.Object;

        $r1 := @parameter1: org.codehaus.jackson.JsonGenerator;

        $r2 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        $r4 = (java.util.Map) $r3;

        virtualinvoke r0.<org.codehaus.jackson.map.ser.MapSerializer: void serialize(java.util.Map,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>($r4, $r1, $r2);

        return;
    }

    public void serialize(java.util.Map, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        org.codehaus.jackson.map.ser.MapSerializer r0;
        java.util.Map r1;
        org.codehaus.jackson.JsonGenerator $r2;
        org.codehaus.jackson.map.SerializerProvider $r3;
        boolean $z0;
        org.codehaus.jackson.map.JsonSerializer $r4;

        r0 := @this: org.codehaus.jackson.map.ser.MapSerializer;

        r1 := @parameter0: java.util.Map;

        $r2 := @parameter1: org.codehaus.jackson.JsonGenerator;

        $r3 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        virtualinvoke $r2.<org.codehaus.jackson.JsonGenerator: void writeStartObject()>();

        $z0 = interfaceinvoke r1.<java.util.Map: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r4 = r0.<org.codehaus.jackson.map.ser.MapSerializer: org.codehaus.jackson.map.JsonSerializer _valueSerializer>;

        if $r4 == null goto label2;

        $r4 = r0.<org.codehaus.jackson.map.ser.MapSerializer: org.codehaus.jackson.map.JsonSerializer _valueSerializer>;

        virtualinvoke r0.<org.codehaus.jackson.map.ser.MapSerializer: void serializeFieldsUsing(java.util.Map,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider,org.codehaus.jackson.map.JsonSerializer)>(r1, $r2, $r3, $r4);

     label1:
        virtualinvoke $r2.<org.codehaus.jackson.JsonGenerator: void writeEndObject()>();

        return;

     label2:
        virtualinvoke r0.<org.codehaus.jackson.map.ser.MapSerializer: void serializeFields(java.util.Map,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>(r1, $r2, $r3);

        goto label1;
    }

    protected void serializeFields(java.util.Map, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        org.codehaus.jackson.map.ser.MapSerializer r0;
        java.util.Map r1;
        org.codehaus.jackson.JsonGenerator $r2;
        org.codehaus.jackson.map.SerializerProvider $r3;
        java.lang.Exception r4;
        org.codehaus.jackson.map.TypeSerializer $r5;
        org.codehaus.jackson.map.JsonSerializer $r6, r7, $r16;
        java.lang.Class r8, $r17;
        java.util.HashSet $r9;
        org.codehaus.jackson.map.SerializationConfig$Feature $r10;
        boolean $z0, $z1;
        java.util.Set $r11;
        java.util.Iterator $r12;
        java.lang.Object $r13, $r15;
        java.util.Map$Entry r14;
        java.lang.StringBuilder $r18;
        java.lang.String $r19;
        org.codehaus.jackson.map.BeanProperty $r20;

        r0 := @this: org.codehaus.jackson.map.ser.MapSerializer;

        r1 := @parameter0: java.util.Map;

        $r2 := @parameter1: org.codehaus.jackson.JsonGenerator;

        $r3 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        $r5 = r0.<org.codehaus.jackson.map.ser.MapSerializer: org.codehaus.jackson.map.TypeSerializer _valueTypeSerializer>;

        if $r5 == null goto label01;

        virtualinvoke r0.<org.codehaus.jackson.map.ser.MapSerializer: void serializeTypedFields(java.util.Map,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>(r1, $r2, $r3);

        return;

     label01:
        $r6 = r0.<org.codehaus.jackson.map.ser.MapSerializer: org.codehaus.jackson.map.JsonSerializer _keySerializer>;

        r7 = null;

        r8 = null;

        $r9 = r0.<org.codehaus.jackson.map.ser.MapSerializer: java.util.HashSet _ignoredEntries>;

        $r10 = <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature WRITE_NULL_MAP_VALUES>;

        $z0 = virtualinvoke $r3.<org.codehaus.jackson.map.SerializerProvider: boolean isEnabled(org.codehaus.jackson.map.SerializationConfig$Feature)>($r10);

        if $z0 != 0 goto label05;

        $z0 = 1;

     label02:
        $r11 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        $r12 = interfaceinvoke $r11.<java.util.Set: java.util.Iterator iterator()>();

     label03:
        $z1 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label14;

        $r13 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        r14 = (java.util.Map$Entry) $r13;

        $r13 = interfaceinvoke r14.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r15 = interfaceinvoke r14.<java.util.Map$Entry: java.lang.Object getKey()>();

        if $r15 != null goto label06;

        $r16 = virtualinvoke $r3.<org.codehaus.jackson.map.SerializerProvider: org.codehaus.jackson.map.JsonSerializer getNullKeySerializer()>();

        virtualinvoke $r16.<org.codehaus.jackson.map.JsonSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>(null, $r2, $r3);

     label04:
        if $r13 != null goto label09;

        virtualinvoke $r3.<org.codehaus.jackson.map.SerializerProvider: void defaultSerializeNull(org.codehaus.jackson.JsonGenerator)>($r2);

        goto label03;

     label05:
        $z0 = 0;

        goto label02;

     label06:
        if $z0 == 0 goto label07;

        if $r13 == null goto label03;

     label07:
        if $r9 == null goto label08;

        $z1 = virtualinvoke $r9.<java.util.HashSet: boolean contains(java.lang.Object)>($r15);

        if $z1 != 0 goto label03;

     label08:
        virtualinvoke $r6.<org.codehaus.jackson.map.JsonSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>($r15, $r2, $r3);

        goto label04;

     label09:
        $r17 = virtualinvoke $r13.<java.lang.Object: java.lang.Class getClass()>();

        if $r17 != r8 goto label13;

        $r16 = r7;

     label10:
        virtualinvoke $r16.<org.codehaus.jackson.map.JsonSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>($r13, $r2, $r3);

     label11:
        goto label03;

     label12:
        r4 := @caughtexception;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r18 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.codehaus.jackson.map.ser.MapSerializer: void wrapAndThrow(org.codehaus.jackson.map.SerializerProvider,java.lang.Throwable,java.lang.Object,java.lang.String)>($r3, r4, r1, $r19);

        goto label03;

     label13:
        $r20 = r0.<org.codehaus.jackson.map.ser.MapSerializer: org.codehaus.jackson.map.BeanProperty _property>;

        r7 = virtualinvoke $r3.<org.codehaus.jackson.map.SerializerProvider: org.codehaus.jackson.map.JsonSerializer findValueSerializer(java.lang.Class,org.codehaus.jackson.map.BeanProperty)>($r17, $r20);

        $r16 = r7;

        r8 = $r17;

        goto label10;

     label14:
        return;

        catch java.lang.Exception from label10 to label11 with label12;
    }

    protected void serializeFieldsUsing(java.util.Map, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider, org.codehaus.jackson.map.JsonSerializer) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        org.codehaus.jackson.map.ser.MapSerializer r0;
        java.util.Map r1;
        org.codehaus.jackson.JsonGenerator $r2;
        org.codehaus.jackson.map.SerializerProvider $r3;
        org.codehaus.jackson.map.JsonSerializer r4, $r5, $r14;
        java.util.HashSet $r6;
        org.codehaus.jackson.map.TypeSerializer $r7;
        org.codehaus.jackson.map.SerializationConfig$Feature $r8;
        boolean $z0, $z1;
        java.util.Set $r9;
        java.util.Iterator $r10;
        java.lang.Object $r11, $r13;
        java.util.Map$Entry r12;
        java.lang.Exception $r15;
        java.lang.StringBuilder $r16;
        java.lang.String $r17;

        r0 := @this: org.codehaus.jackson.map.ser.MapSerializer;

        r1 := @parameter0: java.util.Map;

        $r2 := @parameter1: org.codehaus.jackson.JsonGenerator;

        $r3 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        r4 := @parameter3: org.codehaus.jackson.map.JsonSerializer;

        $r5 = r0.<org.codehaus.jackson.map.ser.MapSerializer: org.codehaus.jackson.map.JsonSerializer _keySerializer>;

        $r6 = r0.<org.codehaus.jackson.map.ser.MapSerializer: java.util.HashSet _ignoredEntries>;

        $r7 = r0.<org.codehaus.jackson.map.ser.MapSerializer: org.codehaus.jackson.map.TypeSerializer _valueTypeSerializer>;

        $r8 = <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature WRITE_NULL_MAP_VALUES>;

        $z0 = virtualinvoke $r3.<org.codehaus.jackson.map.SerializerProvider: boolean isEnabled(org.codehaus.jackson.map.SerializationConfig$Feature)>($r8);

        if $z0 != 0 goto label04;

        $z0 = 1;

     label01:
        $r9 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        $r10 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();

     label02:
        $z1 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label14;

        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r12 = (java.util.Map$Entry) $r11;

        $r11 = interfaceinvoke r12.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r13 = interfaceinvoke r12.<java.util.Map$Entry: java.lang.Object getKey()>();

        if $r13 != null goto label05;

        $r14 = virtualinvoke $r3.<org.codehaus.jackson.map.SerializerProvider: org.codehaus.jackson.map.JsonSerializer getNullKeySerializer()>();

        virtualinvoke $r14.<org.codehaus.jackson.map.JsonSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>(null, $r2, $r3);

     label03:
        if $r11 != null goto label08;

        virtualinvoke $r3.<org.codehaus.jackson.map.SerializerProvider: void defaultSerializeNull(org.codehaus.jackson.JsonGenerator)>($r2);

        goto label02;

     label04:
        $z0 = 0;

        goto label01;

     label05:
        if $z0 == 0 goto label06;

        if $r11 == null goto label02;

     label06:
        if $r6 == null goto label07;

        $z1 = virtualinvoke $r6.<java.util.HashSet: boolean contains(java.lang.Object)>($r13);

        if $z1 != 0 goto label02;

     label07:
        virtualinvoke $r5.<org.codehaus.jackson.map.JsonSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>($r13, $r2, $r3);

        goto label03;

     label08:
        if $r7 != null goto label12;

     label09:
        virtualinvoke r4.<org.codehaus.jackson.map.JsonSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>($r11, $r2, $r3);

     label10:
        goto label02;

     label11:
        $r15 := @caughtexception;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r16 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.codehaus.jackson.map.ser.MapSerializer: void wrapAndThrow(org.codehaus.jackson.map.SerializerProvider,java.lang.Throwable,java.lang.Object,java.lang.String)>($r3, $r15, r1, $r17);

        goto label02;

     label12:
        virtualinvoke r4.<org.codehaus.jackson.map.JsonSerializer: void serializeWithType(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider,org.codehaus.jackson.map.TypeSerializer)>($r11, $r2, $r3, $r7);

     label13:
        goto label02;

     label14:
        return;

        catch java.lang.Exception from label09 to label10 with label11;
        catch java.lang.Exception from label12 to label13 with label11;
    }

    protected void serializeTypedFields(java.util.Map, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        org.codehaus.jackson.map.ser.MapSerializer r0;
        java.util.Map r1;
        org.codehaus.jackson.JsonGenerator $r2;
        org.codehaus.jackson.map.SerializerProvider $r3;
        org.codehaus.jackson.map.JsonSerializer $r4, r5, $r14;
        java.lang.Class r6, $r15;
        java.util.HashSet $r7;
        org.codehaus.jackson.map.SerializationConfig$Feature $r8;
        boolean $z0, $z1;
        java.util.Set $r9;
        java.util.Iterator $r10;
        java.lang.Object $r11, $r13;
        java.util.Map$Entry r12;
        org.codehaus.jackson.map.TypeSerializer $r16;
        java.lang.Exception $r17;
        java.lang.StringBuilder $r18;
        java.lang.String $r19;
        org.codehaus.jackson.map.BeanProperty $r20;

        r0 := @this: org.codehaus.jackson.map.ser.MapSerializer;

        r1 := @parameter0: java.util.Map;

        $r2 := @parameter1: org.codehaus.jackson.JsonGenerator;

        $r3 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        $r4 = r0.<org.codehaus.jackson.map.ser.MapSerializer: org.codehaus.jackson.map.JsonSerializer _keySerializer>;

        r5 = null;

        r6 = null;

        $r7 = r0.<org.codehaus.jackson.map.ser.MapSerializer: java.util.HashSet _ignoredEntries>;

        $r8 = <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature WRITE_NULL_MAP_VALUES>;

        $z0 = virtualinvoke $r3.<org.codehaus.jackson.map.SerializerProvider: boolean isEnabled(org.codehaus.jackson.map.SerializationConfig$Feature)>($r8);

        if $z0 != 0 goto label04;

        $z0 = 1;

     label01:
        $r9 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        $r10 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();

     label02:
        $z1 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label13;

        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r12 = (java.util.Map$Entry) $r11;

        $r11 = interfaceinvoke r12.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r13 = interfaceinvoke r12.<java.util.Map$Entry: java.lang.Object getKey()>();

        if $r13 != null goto label05;

        $r14 = virtualinvoke $r3.<org.codehaus.jackson.map.SerializerProvider: org.codehaus.jackson.map.JsonSerializer getNullKeySerializer()>();

        virtualinvoke $r14.<org.codehaus.jackson.map.JsonSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>(null, $r2, $r3);

     label03:
        if $r11 != null goto label08;

        virtualinvoke $r3.<org.codehaus.jackson.map.SerializerProvider: void defaultSerializeNull(org.codehaus.jackson.JsonGenerator)>($r2);

        goto label02;

     label04:
        $z0 = 0;

        goto label01;

     label05:
        if $z0 == 0 goto label06;

        if $r11 == null goto label02;

     label06:
        if $r7 == null goto label07;

        $z1 = virtualinvoke $r7.<java.util.HashSet: boolean contains(java.lang.Object)>($r13);

        if $z1 != 0 goto label02;

     label07:
        virtualinvoke $r4.<org.codehaus.jackson.map.JsonSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>($r13, $r2, $r3);

        goto label03;

     label08:
        $r15 = virtualinvoke $r11.<java.lang.Object: java.lang.Class getClass()>();

        if $r15 != r6 goto label12;

        $r14 = r5;

     label09:
        $r16 = r0.<org.codehaus.jackson.map.ser.MapSerializer: org.codehaus.jackson.map.TypeSerializer _valueTypeSerializer>;

        virtualinvoke $r14.<org.codehaus.jackson.map.JsonSerializer: void serializeWithType(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider,org.codehaus.jackson.map.TypeSerializer)>($r11, $r2, $r3, $r16);

     label10:
        goto label02;

     label11:
        $r17 := @caughtexception;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r18 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.codehaus.jackson.map.ser.MapSerializer: void wrapAndThrow(org.codehaus.jackson.map.SerializerProvider,java.lang.Throwable,java.lang.Object,java.lang.String)>($r3, $r17, r1, $r19);

        goto label02;

     label12:
        $r20 = r0.<org.codehaus.jackson.map.ser.MapSerializer: org.codehaus.jackson.map.BeanProperty _property>;

        r5 = virtualinvoke $r3.<org.codehaus.jackson.map.SerializerProvider: org.codehaus.jackson.map.JsonSerializer findValueSerializer(java.lang.Class,org.codehaus.jackson.map.BeanProperty)>($r15, $r20);

        $r14 = r5;

        r6 = $r15;

        goto label09;

     label13:
        return;

        catch java.lang.Exception from label09 to label10 with label11;
    }

    public volatile void serializeWithType(java.lang.Object, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider, org.codehaus.jackson.map.TypeSerializer) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.map.ser.MapSerializer r0;
        org.codehaus.jackson.JsonGenerator $r1;
        org.codehaus.jackson.map.SerializerProvider $r2;
        org.codehaus.jackson.map.TypeSerializer $r3;
        java.lang.Object $r4;
        java.util.Map $r5;

        r0 := @this: org.codehaus.jackson.map.ser.MapSerializer;

        $r4 := @parameter0: java.lang.Object;

        $r1 := @parameter1: org.codehaus.jackson.JsonGenerator;

        $r2 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        $r3 := @parameter3: org.codehaus.jackson.map.TypeSerializer;

        $r5 = (java.util.Map) $r4;

        virtualinvoke r0.<org.codehaus.jackson.map.ser.MapSerializer: void serializeWithType(java.util.Map,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider,org.codehaus.jackson.map.TypeSerializer)>($r5, $r1, $r2, $r3);

        return;
    }

    public void serializeWithType(java.util.Map, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider, org.codehaus.jackson.map.TypeSerializer) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        org.codehaus.jackson.map.ser.MapSerializer r0;
        java.util.Map r1;
        org.codehaus.jackson.JsonGenerator $r2;
        org.codehaus.jackson.map.SerializerProvider $r3;
        org.codehaus.jackson.map.TypeSerializer $r4;
        boolean $z0;
        org.codehaus.jackson.map.JsonSerializer $r5;

        r0 := @this: org.codehaus.jackson.map.ser.MapSerializer;

        r1 := @parameter0: java.util.Map;

        $r2 := @parameter1: org.codehaus.jackson.JsonGenerator;

        $r3 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        $r4 := @parameter3: org.codehaus.jackson.map.TypeSerializer;

        virtualinvoke $r4.<org.codehaus.jackson.map.TypeSerializer: void writeTypePrefixForObject(java.lang.Object,org.codehaus.jackson.JsonGenerator)>(r1, $r2);

        $z0 = interfaceinvoke r1.<java.util.Map: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r5 = r0.<org.codehaus.jackson.map.ser.MapSerializer: org.codehaus.jackson.map.JsonSerializer _valueSerializer>;

        if $r5 == null goto label2;

        $r5 = r0.<org.codehaus.jackson.map.ser.MapSerializer: org.codehaus.jackson.map.JsonSerializer _valueSerializer>;

        virtualinvoke r0.<org.codehaus.jackson.map.ser.MapSerializer: void serializeFieldsUsing(java.util.Map,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider,org.codehaus.jackson.map.JsonSerializer)>(r1, $r2, $r3, $r5);

     label1:
        virtualinvoke $r4.<org.codehaus.jackson.map.TypeSerializer: void writeTypeSuffixForObject(java.lang.Object,org.codehaus.jackson.JsonGenerator)>(r1, $r2);

        return;

     label2:
        virtualinvoke r0.<org.codehaus.jackson.map.ser.MapSerializer: void serializeFields(java.util.Map,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>(r1, $r2, $r3);

        goto label1;
    }
}
