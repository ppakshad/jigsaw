public class org.codehaus.jackson.util.JsonParserSequence extends org.codehaus.jackson.util.JsonParserDelegate
{
    protected int _nextParser;
    protected final org.codehaus.jackson.JsonParser[] _parsers;

    protected void <init>(org.codehaus.jackson.JsonParser[])
    {
        org.codehaus.jackson.util.JsonParserSequence r0;
        org.codehaus.jackson.JsonParser[] $r1;
        org.codehaus.jackson.JsonParser $r2;

        r0 := @this: org.codehaus.jackson.util.JsonParserSequence;

        $r1 := @parameter0: org.codehaus.jackson.JsonParser[];

        $r2 = $r1[0];

        specialinvoke r0.<org.codehaus.jackson.util.JsonParserDelegate: void <init>(org.codehaus.jackson.JsonParser)>($r2);

        r0.<org.codehaus.jackson.util.JsonParserSequence: org.codehaus.jackson.JsonParser[] _parsers> = $r1;

        r0.<org.codehaus.jackson.util.JsonParserSequence: int _nextParser> = 1;

        return;
    }

    public static org.codehaus.jackson.util.JsonParserSequence createFlattened(org.codehaus.jackson.JsonParser, org.codehaus.jackson.JsonParser)
    {
        java.util.ArrayList r0;
        org.codehaus.jackson.JsonParser r1, r2;
        boolean $z0;
        org.codehaus.jackson.util.JsonParserSequence $r3;
        org.codehaus.jackson.JsonParser[] $r4;
        int $i0;
        java.lang.Object[] $r5;

        r1 := @parameter0: org.codehaus.jackson.JsonParser;

        r2 := @parameter1: org.codehaus.jackson.JsonParser;

        $z0 = r1 instanceof org.codehaus.jackson.util.JsonParserSequence;

        if $z0 != 0 goto label1;

        $z0 = r2 instanceof org.codehaus.jackson.util.JsonParserSequence;

        if $z0 != 0 goto label1;

        $r3 = new org.codehaus.jackson.util.JsonParserSequence;

        $r4 = newarray (org.codehaus.jackson.JsonParser)[2];

        $r4[0] = r1;

        $r4[1] = r2;

        specialinvoke $r3.<org.codehaus.jackson.util.JsonParserSequence: void <init>(org.codehaus.jackson.JsonParser[])>($r4);

        return $r3;

     label1:
        r0 = new java.util.ArrayList;

        specialinvoke r0.<java.util.ArrayList: void <init>()>();

        $z0 = r1 instanceof org.codehaus.jackson.util.JsonParserSequence;

        if $z0 == 0 goto label4;

        $r3 = (org.codehaus.jackson.util.JsonParserSequence) r1;

        virtualinvoke $r3.<org.codehaus.jackson.util.JsonParserSequence: void addFlattenedActiveParsers(java.util.List)>(r0);

     label2:
        $z0 = r2 instanceof org.codehaus.jackson.util.JsonParserSequence;

        if $z0 == 0 goto label5;

        $r3 = (org.codehaus.jackson.util.JsonParserSequence) r2;

        virtualinvoke $r3.<org.codehaus.jackson.util.JsonParserSequence: void addFlattenedActiveParsers(java.util.List)>(r0);

     label3:
        $r3 = new org.codehaus.jackson.util.JsonParserSequence;

        $i0 = virtualinvoke r0.<java.util.ArrayList: int size()>();

        $r4 = newarray (org.codehaus.jackson.JsonParser)[$i0];

        $r5 = virtualinvoke r0.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r4);

        $r4 = (org.codehaus.jackson.JsonParser[]) $r5;

        specialinvoke $r3.<org.codehaus.jackson.util.JsonParserSequence: void <init>(org.codehaus.jackson.JsonParser[])>($r4);

        return $r3;

     label4:
        virtualinvoke r0.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

        goto label2;

     label5:
        virtualinvoke r0.<java.util.ArrayList: boolean add(java.lang.Object)>(r2);

        goto label3;
    }

    protected void addFlattenedActiveParsers(java.util.List)
    {
        org.codehaus.jackson.util.JsonParserSequence r0, r4;
        java.util.List r1;
        int i0, i1;
        org.codehaus.jackson.JsonParser[] $r2;
        org.codehaus.jackson.JsonParser r3;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.util.JsonParserSequence;

        r1 := @parameter0: java.util.List;

        i0 = r0.<org.codehaus.jackson.util.JsonParserSequence: int _nextParser>;

        i1 = i0 - 1;

        $r2 = r0.<org.codehaus.jackson.util.JsonParserSequence: org.codehaus.jackson.JsonParser[] _parsers>;

        i0 = lengthof $r2;

     label1:
        if i1 >= i0 goto label4;

        $r2 = r0.<org.codehaus.jackson.util.JsonParserSequence: org.codehaus.jackson.JsonParser[] _parsers>;

        r3 = $r2[i1];

        $z0 = r3 instanceof org.codehaus.jackson.util.JsonParserSequence;

        if $z0 == 0 goto label3;

        r4 = (org.codehaus.jackson.util.JsonParserSequence) r3;

        virtualinvoke r4.<org.codehaus.jackson.util.JsonParserSequence: void addFlattenedActiveParsers(java.util.List)>(r1);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r3);

        goto label2;

     label4:
        return;
    }

    public void close() throws java.io.IOException
    {
        org.codehaus.jackson.util.JsonParserSequence r0;
        boolean $z0;
        org.codehaus.jackson.JsonParser $r1;

        r0 := @this: org.codehaus.jackson.util.JsonParserSequence;

     label1:
        $r1 = r0.<org.codehaus.jackson.util.JsonParserSequence: org.codehaus.jackson.JsonParser delegate>;

        virtualinvoke $r1.<org.codehaus.jackson.JsonParser: void close()>();

        $z0 = virtualinvoke r0.<org.codehaus.jackson.util.JsonParserSequence: boolean switchToNext()>();

        if $z0 != 0 goto label1;

        return;
    }

    public int containedParsersCount()
    {
        org.codehaus.jackson.util.JsonParserSequence r0;
        org.codehaus.jackson.JsonParser[] $r1;
        int $i0;

        r0 := @this: org.codehaus.jackson.util.JsonParserSequence;

        $r1 = r0.<org.codehaus.jackson.util.JsonParserSequence: org.codehaus.jackson.JsonParser[] _parsers>;

        $i0 = lengthof $r1;

        return $i0;
    }

    public org.codehaus.jackson.JsonToken nextToken() throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.util.JsonParserSequence r0;
        org.codehaus.jackson.JsonParser $r1;
        org.codehaus.jackson.JsonToken $r2;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.util.JsonParserSequence;

        $r1 = r0.<org.codehaus.jackson.util.JsonParserSequence: org.codehaus.jackson.JsonParser delegate>;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken nextToken()>();

        if $r2 == null goto label1;

        return $r2;

     label1:
        $z0 = virtualinvoke r0.<org.codehaus.jackson.util.JsonParserSequence: boolean switchToNext()>();

        if $z0 == 0 goto label2;

        $r1 = r0.<org.codehaus.jackson.util.JsonParserSequence: org.codehaus.jackson.JsonParser delegate>;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken nextToken()>();

        if $r2 == null goto label1;

        return $r2;

     label2:
        return null;
    }

    protected boolean switchToNext()
    {
        org.codehaus.jackson.util.JsonParserSequence r0;
        int $i0, $i1;
        org.codehaus.jackson.JsonParser[] $r1;
        org.codehaus.jackson.JsonParser $r2;

        r0 := @this: org.codehaus.jackson.util.JsonParserSequence;

        $i0 = r0.<org.codehaus.jackson.util.JsonParserSequence: int _nextParser>;

        $r1 = r0.<org.codehaus.jackson.util.JsonParserSequence: org.codehaus.jackson.JsonParser[] _parsers>;

        $i1 = lengthof $r1;

        if $i0 < $i1 goto label1;

        return 0;

     label1:
        $r1 = r0.<org.codehaus.jackson.util.JsonParserSequence: org.codehaus.jackson.JsonParser[] _parsers>;

        $i1 = r0.<org.codehaus.jackson.util.JsonParserSequence: int _nextParser>;

        $i0 = $i1 + 1;

        r0.<org.codehaus.jackson.util.JsonParserSequence: int _nextParser> = $i0;

        $r2 = $r1[$i1];

        r0.<org.codehaus.jackson.util.JsonParserSequence: org.codehaus.jackson.JsonParser delegate> = $r2;

        return 1;
    }
}
