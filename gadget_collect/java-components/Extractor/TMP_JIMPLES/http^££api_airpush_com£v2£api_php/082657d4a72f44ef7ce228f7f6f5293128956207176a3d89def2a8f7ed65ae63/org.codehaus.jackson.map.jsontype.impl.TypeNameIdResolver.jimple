public class org.codehaus.jackson.map.jsontype.impl.TypeNameIdResolver extends org.codehaus.jackson.map.jsontype.impl.TypeIdResolverBase
{
    protected final java.util.HashMap _idToType;
    protected final java.util.HashMap _typeToId;

    protected void <init>(org.codehaus.jackson.type.JavaType, java.util.HashMap, java.util.HashMap)
    {
        org.codehaus.jackson.map.jsontype.impl.TypeNameIdResolver r0;
        org.codehaus.jackson.type.JavaType $r1;
        java.util.HashMap r2, r3;

        r0 := @this: org.codehaus.jackson.map.jsontype.impl.TypeNameIdResolver;

        $r1 := @parameter0: org.codehaus.jackson.type.JavaType;

        r2 := @parameter1: java.util.HashMap;

        r3 := @parameter2: java.util.HashMap;

        specialinvoke r0.<org.codehaus.jackson.map.jsontype.impl.TypeIdResolverBase: void <init>(org.codehaus.jackson.type.JavaType)>($r1);

        r0.<org.codehaus.jackson.map.jsontype.impl.TypeNameIdResolver: java.util.HashMap _typeToId> = r2;

        r0.<org.codehaus.jackson.map.jsontype.impl.TypeNameIdResolver: java.util.HashMap _idToType> = r3;

        return;
    }

    protected static java.lang.String _defaultTypeId(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.String $r1;
        int $i0;

        r0 := @parameter0: java.lang.Class;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int lastIndexOf(int)>(46);

        if $i0 >= 0 goto label1;

        return $r1;

     label1:
        $i0 = $i0 + 1;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>($i0);

        return $r1;
    }

    public static org.codehaus.jackson.map.jsontype.impl.TypeNameIdResolver construct(org.codehaus.jackson.type.JavaType, java.util.Collection, boolean, boolean)
    {
        org.codehaus.jackson.type.JavaType $r0, $r11;
        java.util.Collection r1;
        boolean $z0, $z1, $z2;
        java.lang.IllegalArgumentException $r2;
        java.util.HashMap r3, r4;
        java.util.Iterator $r5;
        java.lang.Object $r6;
        org.codehaus.jackson.map.jsontype.NamedType r7;
        java.lang.Class $r8;
        java.lang.String $r9, $r10;
        org.codehaus.jackson.map.jsontype.impl.TypeNameIdResolver $r12;

        $r0 := @parameter0: org.codehaus.jackson.type.JavaType;

        r1 := @parameter1: java.util.Collection;

        $z0 := @parameter2: boolean;

        $z1 := @parameter3: boolean;

        if $z0 != $z1 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r2;

     label1:
        r3 = null;

        r4 = null;

        if $z0 == 0 goto label2;

        r3 = new java.util.HashMap;

        specialinvoke r3.<java.util.HashMap: void <init>()>();

     label2:
        if $z1 == 0 goto label3;

        r4 = new java.util.HashMap;

        specialinvoke r4.<java.util.HashMap: void <init>()>();

     label3:
        if r1 == null goto label8;

        $r5 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label4:
        $z2 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label8;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.codehaus.jackson.map.jsontype.NamedType) $r6;

        $r8 = virtualinvoke r7.<org.codehaus.jackson.map.jsontype.NamedType: java.lang.Class getType()>();

        $z2 = virtualinvoke r7.<org.codehaus.jackson.map.jsontype.NamedType: boolean hasName()>();

        if $z2 == 0 goto label7;

        $r9 = virtualinvoke r7.<org.codehaus.jackson.map.jsontype.NamedType: java.lang.String getName()>();

     label5:
        if $z0 == 0 goto label6;

        $r10 = virtualinvoke $r8.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, $r9);

     label6:
        if $z1 == 0 goto label4;

        $z2 = virtualinvoke r4.<java.util.HashMap: boolean containsKey(java.lang.Object)>($r9);

        if $z2 != 0 goto label4;

        $r11 = staticinvoke <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType type(java.lang.reflect.Type)>($r8);

        virtualinvoke r4.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r11);

        goto label4;

     label7:
        $r9 = staticinvoke <org.codehaus.jackson.map.jsontype.impl.TypeNameIdResolver: java.lang.String _defaultTypeId(java.lang.Class)>($r8);

        goto label5;

     label8:
        $r12 = new org.codehaus.jackson.map.jsontype.impl.TypeNameIdResolver;

        specialinvoke $r12.<org.codehaus.jackson.map.jsontype.impl.TypeNameIdResolver: void <init>(org.codehaus.jackson.type.JavaType,java.util.HashMap,java.util.HashMap)>($r0, r3, r4);

        return $r12;
    }

    public org.codehaus.jackson.annotate.JsonTypeInfo$Id getMechanism()
    {
        org.codehaus.jackson.map.jsontype.impl.TypeNameIdResolver r0;
        org.codehaus.jackson.annotate.JsonTypeInfo$Id r1;

        r0 := @this: org.codehaus.jackson.map.jsontype.impl.TypeNameIdResolver;

        r1 = <org.codehaus.jackson.annotate.JsonTypeInfo$Id: org.codehaus.jackson.annotate.JsonTypeInfo$Id NAME>;

        return r1;
    }

    public java.lang.String idFromValue(java.lang.Object)
    {
        org.codehaus.jackson.map.jsontype.impl.TypeNameIdResolver r0;
        java.lang.Object $r1;
        java.util.HashMap $r2;
        java.lang.Class $r3;
        java.lang.String $r4;

        r0 := @this: org.codehaus.jackson.map.jsontype.impl.TypeNameIdResolver;

        $r1 := @parameter0: java.lang.Object;

        $r3 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = r0.<org.codehaus.jackson.map.jsontype.impl.TypeNameIdResolver: java.util.HashMap _typeToId>;

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        $r1 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r4);

        $r4 = (java.lang.String) $r1;

        if $r4 != null goto label1;

        $r4 = staticinvoke <org.codehaus.jackson.map.jsontype.impl.TypeNameIdResolver: java.lang.String _defaultTypeId(java.lang.Class)>($r3);

     label1:
        return $r4;
    }

    public java.lang.String toString()
    {
        org.codehaus.jackson.map.jsontype.impl.TypeNameIdResolver r0;
        java.lang.StringBuilder r1, $r2;
        java.lang.Class $r3;
        java.lang.String $r4;
        java.util.HashMap $r5;

        r0 := @this: org.codehaus.jackson.map.jsontype.impl.TypeNameIdResolver;

        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r2 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; id-to-type=");

        $r5 = r0.<org.codehaus.jackson.map.jsontype.impl.TypeNameIdResolver: java.util.HashMap _idToType>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        $r4 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    public org.codehaus.jackson.type.JavaType typeFromId(java.lang.String) throws java.lang.IllegalArgumentException
    {
        org.codehaus.jackson.map.jsontype.impl.TypeNameIdResolver r0;
        java.lang.String $r1;
        java.util.HashMap $r2;
        java.lang.Object $r3;
        org.codehaus.jackson.type.JavaType r4;

        r0 := @this: org.codehaus.jackson.map.jsontype.impl.TypeNameIdResolver;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.codehaus.jackson.map.jsontype.impl.TypeNameIdResolver: java.util.HashMap _idToType>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r1);

        r4 = (org.codehaus.jackson.type.JavaType) $r3;

        return r4;
    }
}
