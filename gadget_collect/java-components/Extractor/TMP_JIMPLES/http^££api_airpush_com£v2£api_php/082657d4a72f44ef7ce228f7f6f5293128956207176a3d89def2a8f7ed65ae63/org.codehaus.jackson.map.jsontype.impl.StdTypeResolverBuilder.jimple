public class org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder extends java.lang.Object implements org.codehaus.jackson.map.jsontype.TypeResolverBuilder
{
    protected org.codehaus.jackson.map.jsontype.TypeIdResolver _customIdResolver;
    protected org.codehaus.jackson.annotate.JsonTypeInfo$Id _idType;
    protected org.codehaus.jackson.annotate.JsonTypeInfo$As _includeAs;
    protected java.lang.String _typeProperty;

    public void <init>()
    {
        org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder r0;

        r0 := @this: org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public org.codehaus.jackson.map.TypeDeserializer buildTypeDeserializer(org.codehaus.jackson.type.JavaType, java.util.Collection, org.codehaus.jackson.map.BeanProperty)
    {
        org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder r0;
        org.codehaus.jackson.type.JavaType $r1;
        java.util.Collection r2;
        org.codehaus.jackson.map.BeanProperty $r3;
        org.codehaus.jackson.map.jsontype.TypeIdResolver $r4;
        int[] $r5;
        org.codehaus.jackson.annotate.JsonTypeInfo$As $r6;
        int $i0;
        java.lang.IllegalStateException $r7;
        java.lang.StringBuilder $r8;
        java.lang.String $r9;
        org.codehaus.jackson.map.jsontype.impl.AsArrayTypeDeserializer $r10;
        org.codehaus.jackson.map.jsontype.impl.AsPropertyTypeDeserializer $r11;
        org.codehaus.jackson.map.jsontype.impl.AsWrapperTypeDeserializer $r12;

        r0 := @this: org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder;

        $r1 := @parameter0: org.codehaus.jackson.type.JavaType;

        r2 := @parameter1: java.util.Collection;

        $r3 := @parameter2: org.codehaus.jackson.map.BeanProperty;

        $r4 = virtualinvoke r0.<org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder: org.codehaus.jackson.map.jsontype.TypeIdResolver idResolver(org.codehaus.jackson.type.JavaType,java.util.Collection,boolean,boolean)>($r1, r2, 0, 1);

        $r5 = <org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder$1: int[] $SwitchMap$org$codehaus$jackson$annotate$JsonTypeInfo$As>;

        $r6 = r0.<org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder: org.codehaus.jackson.annotate.JsonTypeInfo$As _includeAs>;

        $i0 = virtualinvoke $r6.<org.codehaus.jackson.annotate.JsonTypeInfo$As: int ordinal()>();

        $i0 = $r5[$i0];

        lookupswitch($i0)
        {
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label4;
            default: goto label1;
        };

     label1:
        $r7 = new java.lang.IllegalStateException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Do not know how to construct standard type serializer for inclusion type: ");

        $r6 = r0.<org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder: org.codehaus.jackson.annotate.JsonTypeInfo$As _includeAs>;

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r9);

        throw $r7;

     label2:
        $r10 = new org.codehaus.jackson.map.jsontype.impl.AsArrayTypeDeserializer;

        specialinvoke $r10.<org.codehaus.jackson.map.jsontype.impl.AsArrayTypeDeserializer: void <init>(org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.jsontype.TypeIdResolver,org.codehaus.jackson.map.BeanProperty)>($r1, $r4, $r3);

        return $r10;

     label3:
        $r11 = new org.codehaus.jackson.map.jsontype.impl.AsPropertyTypeDeserializer;

        $r9 = r0.<org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder: java.lang.String _typeProperty>;

        specialinvoke $r11.<org.codehaus.jackson.map.jsontype.impl.AsPropertyTypeDeserializer: void <init>(org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.jsontype.TypeIdResolver,org.codehaus.jackson.map.BeanProperty,java.lang.String)>($r1, $r4, $r3, $r9);

        return $r11;

     label4:
        $r12 = new org.codehaus.jackson.map.jsontype.impl.AsWrapperTypeDeserializer;

        specialinvoke $r12.<org.codehaus.jackson.map.jsontype.impl.AsWrapperTypeDeserializer: void <init>(org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.jsontype.TypeIdResolver,org.codehaus.jackson.map.BeanProperty)>($r1, $r4, $r3);

        return $r12;
    }

    public org.codehaus.jackson.map.TypeSerializer buildTypeSerializer(org.codehaus.jackson.type.JavaType, java.util.Collection, org.codehaus.jackson.map.BeanProperty)
    {
        org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder r0;
        org.codehaus.jackson.type.JavaType $r1;
        java.util.Collection r2;
        org.codehaus.jackson.map.BeanProperty $r3;
        org.codehaus.jackson.map.jsontype.TypeIdResolver $r4;
        int[] $r5;
        org.codehaus.jackson.annotate.JsonTypeInfo$As $r6;
        int $i0;
        java.lang.IllegalStateException $r7;
        java.lang.StringBuilder $r8;
        java.lang.String $r9;
        org.codehaus.jackson.map.jsontype.impl.AsArrayTypeSerializer $r10;
        org.codehaus.jackson.map.jsontype.impl.AsPropertyTypeSerializer $r11;
        org.codehaus.jackson.map.jsontype.impl.AsWrapperTypeSerializer $r12;

        r0 := @this: org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder;

        $r1 := @parameter0: org.codehaus.jackson.type.JavaType;

        r2 := @parameter1: java.util.Collection;

        $r3 := @parameter2: org.codehaus.jackson.map.BeanProperty;

        $r4 = virtualinvoke r0.<org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder: org.codehaus.jackson.map.jsontype.TypeIdResolver idResolver(org.codehaus.jackson.type.JavaType,java.util.Collection,boolean,boolean)>($r1, r2, 1, 0);

        $r5 = <org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder$1: int[] $SwitchMap$org$codehaus$jackson$annotate$JsonTypeInfo$As>;

        $r6 = r0.<org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder: org.codehaus.jackson.annotate.JsonTypeInfo$As _includeAs>;

        $i0 = virtualinvoke $r6.<org.codehaus.jackson.annotate.JsonTypeInfo$As: int ordinal()>();

        $i0 = $r5[$i0];

        lookupswitch($i0)
        {
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label4;
            default: goto label1;
        };

     label1:
        $r7 = new java.lang.IllegalStateException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Do not know how to construct standard type serializer for inclusion type: ");

        $r6 = r0.<org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder: org.codehaus.jackson.annotate.JsonTypeInfo$As _includeAs>;

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r9);

        throw $r7;

     label2:
        $r10 = new org.codehaus.jackson.map.jsontype.impl.AsArrayTypeSerializer;

        specialinvoke $r10.<org.codehaus.jackson.map.jsontype.impl.AsArrayTypeSerializer: void <init>(org.codehaus.jackson.map.jsontype.TypeIdResolver,org.codehaus.jackson.map.BeanProperty)>($r4, $r3);

        return $r10;

     label3:
        $r11 = new org.codehaus.jackson.map.jsontype.impl.AsPropertyTypeSerializer;

        $r9 = r0.<org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder: java.lang.String _typeProperty>;

        specialinvoke $r11.<org.codehaus.jackson.map.jsontype.impl.AsPropertyTypeSerializer: void <init>(org.codehaus.jackson.map.jsontype.TypeIdResolver,org.codehaus.jackson.map.BeanProperty,java.lang.String)>($r4, $r3, $r9);

        return $r11;

     label4:
        $r12 = new org.codehaus.jackson.map.jsontype.impl.AsWrapperTypeSerializer;

        specialinvoke $r12.<org.codehaus.jackson.map.jsontype.impl.AsWrapperTypeSerializer: void <init>(org.codehaus.jackson.map.jsontype.TypeIdResolver,org.codehaus.jackson.map.BeanProperty)>($r4, $r3);

        return $r12;
    }

    public java.lang.String getTypeProperty()
    {
        org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder r0;
        java.lang.String r1;

        r0 := @this: org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder;

        r1 = r0.<org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder: java.lang.String _typeProperty>;

        return r1;
    }

    protected org.codehaus.jackson.map.jsontype.TypeIdResolver idResolver(org.codehaus.jackson.type.JavaType, java.util.Collection, boolean, boolean)
    {
        org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder r0;
        org.codehaus.jackson.type.JavaType $r1;
        java.util.Collection r2;
        boolean $z0, $z1;
        org.codehaus.jackson.map.jsontype.TypeIdResolver $r3;
        org.codehaus.jackson.annotate.JsonTypeInfo$Id $r4;
        java.lang.IllegalStateException $r5;
        int[] $r6;
        int $i0;
        java.lang.StringBuilder $r7;
        java.lang.String $r8;
        org.codehaus.jackson.map.jsontype.impl.ClassNameIdResolver $r9;
        org.codehaus.jackson.map.jsontype.impl.MinimalClassNameIdResolver $r10;
        org.codehaus.jackson.map.jsontype.impl.TypeNameIdResolver $r11;

        r0 := @this: org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder;

        $r1 := @parameter0: org.codehaus.jackson.type.JavaType;

        r2 := @parameter1: java.util.Collection;

        $z0 := @parameter2: boolean;

        $z1 := @parameter3: boolean;

        $r3 = r0.<org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder: org.codehaus.jackson.map.jsontype.TypeIdResolver _customIdResolver>;

        if $r3 == null goto label1;

        $r3 = r0.<org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder: org.codehaus.jackson.map.jsontype.TypeIdResolver _customIdResolver>;

        return $r3;

     label1:
        $r4 = r0.<org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder: org.codehaus.jackson.annotate.JsonTypeInfo$Id _idType>;

        if $r4 != null goto label2;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Can not build, \'init()\' not yet called");

        throw $r5;

     label2:
        $r6 = <org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder$1: int[] $SwitchMap$org$codehaus$jackson$annotate$JsonTypeInfo$Id>;

        $r4 = r0.<org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder: org.codehaus.jackson.annotate.JsonTypeInfo$Id _idType>;

        $i0 = virtualinvoke $r4.<org.codehaus.jackson.annotate.JsonTypeInfo$Id: int ordinal()>();

        $i0 = $r6[$i0];

        lookupswitch($i0)
        {
            case 1: goto label4;
            case 2: goto label5;
            case 3: goto label6;
            default: goto label3;
        };

     label3:
        $r5 = new java.lang.IllegalStateException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Do not know how to construct standard type id resolver for idType: ");

        $r4 = r0.<org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder: org.codehaus.jackson.annotate.JsonTypeInfo$Id _idType>;

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r8);

        throw $r5;

     label4:
        $r9 = new org.codehaus.jackson.map.jsontype.impl.ClassNameIdResolver;

        specialinvoke $r9.<org.codehaus.jackson.map.jsontype.impl.ClassNameIdResolver: void <init>(org.codehaus.jackson.type.JavaType)>($r1);

        return $r9;

     label5:
        $r10 = new org.codehaus.jackson.map.jsontype.impl.MinimalClassNameIdResolver;

        specialinvoke $r10.<org.codehaus.jackson.map.jsontype.impl.MinimalClassNameIdResolver: void <init>(org.codehaus.jackson.type.JavaType)>($r1);

        return $r10;

     label6:
        $r11 = staticinvoke <org.codehaus.jackson.map.jsontype.impl.TypeNameIdResolver: org.codehaus.jackson.map.jsontype.impl.TypeNameIdResolver construct(org.codehaus.jackson.type.JavaType,java.util.Collection,boolean,boolean)>($r1, r2, $z0, $z1);

        return $r11;
    }

    public volatile org.codehaus.jackson.map.jsontype.TypeResolverBuilder inclusion(org.codehaus.jackson.annotate.JsonTypeInfo$As)
    {
        org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder r0;
        org.codehaus.jackson.annotate.JsonTypeInfo$As $r1;

        r0 := @this: org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder;

        $r1 := @parameter0: org.codehaus.jackson.annotate.JsonTypeInfo$As;

        r0 = virtualinvoke r0.<org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder: org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder inclusion(org.codehaus.jackson.annotate.JsonTypeInfo$As)>($r1);

        return r0;
    }

    public org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder inclusion(org.codehaus.jackson.annotate.JsonTypeInfo$As)
    {
        org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder r0;
        org.codehaus.jackson.annotate.JsonTypeInfo$As $r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder;

        $r1 := @parameter0: org.codehaus.jackson.annotate.JsonTypeInfo$As;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("includeAs can not be null");

        throw $r2;

     label1:
        r0.<org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder: org.codehaus.jackson.annotate.JsonTypeInfo$As _includeAs> = $r1;

        return r0;
    }

    public volatile org.codehaus.jackson.map.jsontype.TypeResolverBuilder init(org.codehaus.jackson.annotate.JsonTypeInfo$Id, org.codehaus.jackson.map.jsontype.TypeIdResolver)
    {
        org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder r0;
        org.codehaus.jackson.annotate.JsonTypeInfo$Id $r1;
        org.codehaus.jackson.map.jsontype.TypeIdResolver $r2;

        r0 := @this: org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder;

        $r1 := @parameter0: org.codehaus.jackson.annotate.JsonTypeInfo$Id;

        $r2 := @parameter1: org.codehaus.jackson.map.jsontype.TypeIdResolver;

        r0 = virtualinvoke r0.<org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder: org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder init(org.codehaus.jackson.annotate.JsonTypeInfo$Id,org.codehaus.jackson.map.jsontype.TypeIdResolver)>($r1, $r2);

        return r0;
    }

    public org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder init(org.codehaus.jackson.annotate.JsonTypeInfo$Id, org.codehaus.jackson.map.jsontype.TypeIdResolver)
    {
        org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder r0;
        org.codehaus.jackson.annotate.JsonTypeInfo$Id $r1;
        org.codehaus.jackson.map.jsontype.TypeIdResolver $r2;
        java.lang.String $r3;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder;

        $r1 := @parameter0: org.codehaus.jackson.annotate.JsonTypeInfo$Id;

        $r2 := @parameter1: org.codehaus.jackson.map.jsontype.TypeIdResolver;

        if $r1 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("idType can not be null");

        throw $r4;

     label1:
        r0.<org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder: org.codehaus.jackson.annotate.JsonTypeInfo$Id _idType> = $r1;

        r0.<org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder: org.codehaus.jackson.map.jsontype.TypeIdResolver _customIdResolver> = $r2;

        $r3 = virtualinvoke $r1.<org.codehaus.jackson.annotate.JsonTypeInfo$Id: java.lang.String getDefaultPropertyName()>();

        r0.<org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder: java.lang.String _typeProperty> = $r3;

        return r0;
    }

    public volatile org.codehaus.jackson.map.jsontype.TypeResolverBuilder typeProperty(java.lang.String)
    {
        org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder r0;
        java.lang.String $r1;

        r0 := @this: org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder;

        $r1 := @parameter0: java.lang.String;

        r0 = virtualinvoke r0.<org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder: org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder typeProperty(java.lang.String)>($r1);

        return r0;
    }

    public org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder typeProperty(java.lang.String)
    {
        org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder r0;
        java.lang.String $r1;
        int $i0;
        org.codehaus.jackson.annotate.JsonTypeInfo$Id $r2;

        r0 := @this: org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder;

        $r1 := @parameter0: java.lang.String;

        if $r1 == null goto label1;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

     label1:
        $r2 = r0.<org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder: org.codehaus.jackson.annotate.JsonTypeInfo$Id _idType>;

        $r1 = virtualinvoke $r2.<org.codehaus.jackson.annotate.JsonTypeInfo$Id: java.lang.String getDefaultPropertyName()>();

     label2:
        r0.<org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder: java.lang.String _typeProperty> = $r1;

        return r0;
    }
}
