final class org.codehaus.jackson.map.ser.StdSerializerProvider$1 extends org.codehaus.jackson.map.ser.SerializerBase
{

    void <init>(java.lang.Class)
    {
        org.codehaus.jackson.map.ser.StdSerializerProvider$1 r0;
        java.lang.Class r1;

        r0 := @this: org.codehaus.jackson.map.ser.StdSerializerProvider$1;

        r1 := @parameter0: java.lang.Class;

        specialinvoke r0.<org.codehaus.jackson.map.ser.SerializerBase: void <init>(java.lang.Class)>(r1);

        return;
    }

    protected void failForEmpty(java.lang.Object) throws org.codehaus.jackson.map.JsonMappingException
    {
        org.codehaus.jackson.map.ser.StdSerializerProvider$1 r0;
        java.lang.Object $r1;
        org.codehaus.jackson.map.JsonMappingException $r2;
        java.lang.StringBuilder $r3;
        java.lang.Class $r4;
        java.lang.String $r5;

        r0 := @this: org.codehaus.jackson.map.ser.StdSerializerProvider$1;

        $r1 := @parameter0: java.lang.Object;

        $r2 = new org.codehaus.jackson.map.JsonMappingException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No serializer found for class ");

        $r4 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationConfig.Feature.FAIL_ON_EMPTY_BEANS) )");

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<org.codehaus.jackson.map.JsonMappingException: void <init>(java.lang.String)>($r5);

        throw $r2;
    }

    public org.codehaus.jackson.JsonNode getSchema(org.codehaus.jackson.map.SerializerProvider, java.lang.reflect.Type) throws org.codehaus.jackson.map.JsonMappingException
    {
        org.codehaus.jackson.map.ser.StdSerializerProvider$1 r0;
        org.codehaus.jackson.map.SerializerProvider $r1;
        java.lang.reflect.Type $r2;

        r0 := @this: org.codehaus.jackson.map.ser.StdSerializerProvider$1;

        $r1 := @parameter0: org.codehaus.jackson.map.SerializerProvider;

        $r2 := @parameter1: java.lang.reflect.Type;

        return null;
    }

    public void serialize(java.lang.Object, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider) throws java.io.IOException, org.codehaus.jackson.map.JsonMappingException
    {
        org.codehaus.jackson.map.ser.StdSerializerProvider$1 r0;
        java.lang.Object $r1;
        org.codehaus.jackson.JsonGenerator $r2;
        org.codehaus.jackson.map.SerializerProvider $r3;
        boolean $z0;
        org.codehaus.jackson.map.SerializationConfig$Feature $r4;

        r0 := @this: org.codehaus.jackson.map.ser.StdSerializerProvider$1;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: org.codehaus.jackson.JsonGenerator;

        $r3 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        $r4 = <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature FAIL_ON_EMPTY_BEANS>;

        $z0 = virtualinvoke $r3.<org.codehaus.jackson.map.SerializerProvider: boolean isEnabled(org.codehaus.jackson.map.SerializationConfig$Feature)>($r4);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.codehaus.jackson.map.ser.StdSerializerProvider$1: void failForEmpty(java.lang.Object)>($r1);

     label1:
        virtualinvoke $r2.<org.codehaus.jackson.JsonGenerator: void writeStartObject()>();

        virtualinvoke $r2.<org.codehaus.jackson.JsonGenerator: void writeEndObject()>();

        return;
    }

    public final void serializeWithType(java.lang.Object, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider, org.codehaus.jackson.map.TypeSerializer) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        org.codehaus.jackson.map.ser.StdSerializerProvider$1 r0;
        java.lang.Object $r1;
        org.codehaus.jackson.JsonGenerator $r2;
        org.codehaus.jackson.map.SerializerProvider $r3;
        org.codehaus.jackson.map.TypeSerializer $r4;
        boolean $z0;
        org.codehaus.jackson.map.SerializationConfig$Feature $r5;

        r0 := @this: org.codehaus.jackson.map.ser.StdSerializerProvider$1;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: org.codehaus.jackson.JsonGenerator;

        $r3 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        $r4 := @parameter3: org.codehaus.jackson.map.TypeSerializer;

        $r5 = <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature FAIL_ON_EMPTY_BEANS>;

        $z0 = virtualinvoke $r3.<org.codehaus.jackson.map.SerializerProvider: boolean isEnabled(org.codehaus.jackson.map.SerializationConfig$Feature)>($r5);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.codehaus.jackson.map.ser.StdSerializerProvider$1: void failForEmpty(java.lang.Object)>($r1);

     label1:
        virtualinvoke $r4.<org.codehaus.jackson.map.TypeSerializer: void writeTypePrefixForObject(java.lang.Object,org.codehaus.jackson.JsonGenerator)>($r1, $r2);

        virtualinvoke $r4.<org.codehaus.jackson.map.TypeSerializer: void writeTypeSuffixForObject(java.lang.Object,org.codehaus.jackson.JsonGenerator)>($r1, $r2);

        return;
    }
}
