public final class org.codehaus.jackson.map.deser.StdDeserializer$NumberDeserializer extends org.codehaus.jackson.map.deser.StdScalarDeserializer
{

    public void <init>()
    {
        org.codehaus.jackson.map.deser.StdDeserializer$NumberDeserializer r0;

        r0 := @this: org.codehaus.jackson.map.deser.StdDeserializer$NumberDeserializer;

        specialinvoke r0.<org.codehaus.jackson.map.deser.StdScalarDeserializer: void <init>(java.lang.Class)>(class "Ljava/lang/Number;");

        return;
    }

    public java.lang.Number deserialize(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.map.deser.StdDeserializer$NumberDeserializer r0;
        org.codehaus.jackson.JsonParser $r1;
        org.codehaus.jackson.map.DeserializationContext $r2;
        org.codehaus.jackson.JsonToken $r3, $r4;
        org.codehaus.jackson.map.DeserializationConfig$Feature $r5;
        boolean $z0;
        java.math.BigInteger $r6;
        java.lang.Number $r7;
        java.math.BigDecimal $r8;
        double $d0;
        java.lang.Double $r9;
        java.lang.String $r10;
        int $i0;
        java.lang.Throwable $r11;
        java.lang.Class $r12;
        org.codehaus.jackson.map.JsonMappingException $r13;
        long $l1;
        byte $b2;
        java.lang.Integer $r14;
        java.lang.Long $r15;

        r0 := @this: org.codehaus.jackson.map.deser.StdDeserializer$NumberDeserializer;

        $r1 := @parameter0: org.codehaus.jackson.JsonParser;

        $r2 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        $r3 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken getCurrentToken()>();

        $r4 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NUMBER_INT>;

        if $r3 != $r4 goto label02;

        $r5 = <org.codehaus.jackson.map.DeserializationConfig$Feature: org.codehaus.jackson.map.DeserializationConfig$Feature USE_BIG_INTEGER_FOR_INTS>;

        $z0 = virtualinvoke $r2.<org.codehaus.jackson.map.DeserializationContext: boolean isEnabled(org.codehaus.jackson.map.DeserializationConfig$Feature)>($r5);

        if $z0 == 0 goto label01;

        $r6 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: java.math.BigInteger getBigIntegerValue()>();

        return $r6;

     label01:
        $r7 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: java.lang.Number getNumberValue()>();

        return $r7;

     label02:
        $r4 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NUMBER_FLOAT>;

        if $r3 != $r4 goto label04;

        $r5 = <org.codehaus.jackson.map.DeserializationConfig$Feature: org.codehaus.jackson.map.DeserializationConfig$Feature USE_BIG_DECIMAL_FOR_FLOATS>;

        $z0 = virtualinvoke $r2.<org.codehaus.jackson.map.DeserializationContext: boolean isEnabled(org.codehaus.jackson.map.DeserializationConfig$Feature)>($r5);

        if $z0 == 0 goto label03;

        $r8 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: java.math.BigDecimal getDecimalValue()>();

        return $r8;

     label03:
        $d0 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: double getDoubleValue()>();

        $r9 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        return $r9;

     label04:
        $r4 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_STRING>;

        if $r3 != $r4 goto label26;

        $r10 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: java.lang.String getText()>();

        $r10 = virtualinvoke $r10.<java.lang.String: java.lang.String trim()>();

     label05:
        $i0 = virtualinvoke $r10.<java.lang.String: int indexOf(int)>(46);

     label06:
        if $i0 < 0 goto label15;

        $r5 = <org.codehaus.jackson.map.DeserializationConfig$Feature: org.codehaus.jackson.map.DeserializationConfig$Feature USE_BIG_DECIMAL_FOR_FLOATS>;

     label07:
        $z0 = virtualinvoke $r2.<org.codehaus.jackson.map.DeserializationContext: boolean isEnabled(org.codehaus.jackson.map.DeserializationConfig$Feature)>($r5);

     label08:
        if $z0 == 0 goto label12;

        $r8 = new java.math.BigDecimal;

     label09:
        specialinvoke $r8.<java.math.BigDecimal: void <init>(java.lang.String)>($r10);

     label10:
        return $r8;

     label11:
        $r11 := @caughtexception;

        $r12 = r0.<org.codehaus.jackson.map.deser.StdDeserializer$NumberDeserializer: java.lang.Class _valueClass>;

        $r13 = virtualinvoke $r2.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.JsonMappingException weirdStringException(java.lang.Class,java.lang.String)>($r12, "not a valid number");

        throw $r13;

     label12:
        $r9 = new java.lang.Double;

     label13:
        specialinvoke $r9.<java.lang.Double: void <init>(java.lang.String)>($r10);

     label14:
        return $r9;

     label15:
        $r5 = <org.codehaus.jackson.map.DeserializationConfig$Feature: org.codehaus.jackson.map.DeserializationConfig$Feature USE_BIG_INTEGER_FOR_INTS>;

     label16:
        $z0 = virtualinvoke $r2.<org.codehaus.jackson.map.DeserializationContext: boolean isEnabled(org.codehaus.jackson.map.DeserializationConfig$Feature)>($r5);

     label17:
        if $z0 == 0 goto label20;

        $r6 = new java.math.BigInteger;

     label18:
        specialinvoke $r6.<java.math.BigInteger: void <init>(java.lang.String)>($r10);

     label19:
        return $r6;

     label20:
        $l1 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r10);

     label21:
        $b2 = $l1 cmp 2147483647L;

        if $b2 > 0 goto label24;

        $b2 = $l1 cmp -2147483648L;

        if $b2 < 0 goto label24;

        $i0 = (int) $l1;

     label22:
        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

     label23:
        return $r14;

     label24:
        $r15 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

     label25:
        return $r15;

     label26:
        $r12 = r0.<org.codehaus.jackson.map.deser.StdDeserializer$NumberDeserializer: java.lang.Class _valueClass>;

        $r13 = virtualinvoke $r2.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.JsonMappingException mappingException(java.lang.Class)>($r12);

        throw $r13;

        catch java.lang.IllegalArgumentException from label05 to label06 with label11;
        catch java.lang.IllegalArgumentException from label07 to label08 with label11;
        catch java.lang.IllegalArgumentException from label09 to label10 with label11;
        catch java.lang.IllegalArgumentException from label13 to label14 with label11;
        catch java.lang.IllegalArgumentException from label16 to label17 with label11;
        catch java.lang.IllegalArgumentException from label18 to label19 with label11;
        catch java.lang.IllegalArgumentException from label20 to label21 with label11;
        catch java.lang.IllegalArgumentException from label22 to label23 with label11;
        catch java.lang.IllegalArgumentException from label24 to label25 with label11;
    }

    public volatile java.lang.Object deserialize(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.map.deser.StdDeserializer$NumberDeserializer r0;
        org.codehaus.jackson.JsonParser $r1;
        org.codehaus.jackson.map.DeserializationContext $r2;
        java.lang.Number $r3;

        r0 := @this: org.codehaus.jackson.map.deser.StdDeserializer$NumberDeserializer;

        $r1 := @parameter0: org.codehaus.jackson.JsonParser;

        $r2 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        $r3 = virtualinvoke r0.<org.codehaus.jackson.map.deser.StdDeserializer$NumberDeserializer: java.lang.Number deserialize(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>($r1, $r2);

        return $r3;
    }

    public java.lang.Object deserializeWithType(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext, org.codehaus.jackson.map.TypeDeserializer) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.map.deser.StdDeserializer$NumberDeserializer r0;
        org.codehaus.jackson.JsonParser $r1;
        org.codehaus.jackson.map.DeserializationContext $r2;
        org.codehaus.jackson.map.TypeDeserializer $r3;
        int[] $r4;
        org.codehaus.jackson.JsonToken $r5;
        int $i0;
        java.lang.Object $r6;
        java.lang.Number $r7;

        r0 := @this: org.codehaus.jackson.map.deser.StdDeserializer$NumberDeserializer;

        $r1 := @parameter0: org.codehaus.jackson.JsonParser;

        $r2 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        $r3 := @parameter2: org.codehaus.jackson.map.TypeDeserializer;

        $r4 = <org.codehaus.jackson.map.deser.StdDeserializer$1: int[] $SwitchMap$org$codehaus$jackson$JsonToken>;

        $r5 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken getCurrentToken()>();

        $i0 = virtualinvoke $r5.<org.codehaus.jackson.JsonToken: int ordinal()>();

        $i0 = $r4[$i0];

        lookupswitch($i0)
        {
            case 1: goto label2;
            case 2: goto label2;
            case 3: goto label2;
            default: goto label1;
        };

     label1:
        $r6 = virtualinvoke $r3.<org.codehaus.jackson.map.TypeDeserializer: java.lang.Object deserializeTypedFromScalar(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>($r1, $r2);

        return $r6;

     label2:
        $r7 = virtualinvoke r0.<org.codehaus.jackson.map.deser.StdDeserializer$NumberDeserializer: java.lang.Number deserialize(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>($r1, $r2);

        return $r7;
    }
}
