public final class org.codehaus.jackson.map.util.EnumValues extends java.lang.Object
{
    private final java.util.EnumMap _values;

    private void <init>(java.util.Map)
    {
        org.codehaus.jackson.map.util.EnumValues r0;
        java.util.Map r1;
        java.util.EnumMap $r2;

        r0 := @this: org.codehaus.jackson.map.util.EnumValues;

        r1 := @parameter0: java.util.Map;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.EnumMap;

        specialinvoke $r2.<java.util.EnumMap: void <init>(java.util.Map)>(r1);

        r0.<org.codehaus.jackson.map.util.EnumValues: java.util.EnumMap _values> = $r2;

        return;
    }

    public static org.codehaus.jackson.map.util.EnumValues construct(java.lang.Class, org.codehaus.jackson.map.AnnotationIntrospector)
    {
        java.lang.Class r0;
        org.codehaus.jackson.map.AnnotationIntrospector $r1;
        org.codehaus.jackson.map.util.EnumValues $r2;

        r0 := @parameter0: java.lang.Class;

        $r1 := @parameter1: org.codehaus.jackson.map.AnnotationIntrospector;

        $r2 = staticinvoke <org.codehaus.jackson.map.util.EnumValues: org.codehaus.jackson.map.util.EnumValues constructFromName(java.lang.Class,org.codehaus.jackson.map.AnnotationIntrospector)>(r0, $r1);

        return $r2;
    }

    public static org.codehaus.jackson.map.util.EnumValues constructFromName(java.lang.Class, org.codehaus.jackson.map.AnnotationIntrospector)
    {
        java.lang.Class r0, $r4;
        org.codehaus.jackson.map.AnnotationIntrospector $r1;
        java.lang.Enum r2;
        int i0, i1;
        java.util.HashMap r3;
        java.lang.Object[] $r5;
        java.lang.Enum[] r6;
        java.lang.String $r7;
        org.codehaus.jackson.io.SerializedString $r8;
        org.codehaus.jackson.map.util.EnumValues $r9;
        java.lang.IllegalArgumentException $r10;
        java.lang.StringBuilder $r11;

        r0 := @parameter0: java.lang.Class;

        $r1 := @parameter1: org.codehaus.jackson.map.AnnotationIntrospector;

        $r4 = staticinvoke <org.codehaus.jackson.map.util.ClassUtil: java.lang.Class findEnumType(java.lang.Class)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.Object[] getEnumConstants()>();

        r6 = (java.lang.Enum[]) $r5;

        if r6 == null goto label3;

        r3 = new java.util.HashMap;

        specialinvoke r3.<java.util.HashMap: void <init>()>();

        i0 = lengthof r6;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r2 = r6[i1];

        $r7 = virtualinvoke $r1.<org.codehaus.jackson.map.AnnotationIntrospector: java.lang.String findEnumValue(java.lang.Enum)>(r2);

        $r8 = new org.codehaus.jackson.io.SerializedString;

        specialinvoke $r8.<org.codehaus.jackson.io.SerializedString: void <init>(java.lang.String)>($r7);

        interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r8);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r9 = new org.codehaus.jackson.map.util.EnumValues;

        specialinvoke $r9.<org.codehaus.jackson.map.util.EnumValues: void <init>(java.util.Map)>(r3);

        return $r9;

     label3:
        $r10 = new java.lang.IllegalArgumentException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can not determine enum constants for Class ");

        $r7 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r7 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r10;
    }

    public static org.codehaus.jackson.map.util.EnumValues constructFromToString(java.lang.Class, org.codehaus.jackson.map.AnnotationIntrospector)
    {
        java.lang.Class r0, $r4;
        org.codehaus.jackson.map.AnnotationIntrospector $r1;
        java.lang.Enum r2;
        int i0, i1;
        java.util.HashMap r3;
        java.lang.Object[] $r5;
        java.lang.Enum[] r6;
        org.codehaus.jackson.io.SerializedString $r7;
        java.lang.String $r8;
        org.codehaus.jackson.map.util.EnumValues $r9;
        java.lang.IllegalArgumentException $r10;
        java.lang.StringBuilder $r11;

        r0 := @parameter0: java.lang.Class;

        $r1 := @parameter1: org.codehaus.jackson.map.AnnotationIntrospector;

        $r4 = staticinvoke <org.codehaus.jackson.map.util.ClassUtil: java.lang.Class findEnumType(java.lang.Class)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.Object[] getEnumConstants()>();

        r6 = (java.lang.Enum[]) $r5;

        if r6 == null goto label3;

        r3 = new java.util.HashMap;

        specialinvoke r3.<java.util.HashMap: void <init>()>();

        i0 = lengthof r6;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r2 = r6[i1];

        $r7 = new org.codehaus.jackson.io.SerializedString;

        $r8 = virtualinvoke r2.<java.lang.Enum: java.lang.String toString()>();

        specialinvoke $r7.<org.codehaus.jackson.io.SerializedString: void <init>(java.lang.String)>($r8);

        interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r7);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r9 = new org.codehaus.jackson.map.util.EnumValues;

        specialinvoke $r9.<org.codehaus.jackson.map.util.EnumValues: void <init>(java.util.Map)>(r3);

        return $r9;

     label3:
        $r10 = new java.lang.IllegalArgumentException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can not determine enum constants for Class ");

        $r8 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r8 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r10;
    }

    public org.codehaus.jackson.io.SerializedString serializedValueFor(java.lang.Enum)
    {
        java.lang.Enum r0;
        java.util.EnumMap $r1;
        java.lang.Object $r2;
        org.codehaus.jackson.map.util.EnumValues r3;
        org.codehaus.jackson.io.SerializedString r4;

        r3 := @this: org.codehaus.jackson.map.util.EnumValues;

        r0 := @parameter0: java.lang.Enum;

        $r1 = r3.<org.codehaus.jackson.map.util.EnumValues: java.util.EnumMap _values>;

        $r2 = virtualinvoke $r1.<java.util.EnumMap: java.lang.Object get(java.lang.Object)>(r0);

        r4 = (org.codehaus.jackson.io.SerializedString) $r2;

        return r4;
    }

    public java.lang.String valueFor(java.lang.Enum)
    {
        org.codehaus.jackson.map.util.EnumValues r0;
        java.lang.Enum r1;
        java.util.EnumMap $r2;
        java.lang.Object $r3;
        org.codehaus.jackson.io.SerializedString r4;
        java.lang.String $r5;

        r0 := @this: org.codehaus.jackson.map.util.EnumValues;

        r1 := @parameter0: java.lang.Enum;

        $r2 = r0.<org.codehaus.jackson.map.util.EnumValues: java.util.EnumMap _values>;

        $r3 = virtualinvoke $r2.<java.util.EnumMap: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (org.codehaus.jackson.io.SerializedString) $r3;

        if r4 != null goto label1;

        return null;

     label1:
        $r5 = virtualinvoke r4.<org.codehaus.jackson.io.SerializedString: java.lang.String getValue()>();

        return $r5;
    }

    public java.util.Collection values()
    {
        org.codehaus.jackson.map.util.EnumValues r0;
        java.util.Collection $r1;
        java.util.EnumMap $r2;

        r0 := @this: org.codehaus.jackson.map.util.EnumValues;

        $r2 = r0.<org.codehaus.jackson.map.util.EnumValues: java.util.EnumMap _values>;

        $r1 = virtualinvoke $r2.<java.util.EnumMap: java.util.Collection values()>();

        return $r1;
    }
}
