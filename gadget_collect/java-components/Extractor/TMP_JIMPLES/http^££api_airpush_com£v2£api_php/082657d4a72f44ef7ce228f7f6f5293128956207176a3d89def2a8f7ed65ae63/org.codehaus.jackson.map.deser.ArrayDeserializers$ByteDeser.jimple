final class org.codehaus.jackson.map.deser.ArrayDeserializers$ByteDeser extends org.codehaus.jackson.map.deser.ArrayDeserializers$ArrayDeser
{

    public void <init>()
    {
        org.codehaus.jackson.map.deser.ArrayDeserializers$ByteDeser r0;

        r0 := @this: org.codehaus.jackson.map.deser.ArrayDeserializers$ByteDeser;

        specialinvoke r0.<org.codehaus.jackson.map.deser.ArrayDeserializers$ArrayDeser: void <init>(java.lang.Class)>(class "[B");

        return;
    }

    public volatile java.lang.Object deserialize(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.map.deser.ArrayDeserializers$ByteDeser r0;
        org.codehaus.jackson.JsonParser $r1;
        org.codehaus.jackson.map.DeserializationContext $r2;
        byte[] $r3;

        r0 := @this: org.codehaus.jackson.map.deser.ArrayDeserializers$ByteDeser;

        $r1 := @parameter0: org.codehaus.jackson.JsonParser;

        $r2 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        $r3 = virtualinvoke r0.<org.codehaus.jackson.map.deser.ArrayDeserializers$ByteDeser: byte[] deserialize(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>($r1, $r2);

        return $r3;
    }

    public byte[] deserialize(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.JsonParser $r0;
        org.codehaus.jackson.map.DeserializationContext $r1;
        int i0, i1;
        org.codehaus.jackson.map.deser.ArrayDeserializers$ByteDeser r2;
        org.codehaus.jackson.JsonToken $r3, $r4;
        org.codehaus.jackson.Base64Variant $r5;
        byte[] $r6;
        java.lang.Object $r7;
        boolean $z0;
        java.lang.Class $r8;
        org.codehaus.jackson.map.JsonMappingException $r9;
        org.codehaus.jackson.map.util.ArrayBuilders $r10;
        org.codehaus.jackson.map.util.ArrayBuilders$ByteBuilder $r11;
        byte $b2;

        r2 := @this: org.codehaus.jackson.map.deser.ArrayDeserializers$ByteDeser;

        $r0 := @parameter0: org.codehaus.jackson.JsonParser;

        $r1 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        $r3 = virtualinvoke $r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken getCurrentToken()>();

        $r4 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_STRING>;

        if $r3 != $r4 goto label01;

        $r5 = virtualinvoke $r1.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.Base64Variant getBase64Variant()>();

        $r6 = virtualinvoke $r0.<org.codehaus.jackson.JsonParser: byte[] getBinaryValue(org.codehaus.jackson.Base64Variant)>($r5);

        return $r6;

     label01:
        $r4 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_EMBEDDED_OBJECT>;

        if $r3 != $r4 goto label03;

        $r7 = virtualinvoke $r0.<org.codehaus.jackson.JsonParser: java.lang.Object getEmbeddedObject()>();

        if $r7 != null goto label02;

        return null;

     label02:
        $z0 = $r7 instanceof byte[];

        if $z0 == 0 goto label03;

        $r6 = (byte[]) $r7;

        return $r6;

     label03:
        $z0 = virtualinvoke $r0.<org.codehaus.jackson.JsonParser: boolean isExpectedStartArrayToken()>();

        if $z0 != 0 goto label04;

        $r8 = r2.<org.codehaus.jackson.map.deser.ArrayDeserializers$ByteDeser: java.lang.Class _valueClass>;

        $r9 = virtualinvoke $r1.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.JsonMappingException mappingException(java.lang.Class)>($r8);

        throw $r9;

     label04:
        $r10 = virtualinvoke $r1.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.util.ArrayBuilders getArrayBuilders()>();

        $r11 = virtualinvoke $r10.<org.codehaus.jackson.map.util.ArrayBuilders: org.codehaus.jackson.map.util.ArrayBuilders$ByteBuilder getByteBuilder()>();

        $r7 = virtualinvoke $r11.<org.codehaus.jackson.map.util.ArrayBuilders$ByteBuilder: java.lang.Object resetAndStart()>();

        $r6 = (byte[]) $r7;

        i1 = 0;

     label05:
        $r3 = virtualinvoke $r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken nextToken()>();

        $r4 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken END_ARRAY>;

        if $r3 == $r4 goto label11;

        $r4 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NUMBER_INT>;

        if $r3 == $r4 goto label06;

        $r4 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NUMBER_FLOAT>;

        if $r3 != $r4 goto label09;

     label06:
        $b2 = virtualinvoke $r0.<org.codehaus.jackson.JsonParser: byte getByteValue()>();

     label07:
        i0 = lengthof $r6;

        if i1 < i0 goto label08;

        $r7 = virtualinvoke $r11.<org.codehaus.jackson.map.util.ArrayBuilders$ByteBuilder: java.lang.Object appendCompletedChunk(java.lang.Object,int)>($r6, i1);

        $r6 = (byte[]) $r7;

        i1 = 0;

     label08:
        $r6[i1] = $b2;

        i1 = i1 + 1;

        goto label05;

     label09:
        $r4 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NULL>;

        if $r3 == $r4 goto label10;

        $r8 = r2.<org.codehaus.jackson.map.deser.ArrayDeserializers$ByteDeser: java.lang.Class _valueClass>;

        $r8 = virtualinvoke $r8.<java.lang.Class: java.lang.Class getComponentType()>();

        $r9 = virtualinvoke $r1.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.JsonMappingException mappingException(java.lang.Class)>($r8);

        throw $r9;

     label10:
        $b2 = 0;

        goto label07;

     label11:
        $r7 = virtualinvoke $r11.<org.codehaus.jackson.map.util.ArrayBuilders$ByteBuilder: java.lang.Object completeAndClearBuffer(java.lang.Object,int)>($r6, i1);

        $r6 = (byte[]) $r7;

        return $r6;
    }
}
