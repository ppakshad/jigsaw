public final class org.codehaus.jackson.map.ser.JsonValueSerializer extends org.codehaus.jackson.map.ser.SerializerBase implements org.codehaus.jackson.map.ResolvableSerializer, org.codehaus.jackson.schema.SchemaAware
{
    protected final java.lang.reflect.Method _accessorMethod;
    protected boolean _forceTypeInformation;
    protected final org.codehaus.jackson.map.BeanProperty _property;
    protected org.codehaus.jackson.map.JsonSerializer _valueSerializer;

    public void <init>(java.lang.reflect.Method, org.codehaus.jackson.map.JsonSerializer, org.codehaus.jackson.map.BeanProperty)
    {
        org.codehaus.jackson.map.ser.JsonValueSerializer r0;
        java.lang.reflect.Method $r1;
        org.codehaus.jackson.map.JsonSerializer r2;
        org.codehaus.jackson.map.BeanProperty $r3;

        r0 := @this: org.codehaus.jackson.map.ser.JsonValueSerializer;

        $r1 := @parameter0: java.lang.reflect.Method;

        r2 := @parameter1: org.codehaus.jackson.map.JsonSerializer;

        $r3 := @parameter2: org.codehaus.jackson.map.BeanProperty;

        specialinvoke r0.<org.codehaus.jackson.map.ser.SerializerBase: void <init>(java.lang.Class)>(class "Ljava/lang/Object;");

        r0.<org.codehaus.jackson.map.ser.JsonValueSerializer: java.lang.reflect.Method _accessorMethod> = $r1;

        r0.<org.codehaus.jackson.map.ser.JsonValueSerializer: org.codehaus.jackson.map.JsonSerializer _valueSerializer> = r2;

        r0.<org.codehaus.jackson.map.ser.JsonValueSerializer: org.codehaus.jackson.map.BeanProperty _property> = $r3;

        return;
    }

    public org.codehaus.jackson.JsonNode getSchema(org.codehaus.jackson.map.SerializerProvider, java.lang.reflect.Type) throws org.codehaus.jackson.map.JsonMappingException
    {
        org.codehaus.jackson.map.SerializerProvider $r0;
        java.lang.reflect.Type $r1;
        org.codehaus.jackson.map.ser.JsonValueSerializer r2;
        org.codehaus.jackson.map.JsonSerializer $r3;
        boolean $z0;
        org.codehaus.jackson.schema.SchemaAware r4;
        org.codehaus.jackson.JsonNode $r5;

        r2 := @this: org.codehaus.jackson.map.ser.JsonValueSerializer;

        $r0 := @parameter0: org.codehaus.jackson.map.SerializerProvider;

        $r1 := @parameter1: java.lang.reflect.Type;

        $r3 = r2.<org.codehaus.jackson.map.ser.JsonValueSerializer: org.codehaus.jackson.map.JsonSerializer _valueSerializer>;

        $z0 = $r3 instanceof org.codehaus.jackson.schema.SchemaAware;

        if $z0 == 0 goto label1;

        $r3 = r2.<org.codehaus.jackson.map.ser.JsonValueSerializer: org.codehaus.jackson.map.JsonSerializer _valueSerializer>;

        r4 = (org.codehaus.jackson.schema.SchemaAware) $r3;

        $r5 = interfaceinvoke r4.<org.codehaus.jackson.schema.SchemaAware: org.codehaus.jackson.JsonNode getSchema(org.codehaus.jackson.map.SerializerProvider,java.lang.reflect.Type)>($r0, null);

        return $r5;

     label1:
        $r5 = staticinvoke <org.codehaus.jackson.schema.JsonSchema: org.codehaus.jackson.JsonNode getDefaultSchemaNode()>();

        return $r5;
    }

    protected boolean isNaturalTypeWithStdHandling(org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.JsonSerializer)
    {
        org.codehaus.jackson.map.ser.JsonValueSerializer r0;
        org.codehaus.jackson.type.JavaType $r1;
        org.codehaus.jackson.map.JsonSerializer r2;
        java.lang.Class $r3, $r4;
        boolean $z0;
        java.lang.'annotation'.Annotation $r5;

        r0 := @this: org.codehaus.jackson.map.ser.JsonValueSerializer;

        $r1 := @parameter0: org.codehaus.jackson.type.JavaType;

        r2 := @parameter1: org.codehaus.jackson.map.JsonSerializer;

        $r3 = virtualinvoke $r1.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        $z0 = virtualinvoke $r1.<org.codehaus.jackson.type.JavaType: boolean isPrimitive()>();

        if $z0 == 0 goto label1;

        $r4 = <java.lang.Integer: java.lang.Class TYPE>;

        if $r3 == $r4 goto label2;

        $r4 = <java.lang.Boolean: java.lang.Class TYPE>;

        if $r3 == $r4 goto label2;

        $r4 = <java.lang.Double: java.lang.Class TYPE>;

        if $r3 == $r4 goto label2;

        return 0;

     label1:
        if $r3 == class "Ljava/lang/String;" goto label2;

        if $r3 == class "Ljava/lang/Integer;" goto label2;

        if $r3 == class "Ljava/lang/Boolean;" goto label2;

        if $r3 == class "Ljava/lang/Double;" goto label2;

        return 0;

     label2:
        $r3 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r3.<java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/codehaus/jackson/map/annotate/JacksonStdImpl;");

        if $r5 == null goto label3;

        return 1;

     label3:
        return 0;
    }

    public void resolve(org.codehaus.jackson.map.SerializerProvider) throws org.codehaus.jackson.map.JsonMappingException
    {
        org.codehaus.jackson.map.ser.JsonValueSerializer r0;
        org.codehaus.jackson.map.SerializerProvider $r1;
        org.codehaus.jackson.map.BeanProperty $r2;
        org.codehaus.jackson.map.JsonSerializer $r3;
        org.codehaus.jackson.map.SerializationConfig$Feature $r4;
        boolean $z0;
        java.lang.reflect.Method $r5;
        java.lang.Class $r6;
        int $i0;
        java.lang.reflect.Type $r7;
        org.codehaus.jackson.type.JavaType $r8;

        r0 := @this: org.codehaus.jackson.map.ser.JsonValueSerializer;

        $r1 := @parameter0: org.codehaus.jackson.map.SerializerProvider;

        $r3 = r0.<org.codehaus.jackson.map.ser.JsonValueSerializer: org.codehaus.jackson.map.JsonSerializer _valueSerializer>;

        if $r3 != null goto label2;

        $r4 = <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature USE_STATIC_TYPING>;

        $z0 = virtualinvoke $r1.<org.codehaus.jackson.map.SerializerProvider: boolean isEnabled(org.codehaus.jackson.map.SerializationConfig$Feature)>($r4);

        if $z0 != 0 goto label1;

        $r5 = r0.<org.codehaus.jackson.map.ser.JsonValueSerializer: java.lang.reflect.Method _accessorMethod>;

        $r6 = virtualinvoke $r5.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $i0 = virtualinvoke $r6.<java.lang.Class: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isFinal(int)>($i0);

        if $z0 == 0 goto label2;

     label1:
        $r5 = r0.<org.codehaus.jackson.map.ser.JsonValueSerializer: java.lang.reflect.Method _accessorMethod>;

        $r7 = virtualinvoke $r5.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>();

        $r8 = staticinvoke <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType type(java.lang.reflect.Type)>($r7);

        $r2 = r0.<org.codehaus.jackson.map.ser.JsonValueSerializer: org.codehaus.jackson.map.BeanProperty _property>;

        $r3 = virtualinvoke $r1.<org.codehaus.jackson.map.SerializerProvider: org.codehaus.jackson.map.JsonSerializer findTypedValueSerializer(org.codehaus.jackson.type.JavaType,boolean,org.codehaus.jackson.map.BeanProperty)>($r8, 0, $r2);

        r0.<org.codehaus.jackson.map.ser.JsonValueSerializer: org.codehaus.jackson.map.JsonSerializer _valueSerializer> = $r3;

        $r3 = r0.<org.codehaus.jackson.map.ser.JsonValueSerializer: org.codehaus.jackson.map.JsonSerializer _valueSerializer>;

        $z0 = virtualinvoke r0.<org.codehaus.jackson.map.ser.JsonValueSerializer: boolean isNaturalTypeWithStdHandling(org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.JsonSerializer)>($r8, $r3);

        r0.<org.codehaus.jackson.map.ser.JsonValueSerializer: boolean _forceTypeInformation> = $z0;

     label2:
        return;
    }

    public void serialize(java.lang.Object, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        org.codehaus.jackson.map.ser.JsonValueSerializer r0;
        java.lang.Object $r1, $r6;
        org.codehaus.jackson.JsonGenerator $r2;
        org.codehaus.jackson.map.SerializerProvider $r3;
        java.lang.reflect.Method $r4;
        java.lang.Object[] $r5;
        org.codehaus.jackson.map.JsonSerializer r7;
        java.lang.Class $r8;
        org.codehaus.jackson.map.BeanProperty $r9;
        java.lang.Throwable $r10, $r12;
        java.lang.Exception $r11;
        boolean $z0;
        java.lang.Error r13;
        java.lang.StringBuilder $r14;
        java.lang.String $r15;
        org.codehaus.jackson.map.JsonMappingException $r16;

        r0 := @this: org.codehaus.jackson.map.ser.JsonValueSerializer;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: org.codehaus.jackson.JsonGenerator;

        $r3 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

     label01:
        $r4 = r0.<org.codehaus.jackson.map.ser.JsonValueSerializer: java.lang.reflect.Method _accessorMethod>;

        $r5 = newarray (java.lang.Object)[0];

     label02:
        $r6 = virtualinvoke $r4.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r1, $r5);

     label03:
        if $r6 != null goto label06;

     label04:
        virtualinvoke $r3.<org.codehaus.jackson.map.SerializerProvider: void defaultSerializeNull(org.codehaus.jackson.JsonGenerator)>($r2);

     label05:
        return;

     label06:
        r7 = r0.<org.codehaus.jackson.map.ser.JsonValueSerializer: org.codehaus.jackson.map.JsonSerializer _valueSerializer>;

     label07:
        if r7 != null goto label11;

     label08:
        $r8 = virtualinvoke $r6.<java.lang.Object: java.lang.Class getClass()>();

     label09:
        $r9 = r0.<org.codehaus.jackson.map.ser.JsonValueSerializer: org.codehaus.jackson.map.BeanProperty _property>;

     label10:
        r7 = virtualinvoke $r3.<org.codehaus.jackson.map.SerializerProvider: org.codehaus.jackson.map.JsonSerializer findTypedValueSerializer(java.lang.Class,boolean,org.codehaus.jackson.map.BeanProperty)>($r8, 1, $r9);

     label11:
        virtualinvoke r7.<org.codehaus.jackson.map.JsonSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>($r6, $r2, $r3);

     label12:
        return;

     label13:
        $r10 := @caughtexception;

        throw $r10;

     label14:
        $r11 := @caughtexception;

        $r10 = $r11;

     label15:
        $z0 = $r10 instanceof java.lang.reflect.InvocationTargetException;

        if $z0 == 0 goto label16;

        $r12 = virtualinvoke $r10.<java.lang.Throwable: java.lang.Throwable getCause()>();

        if $r12 == null goto label16;

        $r10 = virtualinvoke $r10.<java.lang.Throwable: java.lang.Throwable getCause()>();

        goto label15;

     label16:
        $z0 = $r10 instanceof java.lang.Error;

        if $z0 == 0 goto label17;

        r13 = (java.lang.Error) $r10;

        throw r13;

     label17:
        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r4 = r0.<org.codehaus.jackson.map.ser.JsonValueSerializer: java.lang.reflect.Method _accessorMethod>;

        $r15 = virtualinvoke $r4.<java.lang.reflect.Method: java.lang.String getName()>();

        $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("()");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        $r16 = staticinvoke <org.codehaus.jackson.map.JsonMappingException: org.codehaus.jackson.map.JsonMappingException wrapWithPath(java.lang.Throwable,java.lang.Object,java.lang.String)>($r10, $r1, $r15);

        throw $r16;

        catch java.io.IOException from label02 to label03 with label13;
        catch java.io.IOException from label04 to label05 with label13;
        catch java.io.IOException from label08 to label09 with label13;
        catch java.io.IOException from label10 to label11 with label13;
        catch java.io.IOException from label11 to label12 with label13;
        catch java.lang.Exception from label01 to label03 with label14;
        catch java.lang.Exception from label04 to label05 with label14;
        catch java.lang.Exception from label06 to label07 with label14;
        catch java.lang.Exception from label08 to label11 with label14;
        catch java.lang.Exception from label11 to label12 with label14;
    }

    public void serializeWithType(java.lang.Object, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider, org.codehaus.jackson.map.TypeSerializer) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.map.ser.JsonValueSerializer r0;
        java.lang.Object $r1, $r7;
        org.codehaus.jackson.JsonGenerator $r2;
        org.codehaus.jackson.map.SerializerProvider $r3;
        org.codehaus.jackson.map.TypeSerializer $r4;
        java.lang.reflect.Method $r5;
        java.lang.Object[] $r6;
        org.codehaus.jackson.map.JsonSerializer r8;
        boolean $z0;
        java.lang.Throwable $r9, $r13;
        java.lang.Class $r10;
        org.codehaus.jackson.map.BeanProperty $r11;
        java.lang.Exception $r12;
        java.lang.Error r14;
        java.lang.StringBuilder $r15;
        java.lang.String $r16;
        org.codehaus.jackson.map.JsonMappingException $r17;

        r0 := @this: org.codehaus.jackson.map.ser.JsonValueSerializer;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: org.codehaus.jackson.JsonGenerator;

        $r3 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        $r4 := @parameter3: org.codehaus.jackson.map.TypeSerializer;

     label01:
        $r5 = r0.<org.codehaus.jackson.map.ser.JsonValueSerializer: java.lang.reflect.Method _accessorMethod>;

        $r6 = newarray (java.lang.Object)[0];

     label02:
        $r7 = virtualinvoke $r5.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r1, $r6);

     label03:
        if $r7 != null goto label06;

     label04:
        virtualinvoke $r3.<org.codehaus.jackson.map.SerializerProvider: void defaultSerializeNull(org.codehaus.jackson.JsonGenerator)>($r2);

     label05:
        return;

     label06:
        r8 = r0.<org.codehaus.jackson.map.ser.JsonValueSerializer: org.codehaus.jackson.map.JsonSerializer _valueSerializer>;

     label07:
        if r8 == null goto label17;

     label08:
        $z0 = r0.<org.codehaus.jackson.map.ser.JsonValueSerializer: boolean _forceTypeInformation>;

     label09:
        if $z0 == 0 goto label11;

     label10:
        virtualinvoke $r4.<org.codehaus.jackson.map.TypeSerializer: void writeTypePrefixForScalar(java.lang.Object,org.codehaus.jackson.JsonGenerator)>($r1, $r2);

     label11:
        virtualinvoke r8.<org.codehaus.jackson.map.JsonSerializer: void serializeWithType(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider,org.codehaus.jackson.map.TypeSerializer)>($r7, $r2, $r3, $r4);

     label12:
        $z0 = r0.<org.codehaus.jackson.map.ser.JsonValueSerializer: boolean _forceTypeInformation>;

     label13:
        if $z0 == 0 goto label25;

     label14:
        virtualinvoke $r4.<org.codehaus.jackson.map.TypeSerializer: void writeTypeSuffixForScalar(java.lang.Object,org.codehaus.jackson.JsonGenerator)>($r1, $r2);

     label15:
        return;

     label16:
        $r9 := @caughtexception;

        throw $r9;

     label17:
        $r10 = virtualinvoke $r7.<java.lang.Object: java.lang.Class getClass()>();

     label18:
        $r11 = r0.<org.codehaus.jackson.map.ser.JsonValueSerializer: org.codehaus.jackson.map.BeanProperty _property>;

     label19:
        r8 = virtualinvoke $r3.<org.codehaus.jackson.map.SerializerProvider: org.codehaus.jackson.map.JsonSerializer findTypedValueSerializer(java.lang.Class,boolean,org.codehaus.jackson.map.BeanProperty)>($r10, 1, $r11);

        virtualinvoke r8.<org.codehaus.jackson.map.JsonSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>($r7, $r2, $r3);

     label20:
        return;

     label21:
        $r12 := @caughtexception;

        $r9 = $r12;

     label22:
        $z0 = $r9 instanceof java.lang.reflect.InvocationTargetException;

        if $z0 == 0 goto label23;

        $r13 = virtualinvoke $r9.<java.lang.Throwable: java.lang.Throwable getCause()>();

        if $r13 == null goto label23;

        $r9 = virtualinvoke $r9.<java.lang.Throwable: java.lang.Throwable getCause()>();

        goto label22;

     label23:
        $z0 = $r9 instanceof java.lang.Error;

        if $z0 == 0 goto label24;

        r14 = (java.lang.Error) $r9;

        throw r14;

     label24:
        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r5 = r0.<org.codehaus.jackson.map.ser.JsonValueSerializer: java.lang.reflect.Method _accessorMethod>;

        $r16 = virtualinvoke $r5.<java.lang.reflect.Method: java.lang.String getName()>();

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("()");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        $r17 = staticinvoke <org.codehaus.jackson.map.JsonMappingException: org.codehaus.jackson.map.JsonMappingException wrapWithPath(java.lang.Throwable,java.lang.Object,java.lang.String)>($r9, $r1, $r16);

        throw $r17;

     label25:
        return;

        catch java.io.IOException from label02 to label03 with label16;
        catch java.io.IOException from label04 to label05 with label16;
        catch java.io.IOException from label10 to label12 with label16;
        catch java.io.IOException from label14 to label15 with label16;
        catch java.lang.Exception from label01 to label03 with label21;
        catch java.lang.Exception from label04 to label05 with label21;
        catch java.lang.Exception from label06 to label07 with label21;
        catch java.lang.Exception from label08 to label09 with label21;
        catch java.lang.Exception from label10 to label13 with label21;
        catch java.lang.Exception from label14 to label15 with label21;
        catch java.io.IOException from label17 to label18 with label16;
        catch java.io.IOException from label19 to label20 with label16;
        catch java.lang.Exception from label17 to label20 with label21;
    }

    public java.lang.String toString()
    {
        org.codehaus.jackson.map.ser.JsonValueSerializer r0;
        java.lang.StringBuilder $r1;
        java.lang.reflect.Method $r2;
        java.lang.Class $r3;
        java.lang.String $r4;

        r0 := @this: org.codehaus.jackson.map.ser.JsonValueSerializer;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(@JsonValue serializer for method ");

        $r2 = r0.<org.codehaus.jackson.map.ser.JsonValueSerializer: java.lang.reflect.Method _accessorMethod>;

        $r3 = virtualinvoke $r2.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("#");

        $r2 = r0.<org.codehaus.jackson.map.ser.JsonValueSerializer: java.lang.reflect.Method _accessorMethod>;

        $r4 = virtualinvoke $r2.<java.lang.reflect.Method: java.lang.String getName()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }
}
