public final class org.codehaus.jackson.node.DoubleNode extends org.codehaus.jackson.node.NumericNode
{
    protected final double _value;

    public void <init>(double)
    {
        org.codehaus.jackson.node.DoubleNode r0;
        double $d0;

        r0 := @this: org.codehaus.jackson.node.DoubleNode;

        $d0 := @parameter0: double;

        specialinvoke r0.<org.codehaus.jackson.node.NumericNode: void <init>()>();

        r0.<org.codehaus.jackson.node.DoubleNode: double _value> = $d0;

        return;
    }

    public static org.codehaus.jackson.node.DoubleNode valueOf(double)
    {
        double $d0;
        org.codehaus.jackson.node.DoubleNode $r0;

        $d0 := @parameter0: double;

        $r0 = new org.codehaus.jackson.node.DoubleNode;

        specialinvoke $r0.<org.codehaus.jackson.node.DoubleNode: void <init>(double)>($d0);

        return $r0;
    }

    public org.codehaus.jackson.JsonToken asToken()
    {
        org.codehaus.jackson.node.DoubleNode r0;
        org.codehaus.jackson.JsonToken r1;

        r0 := @this: org.codehaus.jackson.node.DoubleNode;

        r1 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NUMBER_FLOAT>;

        return r1;
    }

    public boolean equals(java.lang.Object)
    {
        org.codehaus.jackson.node.DoubleNode r0, r4;
        double $d0, $d1;
        java.lang.Object r1;
        java.lang.Class $r2, $r3;
        byte $b0;

        r0 := @this: org.codehaus.jackson.node.DoubleNode;

        r1 := @parameter0: java.lang.Object;

        if r1 != r0 goto label1;

        return 1;

     label1:
        if r1 != null goto label2;

        return 0;

     label2:
        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        if $r2 == $r3 goto label3;

        return 0;

     label3:
        r4 = (org.codehaus.jackson.node.DoubleNode) r1;

        $d1 = r4.<org.codehaus.jackson.node.DoubleNode: double _value>;

        $d0 = r0.<org.codehaus.jackson.node.DoubleNode: double _value>;

        $b0 = $d1 cmpl $d0;

        if $b0 != 0 goto label4;

        return 1;

     label4:
        return 0;
    }

    public java.math.BigInteger getBigIntegerValue()
    {
        org.codehaus.jackson.node.DoubleNode r0;
        java.math.BigDecimal $r1;
        java.math.BigInteger $r2;

        r0 := @this: org.codehaus.jackson.node.DoubleNode;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.node.DoubleNode: java.math.BigDecimal getDecimalValue()>();

        $r2 = virtualinvoke $r1.<java.math.BigDecimal: java.math.BigInteger toBigInteger()>();

        return $r2;
    }

    public java.math.BigDecimal getDecimalValue()
    {
        org.codehaus.jackson.node.DoubleNode r0;
        java.math.BigDecimal $r1;
        double $d0;

        r0 := @this: org.codehaus.jackson.node.DoubleNode;

        $d0 = r0.<org.codehaus.jackson.node.DoubleNode: double _value>;

        $r1 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(double)>($d0);

        return $r1;
    }

    public double getDoubleValue()
    {
        org.codehaus.jackson.node.DoubleNode r0;
        double d0;

        r0 := @this: org.codehaus.jackson.node.DoubleNode;

        d0 = r0.<org.codehaus.jackson.node.DoubleNode: double _value>;

        return d0;
    }

    public int getIntValue()
    {
        org.codehaus.jackson.node.DoubleNode r0;
        double $d0;
        int $i0;

        r0 := @this: org.codehaus.jackson.node.DoubleNode;

        $d0 = r0.<org.codehaus.jackson.node.DoubleNode: double _value>;

        $i0 = (int) $d0;

        return $i0;
    }

    public long getLongValue()
    {
        org.codehaus.jackson.node.DoubleNode r0;
        double $d0;
        long $l0;

        r0 := @this: org.codehaus.jackson.node.DoubleNode;

        $d0 = r0.<org.codehaus.jackson.node.DoubleNode: double _value>;

        $l0 = (long) $d0;

        return $l0;
    }

    public org.codehaus.jackson.JsonParser$NumberType getNumberType()
    {
        org.codehaus.jackson.node.DoubleNode r0;
        org.codehaus.jackson.JsonParser$NumberType r1;

        r0 := @this: org.codehaus.jackson.node.DoubleNode;

        r1 = <org.codehaus.jackson.JsonParser$NumberType: org.codehaus.jackson.JsonParser$NumberType DOUBLE>;

        return r1;
    }

    public java.lang.Number getNumberValue()
    {
        org.codehaus.jackson.node.DoubleNode r0;
        java.lang.Double $r1;
        double $d0;

        r0 := @this: org.codehaus.jackson.node.DoubleNode;

        $d0 = r0.<org.codehaus.jackson.node.DoubleNode: double _value>;

        $r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        return $r1;
    }

    public java.lang.String getValueAsText()
    {
        org.codehaus.jackson.node.DoubleNode r0;
        java.lang.String $r1;
        double $d0;

        r0 := @this: org.codehaus.jackson.node.DoubleNode;

        $d0 = r0.<org.codehaus.jackson.node.DoubleNode: double _value>;

        $r1 = staticinvoke <org.codehaus.jackson.io.NumberOutput: java.lang.String toString(double)>($d0);

        return $r1;
    }

    public int hashCode()
    {
        org.codehaus.jackson.node.DoubleNode r0;
        long $l0;
        double $d0;
        int $i1, $i2;

        r0 := @this: org.codehaus.jackson.node.DoubleNode;

        $d0 = r0.<org.codehaus.jackson.node.DoubleNode: double _value>;

        $l0 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d0);

        $i1 = (int) $l0;

        $l0 = $l0 >> 32;

        $i2 = (int) $l0;

        $i1 = $i1 ^ $i2;

        return $i1;
    }

    public boolean isDouble()
    {
        org.codehaus.jackson.node.DoubleNode r0;

        r0 := @this: org.codehaus.jackson.node.DoubleNode;

        return 1;
    }

    public boolean isFloatingPointNumber()
    {
        org.codehaus.jackson.node.DoubleNode r0;

        r0 := @this: org.codehaus.jackson.node.DoubleNode;

        return 1;
    }

    public final void serialize(org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.node.DoubleNode r0;
        org.codehaus.jackson.JsonGenerator $r1;
        org.codehaus.jackson.map.SerializerProvider $r2;
        double $d0;

        r0 := @this: org.codehaus.jackson.node.DoubleNode;

        $r1 := @parameter0: org.codehaus.jackson.JsonGenerator;

        $r2 := @parameter1: org.codehaus.jackson.map.SerializerProvider;

        $d0 = r0.<org.codehaus.jackson.node.DoubleNode: double _value>;

        virtualinvoke $r1.<org.codehaus.jackson.JsonGenerator: void writeNumber(double)>($d0);

        return;
    }
}
