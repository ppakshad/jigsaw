public final class org.codehaus.jackson.map.introspect.AnnotatedMethodMap extends java.lang.Object implements java.lang.Iterable
{
    java.util.LinkedHashMap _methods;

    public void <init>()
    {
        org.codehaus.jackson.map.introspect.AnnotatedMethodMap r0;

        r0 := @this: org.codehaus.jackson.map.introspect.AnnotatedMethodMap;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void add(org.codehaus.jackson.map.introspect.AnnotatedMethod)
    {
        org.codehaus.jackson.map.introspect.AnnotatedMethodMap r0;
        org.codehaus.jackson.map.introspect.AnnotatedMethod $r1;
        org.codehaus.jackson.map.introspect.MemberKey $r2;
        java.lang.reflect.Method $r3;
        java.util.LinkedHashMap $r4;

        r0 := @this: org.codehaus.jackson.map.introspect.AnnotatedMethodMap;

        $r1 := @parameter0: org.codehaus.jackson.map.introspect.AnnotatedMethod;

        $r4 = r0.<org.codehaus.jackson.map.introspect.AnnotatedMethodMap: java.util.LinkedHashMap _methods>;

        if $r4 != null goto label1;

        $r4 = new java.util.LinkedHashMap;

        specialinvoke $r4.<java.util.LinkedHashMap: void <init>()>();

        r0.<org.codehaus.jackson.map.introspect.AnnotatedMethodMap: java.util.LinkedHashMap _methods> = $r4;

     label1:
        $r4 = r0.<org.codehaus.jackson.map.introspect.AnnotatedMethodMap: java.util.LinkedHashMap _methods>;

        $r2 = new org.codehaus.jackson.map.introspect.MemberKey;

        $r3 = virtualinvoke $r1.<org.codehaus.jackson.map.introspect.AnnotatedMethod: java.lang.reflect.Method getAnnotated()>();

        specialinvoke $r2.<org.codehaus.jackson.map.introspect.MemberKey: void <init>(java.lang.reflect.Method)>($r3);

        virtualinvoke $r4.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r1);

        return;
    }

    public org.codehaus.jackson.map.introspect.AnnotatedMethod find(java.lang.String, java.lang.Class[])
    {
        java.lang.String $r0;
        java.lang.Class[] r1;
        org.codehaus.jackson.map.introspect.MemberKey $r2;
        java.lang.Object $r3;
        org.codehaus.jackson.map.introspect.AnnotatedMethodMap r4;
        java.util.LinkedHashMap $r5;
        org.codehaus.jackson.map.introspect.AnnotatedMethod r6;

        r4 := @this: org.codehaus.jackson.map.introspect.AnnotatedMethodMap;

        $r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Class[];

        $r5 = r4.<org.codehaus.jackson.map.introspect.AnnotatedMethodMap: java.util.LinkedHashMap _methods>;

        if $r5 != null goto label1;

        return null;

     label1:
        $r5 = r4.<org.codehaus.jackson.map.introspect.AnnotatedMethodMap: java.util.LinkedHashMap _methods>;

        $r2 = new org.codehaus.jackson.map.introspect.MemberKey;

        specialinvoke $r2.<org.codehaus.jackson.map.introspect.MemberKey: void <init>(java.lang.String,java.lang.Class[])>($r0, r1);

        $r3 = virtualinvoke $r5.<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>($r2);

        r6 = (org.codehaus.jackson.map.introspect.AnnotatedMethod) $r3;

        return r6;
    }

    public org.codehaus.jackson.map.introspect.AnnotatedMethod find(java.lang.reflect.Method)
    {
        java.lang.reflect.Method $r0;
        org.codehaus.jackson.map.introspect.MemberKey $r1;
        java.lang.Object $r2;
        org.codehaus.jackson.map.introspect.AnnotatedMethodMap r3;
        java.util.LinkedHashMap $r4;
        org.codehaus.jackson.map.introspect.AnnotatedMethod r5;

        r3 := @this: org.codehaus.jackson.map.introspect.AnnotatedMethodMap;

        $r0 := @parameter0: java.lang.reflect.Method;

        $r4 = r3.<org.codehaus.jackson.map.introspect.AnnotatedMethodMap: java.util.LinkedHashMap _methods>;

        if $r4 != null goto label1;

        return null;

     label1:
        $r4 = r3.<org.codehaus.jackson.map.introspect.AnnotatedMethodMap: java.util.LinkedHashMap _methods>;

        $r1 = new org.codehaus.jackson.map.introspect.MemberKey;

        specialinvoke $r1.<org.codehaus.jackson.map.introspect.MemberKey: void <init>(java.lang.reflect.Method)>($r0);

        $r2 = virtualinvoke $r4.<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>($r1);

        r5 = (org.codehaus.jackson.map.introspect.AnnotatedMethod) $r2;

        return r5;
    }

    public boolean isEmpty()
    {
        org.codehaus.jackson.map.introspect.AnnotatedMethodMap r0;
        int $i0;
        java.util.LinkedHashMap $r1;

        r0 := @this: org.codehaus.jackson.map.introspect.AnnotatedMethodMap;

        $r1 = r0.<org.codehaus.jackson.map.introspect.AnnotatedMethodMap: java.util.LinkedHashMap _methods>;

        if $r1 == null goto label1;

        $r1 = r0.<org.codehaus.jackson.map.introspect.AnnotatedMethodMap: java.util.LinkedHashMap _methods>;

        $i0 = virtualinvoke $r1.<java.util.LinkedHashMap: int size()>();

        if $i0 != 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    public java.util.Iterator iterator()
    {
        org.codehaus.jackson.map.introspect.AnnotatedMethodMap r0;
        java.util.LinkedHashMap $r1;
        java.util.Collection $r2;
        java.util.Iterator $r3;
        java.util.List $r4;

        r0 := @this: org.codehaus.jackson.map.introspect.AnnotatedMethodMap;

        $r1 = r0.<org.codehaus.jackson.map.introspect.AnnotatedMethodMap: java.util.LinkedHashMap _methods>;

        if $r1 == null goto label1;

        $r1 = r0.<org.codehaus.jackson.map.introspect.AnnotatedMethodMap: java.util.LinkedHashMap _methods>;

        $r2 = virtualinvoke $r1.<java.util.LinkedHashMap: java.util.Collection values()>();

        $r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

        return $r3;

     label1:
        $r4 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        $r3 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

        return $r3;
    }

    public org.codehaus.jackson.map.introspect.AnnotatedMethod remove(java.lang.reflect.Method)
    {
        java.lang.reflect.Method $r0;
        org.codehaus.jackson.map.introspect.MemberKey $r1;
        java.lang.Object $r2;
        org.codehaus.jackson.map.introspect.AnnotatedMethodMap r3;
        java.util.LinkedHashMap $r4;
        org.codehaus.jackson.map.introspect.AnnotatedMethod r5;

        r3 := @this: org.codehaus.jackson.map.introspect.AnnotatedMethodMap;

        $r0 := @parameter0: java.lang.reflect.Method;

        $r4 = r3.<org.codehaus.jackson.map.introspect.AnnotatedMethodMap: java.util.LinkedHashMap _methods>;

        if $r4 == null goto label1;

        $r4 = r3.<org.codehaus.jackson.map.introspect.AnnotatedMethodMap: java.util.LinkedHashMap _methods>;

        $r1 = new org.codehaus.jackson.map.introspect.MemberKey;

        specialinvoke $r1.<org.codehaus.jackson.map.introspect.MemberKey: void <init>(java.lang.reflect.Method)>($r0);

        $r2 = virtualinvoke $r4.<java.util.LinkedHashMap: java.lang.Object remove(java.lang.Object)>($r1);

        r5 = (org.codehaus.jackson.map.introspect.AnnotatedMethod) $r2;

        return r5;

     label1:
        return null;
    }

    public org.codehaus.jackson.map.introspect.AnnotatedMethod remove(org.codehaus.jackson.map.introspect.AnnotatedMethod)
    {
        org.codehaus.jackson.map.introspect.AnnotatedMethodMap r0;
        org.codehaus.jackson.map.introspect.AnnotatedMethod $r1;
        java.lang.reflect.Method $r2;

        r0 := @this: org.codehaus.jackson.map.introspect.AnnotatedMethodMap;

        $r1 := @parameter0: org.codehaus.jackson.map.introspect.AnnotatedMethod;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.map.introspect.AnnotatedMethod: java.lang.reflect.Method getAnnotated()>();

        $r1 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedMethodMap: org.codehaus.jackson.map.introspect.AnnotatedMethod remove(java.lang.reflect.Method)>($r2);

        return $r1;
    }

    public int size()
    {
        org.codehaus.jackson.map.introspect.AnnotatedMethodMap r0;
        int $i0;
        java.util.LinkedHashMap $r1;

        r0 := @this: org.codehaus.jackson.map.introspect.AnnotatedMethodMap;

        $r1 = r0.<org.codehaus.jackson.map.introspect.AnnotatedMethodMap: java.util.LinkedHashMap _methods>;

        if $r1 != null goto label1;

        return 0;

     label1:
        $r1 = r0.<org.codehaus.jackson.map.introspect.AnnotatedMethodMap: java.util.LinkedHashMap _methods>;

        $i0 = virtualinvoke $r1.<java.util.LinkedHashMap: int size()>();

        return $i0;
    }
}
