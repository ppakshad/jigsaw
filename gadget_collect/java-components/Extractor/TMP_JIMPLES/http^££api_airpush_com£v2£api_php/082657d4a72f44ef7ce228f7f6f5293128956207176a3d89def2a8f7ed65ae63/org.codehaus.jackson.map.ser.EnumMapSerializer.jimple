public class org.codehaus.jackson.map.ser.EnumMapSerializer extends org.codehaus.jackson.map.ser.ContainerSerializerBase implements org.codehaus.jackson.map.ResolvableSerializer
{
    protected final org.codehaus.jackson.map.util.EnumValues _keyEnums;
    protected final org.codehaus.jackson.map.BeanProperty _property;
    protected final boolean _staticTyping;
    protected org.codehaus.jackson.map.JsonSerializer _valueSerializer;
    protected final org.codehaus.jackson.type.JavaType _valueType;
    protected final org.codehaus.jackson.map.TypeSerializer _valueTypeSerializer;

    public void <init>(org.codehaus.jackson.type.JavaType, boolean, org.codehaus.jackson.map.util.EnumValues, org.codehaus.jackson.map.TypeSerializer, org.codehaus.jackson.map.BeanProperty)
    {
        org.codehaus.jackson.map.ser.EnumMapSerializer r0;
        org.codehaus.jackson.type.JavaType $r1;
        boolean $z0;
        org.codehaus.jackson.map.util.EnumValues $r2;
        org.codehaus.jackson.map.TypeSerializer $r3;
        org.codehaus.jackson.map.BeanProperty $r4;

        r0 := @this: org.codehaus.jackson.map.ser.EnumMapSerializer;

        $r1 := @parameter0: org.codehaus.jackson.type.JavaType;

        $z0 := @parameter1: boolean;

        $r2 := @parameter2: org.codehaus.jackson.map.util.EnumValues;

        $r3 := @parameter3: org.codehaus.jackson.map.TypeSerializer;

        $r4 := @parameter4: org.codehaus.jackson.map.BeanProperty;

        specialinvoke r0.<org.codehaus.jackson.map.ser.ContainerSerializerBase: void <init>(java.lang.Class,boolean)>(class "Ljava/util/EnumMap;", 0);

        if $z0 != 0 goto label1;

        if $r1 == null goto label3;

        $z0 = virtualinvoke $r1.<org.codehaus.jackson.type.JavaType: boolean isFinal()>();

        if $z0 == 0 goto label3;

     label1:
        $z0 = 1;

     label2:
        r0.<org.codehaus.jackson.map.ser.EnumMapSerializer: boolean _staticTyping> = $z0;

        r0.<org.codehaus.jackson.map.ser.EnumMapSerializer: org.codehaus.jackson.type.JavaType _valueType> = $r1;

        r0.<org.codehaus.jackson.map.ser.EnumMapSerializer: org.codehaus.jackson.map.util.EnumValues _keyEnums> = $r2;

        r0.<org.codehaus.jackson.map.ser.EnumMapSerializer: org.codehaus.jackson.map.TypeSerializer _valueTypeSerializer> = $r3;

        r0.<org.codehaus.jackson.map.ser.EnumMapSerializer: org.codehaus.jackson.map.BeanProperty _property> = $r4;

        return;

     label3:
        $z0 = 0;

        goto label2;
    }

    public org.codehaus.jackson.map.ser.ContainerSerializerBase _withValueTypeSerializer(org.codehaus.jackson.map.TypeSerializer)
    {
        org.codehaus.jackson.map.ser.EnumMapSerializer r0, $r2;
        org.codehaus.jackson.map.TypeSerializer $r1;
        org.codehaus.jackson.type.JavaType $r3;
        boolean $z0;
        org.codehaus.jackson.map.util.EnumValues $r4;
        org.codehaus.jackson.map.BeanProperty $r5;

        r0 := @this: org.codehaus.jackson.map.ser.EnumMapSerializer;

        $r1 := @parameter0: org.codehaus.jackson.map.TypeSerializer;

        $r2 = new org.codehaus.jackson.map.ser.EnumMapSerializer;

        $r3 = r0.<org.codehaus.jackson.map.ser.EnumMapSerializer: org.codehaus.jackson.type.JavaType _valueType>;

        $z0 = r0.<org.codehaus.jackson.map.ser.EnumMapSerializer: boolean _staticTyping>;

        $r4 = r0.<org.codehaus.jackson.map.ser.EnumMapSerializer: org.codehaus.jackson.map.util.EnumValues _keyEnums>;

        $r5 = r0.<org.codehaus.jackson.map.ser.EnumMapSerializer: org.codehaus.jackson.map.BeanProperty _property>;

        specialinvoke $r2.<org.codehaus.jackson.map.ser.EnumMapSerializer: void <init>(org.codehaus.jackson.type.JavaType,boolean,org.codehaus.jackson.map.util.EnumValues,org.codehaus.jackson.map.TypeSerializer,org.codehaus.jackson.map.BeanProperty)>($r3, $z0, $r4, $r1, $r5);

        return $r2;
    }

    public org.codehaus.jackson.JsonNode getSchema(org.codehaus.jackson.map.SerializerProvider, java.lang.reflect.Type) throws org.codehaus.jackson.map.JsonMappingException
    {
        org.codehaus.jackson.map.ser.EnumMapSerializer r0;
        org.codehaus.jackson.map.SerializerProvider $r1;
        java.lang.Enum r2;
        int i0, i1;
        java.lang.reflect.Type $r3;
        org.codehaus.jackson.node.ObjectNode $r4, $r10;
        boolean $z0;
        java.lang.reflect.ParameterizedType $r5;
        java.lang.reflect.Type[] $r6;
        org.codehaus.jackson.type.JavaType $r7, $r8;
        org.codehaus.jackson.node.JsonNodeFactory $r9;
        java.lang.Class $r11;
        java.lang.Object[] $r12;
        java.lang.Enum[] r13;
        org.codehaus.jackson.map.BeanProperty $r14;
        org.codehaus.jackson.map.JsonSerializer $r15;
        org.codehaus.jackson.schema.SchemaAware r16;
        org.codehaus.jackson.JsonNode $r17;
        org.codehaus.jackson.map.SerializationConfig $r18;
        org.codehaus.jackson.map.AnnotationIntrospector $r19;
        java.lang.String $r20;

        r0 := @this: org.codehaus.jackson.map.ser.EnumMapSerializer;

        $r1 := @parameter0: org.codehaus.jackson.map.SerializerProvider;

        $r3 := @parameter1: java.lang.reflect.Type;

        $r4 = virtualinvoke r0.<org.codehaus.jackson.map.ser.EnumMapSerializer: org.codehaus.jackson.node.ObjectNode createSchemaNode(java.lang.String,boolean)>("object", 1);

        $z0 = $r3 instanceof java.lang.reflect.ParameterizedType;

        if $z0 == 0 goto label5;

        $r5 = (java.lang.reflect.ParameterizedType) $r3;

        $r6 = interfaceinvoke $r5.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        i0 = lengthof $r6;

        if i0 != 2 goto label5;

        $r3 = $r6[0];

        $r7 = staticinvoke <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType type(java.lang.reflect.Type)>($r3);

        $r3 = $r6[1];

        $r8 = staticinvoke <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType type(java.lang.reflect.Type)>($r3);

        $r9 = <org.codehaus.jackson.node.JsonNodeFactory: org.codehaus.jackson.node.JsonNodeFactory instance>;

        $r10 = virtualinvoke $r9.<org.codehaus.jackson.node.JsonNodeFactory: org.codehaus.jackson.node.ObjectNode objectNode()>();

        $r11 = virtualinvoke $r7.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        $r12 = virtualinvoke $r11.<java.lang.Class: java.lang.Object[] getEnumConstants()>();

        r13 = (java.lang.Enum[]) $r12;

        i0 = lengthof r13;

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        r2 = r13[i1];

        $r11 = virtualinvoke $r8.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        $r14 = r0.<org.codehaus.jackson.map.ser.EnumMapSerializer: org.codehaus.jackson.map.BeanProperty _property>;

        $r15 = virtualinvoke $r1.<org.codehaus.jackson.map.SerializerProvider: org.codehaus.jackson.map.JsonSerializer findValueSerializer(java.lang.Class,org.codehaus.jackson.map.BeanProperty)>($r11, $r14);

        $z0 = $r15 instanceof org.codehaus.jackson.schema.SchemaAware;

        if $z0 == 0 goto label3;

        r16 = (org.codehaus.jackson.schema.SchemaAware) $r15;

        $r17 = interfaceinvoke r16.<org.codehaus.jackson.schema.SchemaAware: org.codehaus.jackson.JsonNode getSchema(org.codehaus.jackson.map.SerializerProvider,java.lang.reflect.Type)>($r1, null);

     label2:
        $r18 = virtualinvoke $r1.<org.codehaus.jackson.map.SerializerProvider: org.codehaus.jackson.map.SerializationConfig getConfig()>();

        $r19 = virtualinvoke $r18.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.AnnotationIntrospector getAnnotationIntrospector()>();

        $r20 = virtualinvoke $r19.<org.codehaus.jackson.map.AnnotationIntrospector: java.lang.String findEnumValue(java.lang.Enum)>(r2);

        virtualinvoke $r10.<org.codehaus.jackson.node.ObjectNode: org.codehaus.jackson.JsonNode put(java.lang.String,org.codehaus.jackson.JsonNode)>($r20, $r17);

        i1 = i1 + 1;

        goto label1;

     label3:
        $r17 = staticinvoke <org.codehaus.jackson.schema.JsonSchema: org.codehaus.jackson.JsonNode getDefaultSchemaNode()>();

        goto label2;

     label4:
        virtualinvoke $r4.<org.codehaus.jackson.node.ObjectNode: org.codehaus.jackson.JsonNode put(java.lang.String,org.codehaus.jackson.JsonNode)>("properties", $r10);

     label5:
        return $r4;
    }

    public void resolve(org.codehaus.jackson.map.SerializerProvider) throws org.codehaus.jackson.map.JsonMappingException
    {
        org.codehaus.jackson.map.ser.EnumMapSerializer r0;
        org.codehaus.jackson.map.SerializerProvider $r1;
        org.codehaus.jackson.map.BeanProperty $r2;
        org.codehaus.jackson.map.JsonSerializer $r3;
        boolean $z0;
        org.codehaus.jackson.type.JavaType $r4;

        r0 := @this: org.codehaus.jackson.map.ser.EnumMapSerializer;

        $r1 := @parameter0: org.codehaus.jackson.map.SerializerProvider;

        $z0 = r0.<org.codehaus.jackson.map.ser.EnumMapSerializer: boolean _staticTyping>;

        if $z0 == 0 goto label1;

        $r4 = r0.<org.codehaus.jackson.map.ser.EnumMapSerializer: org.codehaus.jackson.type.JavaType _valueType>;

        $r2 = r0.<org.codehaus.jackson.map.ser.EnumMapSerializer: org.codehaus.jackson.map.BeanProperty _property>;

        $r3 = virtualinvoke $r1.<org.codehaus.jackson.map.SerializerProvider: org.codehaus.jackson.map.JsonSerializer findValueSerializer(org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanProperty)>($r4, $r2);

        r0.<org.codehaus.jackson.map.ser.EnumMapSerializer: org.codehaus.jackson.map.JsonSerializer _valueSerializer> = $r3;

     label1:
        return;
    }

    public volatile void serialize(java.lang.Object, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        org.codehaus.jackson.map.ser.EnumMapSerializer r0;
        org.codehaus.jackson.JsonGenerator $r1;
        org.codehaus.jackson.map.SerializerProvider $r2;
        java.lang.Object $r3;
        java.util.EnumMap $r4;

        r0 := @this: org.codehaus.jackson.map.ser.EnumMapSerializer;

        $r3 := @parameter0: java.lang.Object;

        $r1 := @parameter1: org.codehaus.jackson.JsonGenerator;

        $r2 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        $r4 = (java.util.EnumMap) $r3;

        virtualinvoke r0.<org.codehaus.jackson.map.ser.EnumMapSerializer: void serialize(java.util.EnumMap,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>($r4, $r1, $r2);

        return;
    }

    public void serialize(java.util.EnumMap, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        org.codehaus.jackson.map.ser.EnumMapSerializer r0;
        java.util.EnumMap r1;
        org.codehaus.jackson.JsonGenerator $r2;
        org.codehaus.jackson.map.SerializerProvider $r3;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.ser.EnumMapSerializer;

        r1 := @parameter0: java.util.EnumMap;

        $r2 := @parameter1: org.codehaus.jackson.JsonGenerator;

        $r3 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        virtualinvoke $r2.<org.codehaus.jackson.JsonGenerator: void writeStartObject()>();

        $z0 = virtualinvoke r1.<java.util.EnumMap: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        virtualinvoke r0.<org.codehaus.jackson.map.ser.EnumMapSerializer: void serializeContents(java.util.EnumMap,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>(r1, $r2, $r3);

     label1:
        virtualinvoke $r2.<org.codehaus.jackson.JsonGenerator: void writeEndObject()>();

        return;
    }

    protected void serializeContents(java.util.EnumMap, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        org.codehaus.jackson.map.ser.EnumMapSerializer r0;
        java.util.EnumMap r1;
        org.codehaus.jackson.JsonGenerator $r2;
        org.codehaus.jackson.map.SerializerProvider $r3;
        java.lang.Exception r4;
        org.codehaus.jackson.map.JsonSerializer $r5, $r15;
        java.lang.Class r6, $r13;
        org.codehaus.jackson.map.util.EnumValues $r7;
        java.util.Set $r8;
        java.util.Iterator $r9;
        boolean $z0;
        java.lang.Object $r10;
        java.util.Map$Entry r11;
        java.lang.Enum r12;
        org.codehaus.jackson.map.BeanProperty $r14;
        org.codehaus.jackson.map.ser.SerializerBase r16;
        org.codehaus.jackson.map.ser.EnumSerializer r17;
        org.codehaus.jackson.io.SerializedString $r18;
        java.lang.String $r19;

        r0 := @this: org.codehaus.jackson.map.ser.EnumMapSerializer;

        r1 := @parameter0: java.util.EnumMap;

        $r2 := @parameter1: org.codehaus.jackson.JsonGenerator;

        $r3 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        $r5 = r0.<org.codehaus.jackson.map.ser.EnumMapSerializer: org.codehaus.jackson.map.JsonSerializer _valueSerializer>;

        if $r5 == null goto label1;

        $r5 = r0.<org.codehaus.jackson.map.ser.EnumMapSerializer: org.codehaus.jackson.map.JsonSerializer _valueSerializer>;

        virtualinvoke r0.<org.codehaus.jackson.map.ser.EnumMapSerializer: void serializeContentsUsing(java.util.EnumMap,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider,org.codehaus.jackson.map.JsonSerializer)>(r1, $r2, $r3, $r5);

        return;

     label1:
        $r5 = null;

        r6 = null;

        $r7 = r0.<org.codehaus.jackson.map.ser.EnumMapSerializer: org.codehaus.jackson.map.util.EnumValues _keyEnums>;

        $r8 = virtualinvoke r1.<java.util.EnumMap: java.util.Set entrySet()>();

        $r9 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label9;

        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r11 = (java.util.Map$Entry) $r10;

        $r10 = interfaceinvoke r11.<java.util.Map$Entry: java.lang.Object getKey()>();

        r12 = (java.lang.Enum) $r10;

        if $r7 != null goto label3;

        $r13 = virtualinvoke r12.<java.lang.Enum: java.lang.Class getDeclaringClass()>();

        $r14 = r0.<org.codehaus.jackson.map.ser.EnumMapSerializer: org.codehaus.jackson.map.BeanProperty _property>;

        $r15 = virtualinvoke $r3.<org.codehaus.jackson.map.SerializerProvider: org.codehaus.jackson.map.JsonSerializer findValueSerializer(java.lang.Class,org.codehaus.jackson.map.BeanProperty)>($r13, $r14);

        r16 = (org.codehaus.jackson.map.ser.SerializerBase) $r15;

        r17 = (org.codehaus.jackson.map.ser.EnumSerializer) r16;

        $r7 = virtualinvoke r17.<org.codehaus.jackson.map.ser.EnumSerializer: org.codehaus.jackson.map.util.EnumValues getEnumValues()>();

     label3:
        $r18 = virtualinvoke $r7.<org.codehaus.jackson.map.util.EnumValues: org.codehaus.jackson.io.SerializedString serializedValueFor(java.lang.Enum)>(r12);

        virtualinvoke $r2.<org.codehaus.jackson.JsonGenerator: void writeFieldName(org.codehaus.jackson.io.SerializedString)>($r18);

        $r10 = interfaceinvoke r11.<java.util.Map$Entry: java.lang.Object getValue()>();

        if $r10 != null goto label4;

        virtualinvoke $r3.<org.codehaus.jackson.map.SerializerProvider: void defaultSerializeNull(org.codehaus.jackson.JsonGenerator)>($r2);

        goto label2;

     label4:
        $r13 = virtualinvoke $r10.<java.lang.Object: java.lang.Class getClass()>();

        if $r13 != r6 goto label8;

        $r15 = $r5;

     label5:
        virtualinvoke $r15.<org.codehaus.jackson.map.JsonSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>($r10, $r2, $r3);

     label6:
        goto label2;

     label7:
        r4 := @caughtexception;

        $r10 = interfaceinvoke r11.<java.util.Map$Entry: java.lang.Object getKey()>();

        r12 = (java.lang.Enum) $r10;

        $r19 = virtualinvoke r12.<java.lang.Enum: java.lang.String name()>();

        virtualinvoke r0.<org.codehaus.jackson.map.ser.EnumMapSerializer: void wrapAndThrow(org.codehaus.jackson.map.SerializerProvider,java.lang.Throwable,java.lang.Object,java.lang.String)>($r3, r4, r1, $r19);

        goto label2;

     label8:
        $r14 = r0.<org.codehaus.jackson.map.ser.EnumMapSerializer: org.codehaus.jackson.map.BeanProperty _property>;

        $r5 = virtualinvoke $r3.<org.codehaus.jackson.map.SerializerProvider: org.codehaus.jackson.map.JsonSerializer findValueSerializer(java.lang.Class,org.codehaus.jackson.map.BeanProperty)>($r13, $r14);

        $r15 = $r5;

        r6 = $r13;

        goto label5;

     label9:
        return;

        catch java.lang.Exception from label5 to label6 with label7;
    }

    protected void serializeContentsUsing(java.util.EnumMap, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider, org.codehaus.jackson.map.JsonSerializer) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        org.codehaus.jackson.map.ser.EnumMapSerializer r0;
        java.util.EnumMap r1;
        org.codehaus.jackson.JsonGenerator $r2;
        org.codehaus.jackson.map.SerializerProvider $r3;
        org.codehaus.jackson.map.JsonSerializer r4, $r14;
        java.lang.Exception r5;
        org.codehaus.jackson.map.BeanProperty $r6;
        org.codehaus.jackson.map.util.EnumValues r7;
        java.util.Set $r8;
        java.util.Iterator $r9;
        boolean $z0;
        java.lang.Object $r10;
        java.util.Map$Entry r11;
        java.lang.Enum r12;
        java.lang.Class $r13;
        org.codehaus.jackson.map.ser.SerializerBase r15;
        org.codehaus.jackson.map.ser.EnumSerializer r16;
        org.codehaus.jackson.io.SerializedString $r17;
        java.lang.String $r18;

        r0 := @this: org.codehaus.jackson.map.ser.EnumMapSerializer;

        r1 := @parameter0: java.util.EnumMap;

        $r2 := @parameter1: org.codehaus.jackson.JsonGenerator;

        $r3 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        r4 := @parameter3: org.codehaus.jackson.map.JsonSerializer;

        r7 = r0.<org.codehaus.jackson.map.ser.EnumMapSerializer: org.codehaus.jackson.map.util.EnumValues _keyEnums>;

        $r8 = virtualinvoke r1.<java.util.EnumMap: java.util.Set entrySet()>();

        $r9 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r11 = (java.util.Map$Entry) $r10;

        $r10 = interfaceinvoke r11.<java.util.Map$Entry: java.lang.Object getKey()>();

        r12 = (java.lang.Enum) $r10;

        if r7 != null goto label2;

        $r13 = virtualinvoke r12.<java.lang.Enum: java.lang.Class getDeclaringClass()>();

        $r6 = r0.<org.codehaus.jackson.map.ser.EnumMapSerializer: org.codehaus.jackson.map.BeanProperty _property>;

        $r14 = virtualinvoke $r3.<org.codehaus.jackson.map.SerializerProvider: org.codehaus.jackson.map.JsonSerializer findValueSerializer(java.lang.Class,org.codehaus.jackson.map.BeanProperty)>($r13, $r6);

        r15 = (org.codehaus.jackson.map.ser.SerializerBase) $r14;

        r16 = (org.codehaus.jackson.map.ser.EnumSerializer) r15;

        r7 = virtualinvoke r16.<org.codehaus.jackson.map.ser.EnumSerializer: org.codehaus.jackson.map.util.EnumValues getEnumValues()>();

     label2:
        $r17 = virtualinvoke r7.<org.codehaus.jackson.map.util.EnumValues: org.codehaus.jackson.io.SerializedString serializedValueFor(java.lang.Enum)>(r12);

        virtualinvoke $r2.<org.codehaus.jackson.JsonGenerator: void writeFieldName(org.codehaus.jackson.io.SerializedString)>($r17);

        $r10 = interfaceinvoke r11.<java.util.Map$Entry: java.lang.Object getValue()>();

        if $r10 != null goto label3;

        virtualinvoke $r3.<org.codehaus.jackson.map.SerializerProvider: void defaultSerializeNull(org.codehaus.jackson.JsonGenerator)>($r2);

        goto label1;

     label3:
        virtualinvoke r4.<org.codehaus.jackson.map.JsonSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>($r10, $r2, $r3);

     label4:
        goto label1;

     label5:
        r5 := @caughtexception;

        $r10 = interfaceinvoke r11.<java.util.Map$Entry: java.lang.Object getKey()>();

        r12 = (java.lang.Enum) $r10;

        $r18 = virtualinvoke r12.<java.lang.Enum: java.lang.String name()>();

        virtualinvoke r0.<org.codehaus.jackson.map.ser.EnumMapSerializer: void wrapAndThrow(org.codehaus.jackson.map.SerializerProvider,java.lang.Throwable,java.lang.Object,java.lang.String)>($r3, r5, r1, $r18);

        goto label1;

     label6:
        return;

        catch java.lang.Exception from label3 to label4 with label5;
    }

    public volatile void serializeWithType(java.lang.Object, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider, org.codehaus.jackson.map.TypeSerializer) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.map.ser.EnumMapSerializer r0;
        org.codehaus.jackson.JsonGenerator $r1;
        org.codehaus.jackson.map.SerializerProvider $r2;
        org.codehaus.jackson.map.TypeSerializer $r3;
        java.lang.Object $r4;
        java.util.EnumMap $r5;

        r0 := @this: org.codehaus.jackson.map.ser.EnumMapSerializer;

        $r4 := @parameter0: java.lang.Object;

        $r1 := @parameter1: org.codehaus.jackson.JsonGenerator;

        $r2 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        $r3 := @parameter3: org.codehaus.jackson.map.TypeSerializer;

        $r5 = (java.util.EnumMap) $r4;

        virtualinvoke r0.<org.codehaus.jackson.map.ser.EnumMapSerializer: void serializeWithType(java.util.EnumMap,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider,org.codehaus.jackson.map.TypeSerializer)>($r5, $r1, $r2, $r3);

        return;
    }

    public void serializeWithType(java.util.EnumMap, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider, org.codehaus.jackson.map.TypeSerializer) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        org.codehaus.jackson.map.ser.EnumMapSerializer r0;
        java.util.EnumMap r1;
        org.codehaus.jackson.JsonGenerator $r2;
        org.codehaus.jackson.map.SerializerProvider $r3;
        org.codehaus.jackson.map.TypeSerializer $r4;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.ser.EnumMapSerializer;

        r1 := @parameter0: java.util.EnumMap;

        $r2 := @parameter1: org.codehaus.jackson.JsonGenerator;

        $r3 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        $r4 := @parameter3: org.codehaus.jackson.map.TypeSerializer;

        virtualinvoke $r4.<org.codehaus.jackson.map.TypeSerializer: void writeTypePrefixForObject(java.lang.Object,org.codehaus.jackson.JsonGenerator)>(r1, $r2);

        $z0 = virtualinvoke r1.<java.util.EnumMap: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        virtualinvoke r0.<org.codehaus.jackson.map.ser.EnumMapSerializer: void serializeContents(java.util.EnumMap,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>(r1, $r2, $r3);

     label1:
        virtualinvoke $r4.<org.codehaus.jackson.map.TypeSerializer: void writeTypeSuffixForObject(java.lang.Object,org.codehaus.jackson.JsonGenerator)>(r1, $r2);

        return;
    }
}
