public class org.codehaus.jackson.map.jsontype.impl.ClassNameIdResolver extends org.codehaus.jackson.map.jsontype.impl.TypeIdResolverBase
{

    public void <init>(org.codehaus.jackson.type.JavaType)
    {
        org.codehaus.jackson.map.jsontype.impl.ClassNameIdResolver r0;
        org.codehaus.jackson.type.JavaType $r1;

        r0 := @this: org.codehaus.jackson.map.jsontype.impl.ClassNameIdResolver;

        $r1 := @parameter0: org.codehaus.jackson.type.JavaType;

        specialinvoke r0.<org.codehaus.jackson.map.jsontype.impl.TypeIdResolverBase: void <init>(org.codehaus.jackson.type.JavaType)>($r1);

        return;
    }

    public org.codehaus.jackson.annotate.JsonTypeInfo$Id getMechanism()
    {
        org.codehaus.jackson.map.jsontype.impl.ClassNameIdResolver r0;
        org.codehaus.jackson.annotate.JsonTypeInfo$Id r1;

        r0 := @this: org.codehaus.jackson.map.jsontype.impl.ClassNameIdResolver;

        r1 = <org.codehaus.jackson.annotate.JsonTypeInfo$Id: org.codehaus.jackson.annotate.JsonTypeInfo$Id CLASS>;

        return r1;
    }

    public java.lang.String idFromValue(java.lang.Object)
    {
        org.codehaus.jackson.map.jsontype.impl.ClassNameIdResolver r0;
        java.lang.Object r1;
        java.lang.Class $r2, r3, $r4;
        boolean $z0;
        java.lang.String $r5, $r9;
        java.util.EnumSet r6;
        org.codehaus.jackson.type.JavaType $r7;
        java.util.EnumMap r8;
        int $i0;

        r0 := @this: org.codehaus.jackson.map.jsontype.impl.ClassNameIdResolver;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        r3 = $r2;

        $r4 = class "Ljava/lang/Enum;";

        $z0 = virtualinvoke $r4.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r2);

        if $z0 == 0 goto label1;

        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isEnum()>();

        if $z0 != 0 goto label1;

        r3 = virtualinvoke $r2.<java.lang.Class: java.lang.Class getSuperclass()>();

     label1:
        $r5 = virtualinvoke r3.<java.lang.Class: java.lang.String getName()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean startsWith(java.lang.String)>("java.util");

        if $z0 == 0 goto label5;

        $z0 = r1 instanceof java.util.EnumSet;

        if $z0 == 0 goto label2;

        r6 = (java.util.EnumSet) r1;

        $r2 = staticinvoke <org.codehaus.jackson.map.util.ClassUtil: java.lang.Class findEnumType(java.util.EnumSet)>(r6);

        $r7 = staticinvoke <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType collectionType(java.lang.Class,java.lang.Class)>(class "Ljava/util/EnumSet;", $r2);

        $r5 = virtualinvoke $r7.<org.codehaus.jackson.type.JavaType: java.lang.String toCanonical()>();

        return $r5;

     label2:
        $z0 = r1 instanceof java.util.EnumMap;

        if $z0 == 0 goto label3;

        r8 = (java.util.EnumMap) r1;

        $r2 = staticinvoke <org.codehaus.jackson.map.util.ClassUtil: java.lang.Class findEnumType(java.util.EnumMap)>(r8);

        $r7 = staticinvoke <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType mapType(java.lang.Class,java.lang.Class,java.lang.Class)>(class "Ljava/util/EnumMap;", $r2, class "Ljava/lang/Object;");

        $r5 = virtualinvoke $r7.<org.codehaus.jackson.type.JavaType: java.lang.String toCanonical()>();

        return $r5;

     label3:
        $r9 = virtualinvoke $r5.<java.lang.String: java.lang.String substring(int)>(9);

        $z0 = virtualinvoke $r9.<java.lang.String: boolean startsWith(java.lang.String)>(".Arrays$");

        if $z0 != 0 goto label4;

        $z0 = virtualinvoke $r9.<java.lang.String: boolean startsWith(java.lang.String)>(".Collections$");

        if $z0 == 0 goto label5;

     label4:
        $i0 = virtualinvoke $r5.<java.lang.String: int indexOf(java.lang.String)>("List");

        if $i0 < 0 goto label5;

        return "java.util.ArrayList";

     label5:
        return $r5;
    }

    public void registerSubtype(java.lang.Class, java.lang.String)
    {
        org.codehaus.jackson.map.jsontype.impl.ClassNameIdResolver r0;
        java.lang.Class r1;
        java.lang.String $r2;

        r0 := @this: org.codehaus.jackson.map.jsontype.impl.ClassNameIdResolver;

        r1 := @parameter0: java.lang.Class;

        $r2 := @parameter1: java.lang.String;

        return;
    }

    public org.codehaus.jackson.type.JavaType typeFromId(java.lang.String)
    {
        org.codehaus.jackson.map.jsontype.impl.ClassNameIdResolver r0;
        java.lang.String $r1;
        int $i0;
        org.codehaus.jackson.type.JavaType $r2;
        java.lang.Thread $r3;
        java.lang.ClassLoader $r4;
        java.lang.Class $r5;
        java.lang.ClassNotFoundException $r6;
        java.lang.IllegalArgumentException $r7;
        java.lang.StringBuilder $r8;
        java.lang.Exception $r9;

        r0 := @this: org.codehaus.jackson.map.jsontype.impl.ClassNameIdResolver;

        $r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke $r1.<java.lang.String: int indexOf(int)>(60);

        if $i0 <= 0 goto label1;

        $r2 = staticinvoke <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType fromCanonical(java.lang.String)>($r1);

        return $r2;

     label1:
        $r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r4 = virtualinvoke $r3.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

        $r5 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>($r1, 1, $r4);

     label2:
        $r2 = r0.<org.codehaus.jackson.map.jsontype.impl.ClassNameIdResolver: org.codehaus.jackson.type.JavaType _baseType>;

     label3:
        $r2 = staticinvoke <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType specialize(org.codehaus.jackson.type.JavaType,java.lang.Class)>($r2, $r5);

     label4:
        return $r2;

     label5:
        $r6 := @caughtexception;

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid type id \'");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' (for id type \'Id.class\'): no such class found");

        $r1 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r7;

     label6:
        $r9 := @caughtexception;

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid type id \'");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' (for id type \'Id.class\'): ");

        $r1 = virtualinvoke $r9.<java.lang.Exception: java.lang.String getMessage()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r1, $r9);

        throw $r7;

        catch java.lang.ClassNotFoundException from label1 to label2 with label5;
        catch java.lang.ClassNotFoundException from label3 to label4 with label5;
        catch java.lang.Exception from label1 to label4 with label6;
    }
}
