public final class org.codehaus.jackson.map.introspect.MemberKey extends java.lang.Object
{
    static final java.lang.Class[] NO_CLASSES;
    final java.lang.Class[] _argTypes;
    final java.lang.String _name;

    static void <clinit>()
    {
        java.lang.Class[] $r0;

        $r0 = newarray (java.lang.Class)[0];

        <org.codehaus.jackson.map.introspect.MemberKey: java.lang.Class[] NO_CLASSES> = $r0;

        return;
    }

    public void <init>(java.lang.String, java.lang.Class[])
    {
        org.codehaus.jackson.map.introspect.MemberKey r0;
        java.lang.String $r1;
        java.lang.Class[] r2;

        r0 := @this: org.codehaus.jackson.map.introspect.MemberKey;

        $r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Class[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.codehaus.jackson.map.introspect.MemberKey: java.lang.String _name> = $r1;

        if r2 != null goto label2;

        r2 = <org.codehaus.jackson.map.introspect.MemberKey: java.lang.Class[] NO_CLASSES>;

     label1:
        r0.<org.codehaus.jackson.map.introspect.MemberKey: java.lang.Class[] _argTypes> = r2;

        return;

     label2:
        goto label1;
    }

    public void <init>(java.lang.reflect.Constructor)
    {
        org.codehaus.jackson.map.introspect.MemberKey r0;
        java.lang.reflect.Constructor r1;
        java.lang.Class[] $r2;

        r0 := @this: org.codehaus.jackson.map.introspect.MemberKey;

        r1 := @parameter0: java.lang.reflect.Constructor;

        $r2 = virtualinvoke r1.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>();

        specialinvoke r0.<org.codehaus.jackson.map.introspect.MemberKey: void <init>(java.lang.String,java.lang.Class[])>("", $r2);

        return;
    }

    public void <init>(java.lang.reflect.Method)
    {
        org.codehaus.jackson.map.introspect.MemberKey r0;
        java.lang.reflect.Method $r1;
        java.lang.String $r2;
        java.lang.Class[] $r3;

        r0 := @this: org.codehaus.jackson.map.introspect.MemberKey;

        $r1 := @parameter0: java.lang.reflect.Method;

        $r2 = virtualinvoke $r1.<java.lang.reflect.Method: java.lang.String getName()>();

        $r3 = virtualinvoke $r1.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        specialinvoke r0.<org.codehaus.jackson.map.introspect.MemberKey: void <init>(java.lang.String,java.lang.Class[])>($r2, $r3);

        return;
    }

    public boolean equals(java.lang.Object)
    {
        org.codehaus.jackson.map.introspect.MemberKey r0, $r5;
        java.lang.Object $r1;
        int i0, $i1;
        java.lang.Class[] r2, $r8;
        java.lang.Class r3, r4;
        java.lang.String $r6, $r7;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.introspect.MemberKey;

        $r1 := @parameter0: java.lang.Object;

        if $r1 != r0 goto label1;

        return 1;

     label1:
        if $r1 != null goto label2;

        return 0;

     label2:
        r3 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        r4 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        if r3 == r4 goto label3;

        return 0;

     label3:
        $r5 = (org.codehaus.jackson.map.introspect.MemberKey) $r1;

        $r6 = r0.<org.codehaus.jackson.map.introspect.MemberKey: java.lang.String _name>;

        $r7 = $r5.<org.codehaus.jackson.map.introspect.MemberKey: java.lang.String _name>;

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z0 != 0 goto label4;

        return 0;

     label4:
        r2 = $r5.<org.codehaus.jackson.map.introspect.MemberKey: java.lang.Class[] _argTypes>;

        $r8 = r0.<org.codehaus.jackson.map.introspect.MemberKey: java.lang.Class[] _argTypes>;

        i0 = lengthof $r8;

        $i1 = lengthof r2;

        if $i1 == i0 goto label5;

        return 0;

     label5:
        $i1 = 0;

     label6:
        if $i1 >= i0 goto label9;

        r3 = r2[$i1];

        $r8 = r0.<org.codehaus.jackson.map.introspect.MemberKey: java.lang.Class[] _argTypes>;

        r4 = $r8[$i1];

        if r3 != r4 goto label8;

     label7:
        $i1 = $i1 + 1;

        goto label6;

     label8:
        $z0 = virtualinvoke r3.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r4);

        if $z0 != 0 goto label7;

        $z0 = virtualinvoke r4.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r3);

        if $z0 != 0 goto label7;

        return 0;

     label9:
        return 1;
    }

    public int hashCode()
    {
        org.codehaus.jackson.map.introspect.MemberKey r0;
        int $i0, $i1;
        java.lang.String $r1;
        java.lang.Class[] $r2;

        r0 := @this: org.codehaus.jackson.map.introspect.MemberKey;

        $r1 = r0.<org.codehaus.jackson.map.introspect.MemberKey: java.lang.String _name>;

        $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        $r2 = r0.<org.codehaus.jackson.map.introspect.MemberKey: java.lang.Class[] _argTypes>;

        $i1 = lengthof $r2;

        $i0 = $i0 + $i1;

        return $i0;
    }

    public java.lang.String toString()
    {
        org.codehaus.jackson.map.introspect.MemberKey r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;
        java.lang.Class[] $r3;
        int $i0;

        r0 := @this: org.codehaus.jackson.map.introspect.MemberKey;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.codehaus.jackson.map.introspect.MemberKey: java.lang.String _name>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r3 = r0.<org.codehaus.jackson.map.introspect.MemberKey: java.lang.Class[] _argTypes>;

        $i0 = lengthof $r3;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-args)");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }
}
