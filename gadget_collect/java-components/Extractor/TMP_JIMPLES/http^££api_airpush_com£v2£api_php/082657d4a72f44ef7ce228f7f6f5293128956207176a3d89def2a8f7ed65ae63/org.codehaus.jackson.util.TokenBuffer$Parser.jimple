public final class org.codehaus.jackson.util.TokenBuffer$Parser extends org.codehaus.jackson.impl.JsonParserMinimalBase
{
    protected transient org.codehaus.jackson.util.ByteArrayBuilder _byteBuilder;
    protected boolean _closed;
    protected org.codehaus.jackson.ObjectCodec _codec;
    protected org.codehaus.jackson.JsonLocation _location;
    protected org.codehaus.jackson.impl.JsonReadContext _parsingContext;
    protected org.codehaus.jackson.util.TokenBuffer$Segment _segment;
    protected int _segmentPtr;

    public void <init>(org.codehaus.jackson.util.TokenBuffer$Segment, org.codehaus.jackson.ObjectCodec)
    {
        org.codehaus.jackson.util.TokenBuffer$Parser r0;
        org.codehaus.jackson.util.TokenBuffer$Segment $r1;
        org.codehaus.jackson.ObjectCodec $r2;
        org.codehaus.jackson.impl.JsonReadContext $r3;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer$Parser;

        $r1 := @parameter0: org.codehaus.jackson.util.TokenBuffer$Segment;

        $r2 := @parameter1: org.codehaus.jackson.ObjectCodec;

        specialinvoke r0.<org.codehaus.jackson.impl.JsonParserMinimalBase: void <init>(int)>(0);

        r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.JsonLocation _location> = null;

        r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.util.TokenBuffer$Segment _segment> = $r1;

        r0.<org.codehaus.jackson.util.TokenBuffer$Parser: int _segmentPtr> = -1;

        r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.ObjectCodec _codec> = $r2;

        $r3 = staticinvoke <org.codehaus.jackson.impl.JsonReadContext: org.codehaus.jackson.impl.JsonReadContext createRootContext(int,int)>(-1, -1);

        r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.impl.JsonReadContext _parsingContext> = $r3;

        return;
    }

    protected final void _checkIsNumber() throws org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.util.TokenBuffer$Parser r0;
        org.codehaus.jackson.JsonToken $r1;
        boolean $z0;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        org.codehaus.jackson.JsonParseException $r4;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer$Parser;

        $r1 = r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.JsonToken _currToken>;

        if $r1 == null goto label1;

        $r1 = r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.JsonToken _currToken>;

        $z0 = virtualinvoke $r1.<org.codehaus.jackson.JsonToken: boolean isNumeric()>();

        if $z0 != 0 goto label2;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Current token (");

        $r1 = r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.JsonToken _currToken>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") not numeric, can not use numeric value accessors");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.JsonParseException _constructError(java.lang.String)>($r3);

        throw $r4;

     label2:
        return;
    }

    protected final java.lang.Object _currentObject()
    {
        org.codehaus.jackson.util.TokenBuffer$Parser r0;
        int $i0;
        java.lang.Object $r1;
        org.codehaus.jackson.util.TokenBuffer$Segment $r2;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer$Parser;

        $r2 = r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.util.TokenBuffer$Segment _segment>;

        $i0 = r0.<org.codehaus.jackson.util.TokenBuffer$Parser: int _segmentPtr>;

        $r1 = virtualinvoke $r2.<org.codehaus.jackson.util.TokenBuffer$Segment: java.lang.Object get(int)>($i0);

        return $r1;
    }

    protected void _decodeBase64(java.lang.String, org.codehaus.jackson.util.ByteArrayBuilder, org.codehaus.jackson.Base64Variant) throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.util.TokenBuffer$Parser r0;
        java.lang.String $r1, $r5;
        org.codehaus.jackson.util.ByteArrayBuilder $r2;
        org.codehaus.jackson.Base64Variant $r3;
        int i0, $i1, i2, $i4;
        char $c3, $c5;
        boolean $z0;
        java.lang.StringBuilder $r4;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer$Parser;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: org.codehaus.jackson.util.ByteArrayBuilder;

        $r3 := @parameter2: org.codehaus.jackson.Base64Variant;

        i0 = 0;

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

     label01:
        if i0 >= $i1 goto label16;

     label02:
        i2 = i0 + 1;

        $c3 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(i0);

        if i2 < $i1 goto label03;

        return;

     label03:
        if $c3 <= 32 goto label15;

        $i4 = virtualinvoke $r3.<org.codehaus.jackson.Base64Variant: int decodeBase64Char(char)>($c3);

        if $i4 >= 0 goto label04;

        virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer$Parser: void _reportInvalidBase64(org.codehaus.jackson.Base64Variant,char,int,java.lang.String)>($r3, $c3, 0, null);

     label04:
        if i2 < $i1 goto label05;

        virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer$Parser: void _reportBase64EOF()>();

     label05:
        i0 = i2 + 1;

        $c3 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(i2);

        i2 = virtualinvoke $r3.<org.codehaus.jackson.Base64Variant: int decodeBase64Char(char)>($c3);

        if i2 >= 0 goto label06;

        virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer$Parser: void _reportInvalidBase64(org.codehaus.jackson.Base64Variant,char,int,java.lang.String)>($r3, $c3, 1, null);

     label06:
        $i4 = $i4 << 6;

        $i4 = $i4 | i2;

        if i0 < $i1 goto label07;

        virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer$Parser: void _reportBase64EOF()>();

     label07:
        i2 = i0 + 1;

        $c3 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(i0);

        i0 = virtualinvoke $r3.<org.codehaus.jackson.Base64Variant: int decodeBase64Char(char)>($c3);

        if i0 >= 0 goto label11;

        if i0 == -2 goto label08;

        virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer$Parser: void _reportInvalidBase64(org.codehaus.jackson.Base64Variant,char,int,java.lang.String)>($r3, $c3, 2, null);

     label08:
        if i2 < $i1 goto label09;

        virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer$Parser: void _reportBase64EOF()>();

     label09:
        i0 = i2 + 1;

        $c3 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(i2);

        $z0 = virtualinvoke $r3.<org.codehaus.jackson.Base64Variant: boolean usesPaddingChar(char)>($c3);

        if $z0 != 0 goto label10;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected padding character \'");

        $c5 = virtualinvoke $r3.<org.codehaus.jackson.Base64Variant: char getPaddingChar()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c5);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer$Parser: void _reportInvalidBase64(org.codehaus.jackson.Base64Variant,char,int,java.lang.String)>($r3, $c3, 3, $r5);

     label10:
        i2 = $i4 >> 4;

        virtualinvoke $r2.<org.codehaus.jackson.util.ByteArrayBuilder: void append(int)>(i2);

        goto label01;

     label11:
        $i4 = $i4 << 6;

        $i4 = $i4 | i0;

        if i2 < $i1 goto label12;

        virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer$Parser: void _reportBase64EOF()>();

     label12:
        i0 = i2 + 1;

        $c3 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(i2);

        i2 = virtualinvoke $r3.<org.codehaus.jackson.Base64Variant: int decodeBase64Char(char)>($c3);

        if i2 >= 0 goto label14;

        if i2 == -2 goto label13;

        virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer$Parser: void _reportInvalidBase64(org.codehaus.jackson.Base64Variant,char,int,java.lang.String)>($r3, $c3, 3, null);

     label13:
        i2 = $i4 >> 2;

        virtualinvoke $r2.<org.codehaus.jackson.util.ByteArrayBuilder: void appendTwoBytes(int)>(i2);

        goto label01;

     label14:
        $i4 = $i4 << 6;

        i2 = $i4 | i2;

        virtualinvoke $r2.<org.codehaus.jackson.util.ByteArrayBuilder: void appendThreeBytes(int)>(i2);

        goto label01;

     label15:
        i0 = i2;

        goto label02;

     label16:
        return;
    }

    protected void _handleEOF() throws org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.util.TokenBuffer$Parser r0;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer$Parser;

        virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer$Parser: void _throwInternal()>();

        return;
    }

    protected void _reportBase64EOF() throws org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.util.TokenBuffer$Parser r0;
        org.codehaus.jackson.JsonParseException $r1;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer$Parser;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.JsonParseException _constructError(java.lang.String)>("Unexpected end-of-String in base64 content");

        throw $r1;
    }

    protected void _reportInvalidBase64(org.codehaus.jackson.Base64Variant, char, int, java.lang.String) throws org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.util.TokenBuffer$Parser r0;
        org.codehaus.jackson.Base64Variant $r1;
        char $c0;
        int $i1;
        java.lang.String $r2, $r4;
        java.lang.StringBuilder $r3;
        org.codehaus.jackson.JsonParseException $r5;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer$Parser;

        $r1 := @parameter0: org.codehaus.jackson.Base64Variant;

        $c0 := @parameter1: char;

        $i1 := @parameter2: int;

        $r2 := @parameter3: java.lang.String;

        if $c0 > 32 goto label3;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal white space character (code 0x");

        $r4 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($c0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") as character #");

        $i1 = $i1 + 1;

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" of 4-char base64 unit: can only used between units");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        if $r2 == null goto label2;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        $r5 = virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.JsonParseException _constructError(java.lang.String)>($r4);

        throw $r5;

     label3:
        $z0 = virtualinvoke $r1.<org.codehaus.jackson.Base64Variant: boolean usesPaddingChar(char)>($c0);

        if $z0 == 0 goto label4;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected padding character (\'");

        $c0 = virtualinvoke $r1.<org.codehaus.jackson.Base64Variant: char getPaddingChar()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\') as character #");

        $i1 = $i1 + 1;

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" of 4-char base64 unit: padding only legal as 3rd or 4th character");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label1;

     label4:
        $z0 = staticinvoke <java.lang.Character: boolean isDefined(char)>($c0);

        if $z0 == 0 goto label5;

        $z0 = staticinvoke <java.lang.Character: boolean isISOControl(char)>($c0);

        if $z0 == 0 goto label6;

     label5:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal character (code 0x");

        $r4 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($c0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") in base64 content");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label1;

     label6:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal character \'");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' (code 0x");

        $r4 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($c0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") in base64 content");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label1;
    }

    public void close() throws java.io.IOException
    {
        org.codehaus.jackson.util.TokenBuffer$Parser r0;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer$Parser;

        $z0 = r0.<org.codehaus.jackson.util.TokenBuffer$Parser: boolean _closed>;

        if $z0 != 0 goto label1;

        r0.<org.codehaus.jackson.util.TokenBuffer$Parser: boolean _closed> = 1;

     label1:
        return;
    }

    public java.math.BigInteger getBigIntegerValue() throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.util.TokenBuffer$Parser r0;
        java.lang.Number $r1;
        boolean $z0;
        java.math.BigInteger r2;
        int[] $r3;
        org.codehaus.jackson.JsonParser$NumberType $r4;
        int $i0;
        long $l1;
        java.math.BigDecimal r5;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer$Parser;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer$Parser: java.lang.Number getNumberValue()>();

        $z0 = $r1 instanceof java.math.BigInteger;

        if $z0 == 0 goto label1;

        r2 = (java.math.BigInteger) $r1;

        return r2;

     label1:
        $r3 = <org.codehaus.jackson.util.TokenBuffer$1: int[] $SwitchMap$org$codehaus$jackson$JsonParser$NumberType>;

        $r4 = virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.JsonParser$NumberType getNumberType()>();

        $i0 = virtualinvoke $r4.<org.codehaus.jackson.JsonParser$NumberType: int ordinal()>();

        $i0 = $r3[$i0];

        lookupswitch($i0)
        {
            case 3: goto label3;
            default: goto label2;
        };

     label2:
        $l1 = virtualinvoke $r1.<java.lang.Number: long longValue()>();

        r2 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l1);

        return r2;

     label3:
        r5 = (java.math.BigDecimal) $r1;

        r2 = virtualinvoke r5.<java.math.BigDecimal: java.math.BigInteger toBigInteger()>();

        return r2;
    }

    public byte[] getBinaryValue(org.codehaus.jackson.Base64Variant) throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.util.TokenBuffer$Parser r0;
        org.codehaus.jackson.Base64Variant $r1;
        org.codehaus.jackson.JsonToken $r2, $r3;
        java.lang.Object $r4;
        boolean $z0;
        byte[] r5;
        java.lang.StringBuilder $r6;
        java.lang.String $r7;
        org.codehaus.jackson.JsonParseException $r8;
        org.codehaus.jackson.util.ByteArrayBuilder r9;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer$Parser;

        $r1 := @parameter0: org.codehaus.jackson.Base64Variant;

        $r2 = r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.JsonToken _currToken>;

        $r3 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_EMBEDDED_OBJECT>;

        if $r2 != $r3 goto label1;

        $r4 = virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer$Parser: java.lang.Object _currentObject()>();

        $z0 = $r4 instanceof byte[];

        if $z0 == 0 goto label1;

        r5 = (byte[]) $r4;

        return r5;

     label1:
        $r2 = r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.JsonToken _currToken>;

        $r3 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_STRING>;

        if $r2 == $r3 goto label2;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Current token (");

        $r2 = r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.JsonToken _currToken>;

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") not VALUE_STRING (or VALUE_EMBEDDED_OBJECT with byte[]), can not access as binary");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.JsonParseException _constructError(java.lang.String)>($r7);

        throw $r8;

     label2:
        $r7 = virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer$Parser: java.lang.String getText()>();

        if $r7 != null goto label3;

        return null;

     label3:
        r9 = r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.util.ByteArrayBuilder _byteBuilder>;

        if r9 != null goto label4;

        r9 = new org.codehaus.jackson.util.ByteArrayBuilder;

        specialinvoke r9.<org.codehaus.jackson.util.ByteArrayBuilder: void <init>(int)>(100);

        r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.util.ByteArrayBuilder _byteBuilder> = r9;

     label4:
        virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer$Parser: void _decodeBase64(java.lang.String,org.codehaus.jackson.util.ByteArrayBuilder,org.codehaus.jackson.Base64Variant)>($r7, r9, $r1);

        r5 = virtualinvoke r9.<org.codehaus.jackson.util.ByteArrayBuilder: byte[] toByteArray()>();

        return r5;
    }

    public org.codehaus.jackson.ObjectCodec getCodec()
    {
        org.codehaus.jackson.util.TokenBuffer$Parser r0;
        org.codehaus.jackson.ObjectCodec r1;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer$Parser;

        r1 = r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.ObjectCodec _codec>;

        return r1;
    }

    public org.codehaus.jackson.JsonLocation getCurrentLocation()
    {
        org.codehaus.jackson.util.TokenBuffer$Parser r0;
        org.codehaus.jackson.JsonLocation $r1;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer$Parser;

        $r1 = r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.JsonLocation _location>;

        if $r1 != null goto label1;

        $r1 = <org.codehaus.jackson.JsonLocation: org.codehaus.jackson.JsonLocation NA>;

        return $r1;

     label1:
        $r1 = r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.JsonLocation _location>;

        return $r1;
    }

    public java.lang.String getCurrentName()
    {
        org.codehaus.jackson.util.TokenBuffer$Parser r0;
        java.lang.String $r1;
        org.codehaus.jackson.impl.JsonReadContext $r2;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer$Parser;

        $r2 = r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.impl.JsonReadContext _parsingContext>;

        $r1 = virtualinvoke $r2.<org.codehaus.jackson.impl.JsonReadContext: java.lang.String getCurrentName()>();

        return $r1;
    }

    public java.math.BigDecimal getDecimalValue() throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.util.TokenBuffer$Parser r0;
        java.lang.Number $r1;
        boolean $z0;
        java.math.BigDecimal r2;
        int[] $r3;
        org.codehaus.jackson.JsonParser$NumberType $r4;
        int $i0;
        double $d0;
        long $l1;
        java.math.BigInteger r5;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer$Parser;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer$Parser: java.lang.Number getNumberValue()>();

        $z0 = $r1 instanceof java.math.BigDecimal;

        if $z0 == 0 goto label1;

        r2 = (java.math.BigDecimal) $r1;

        return r2;

     label1:
        $r3 = <org.codehaus.jackson.util.TokenBuffer$1: int[] $SwitchMap$org$codehaus$jackson$JsonParser$NumberType>;

        $r4 = virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.JsonParser$NumberType getNumberType()>();

        $i0 = virtualinvoke $r4.<org.codehaus.jackson.JsonParser$NumberType: int ordinal()>();

        $i0 = $r3[$i0];

        lookupswitch($i0)
        {
            case 1: goto label3;
            case 2: goto label4;
            case 3: goto label2;
            case 4: goto label2;
            case 5: goto label3;
            default: goto label2;
        };

     label2:
        $d0 = virtualinvoke $r1.<java.lang.Number: double doubleValue()>();

        r2 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(double)>($d0);

        return r2;

     label3:
        $l1 = virtualinvoke $r1.<java.lang.Number: long longValue()>();

        r2 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>($l1);

        return r2;

     label4:
        r2 = new java.math.BigDecimal;

        r5 = (java.math.BigInteger) $r1;

        specialinvoke r2.<java.math.BigDecimal: void <init>(java.math.BigInteger)>(r5);

        return r2;
    }

    public double getDoubleValue() throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.util.TokenBuffer$Parser r0;
        java.lang.Number $r1;
        double $d0;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer$Parser;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer$Parser: java.lang.Number getNumberValue()>();

        $d0 = virtualinvoke $r1.<java.lang.Number: double doubleValue()>();

        return $d0;
    }

    public java.lang.Object getEmbeddedObject()
    {
        org.codehaus.jackson.util.TokenBuffer$Parser r0;
        org.codehaus.jackson.JsonToken $r1, $r3;
        java.lang.Object $r2;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer$Parser;

        $r3 = r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.JsonToken _currToken>;

        $r1 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_EMBEDDED_OBJECT>;

        if $r3 != $r1 goto label1;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer$Parser: java.lang.Object _currentObject()>();

        return $r2;

     label1:
        return null;
    }

    public float getFloatValue() throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.util.TokenBuffer$Parser r0;
        java.lang.Number $r1;
        float $f0;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer$Parser;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer$Parser: java.lang.Number getNumberValue()>();

        $f0 = virtualinvoke $r1.<java.lang.Number: float floatValue()>();

        return $f0;
    }

    public int getIntValue() throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.JsonToken $r0, $r2;
        org.codehaus.jackson.util.TokenBuffer$Parser r1;
        java.lang.Object $r3;
        java.lang.Number r4;
        int $i0;

        r1 := @this: org.codehaus.jackson.util.TokenBuffer$Parser;

        $r2 = r1.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.JsonToken _currToken>;

        $r0 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NUMBER_INT>;

        if $r2 != $r0 goto label1;

        $r3 = virtualinvoke r1.<org.codehaus.jackson.util.TokenBuffer$Parser: java.lang.Object _currentObject()>();

        r4 = (java.lang.Number) $r3;

        $i0 = virtualinvoke r4.<java.lang.Number: int intValue()>();

        return $i0;

     label1:
        r4 = virtualinvoke r1.<org.codehaus.jackson.util.TokenBuffer$Parser: java.lang.Number getNumberValue()>();

        $i0 = virtualinvoke r4.<java.lang.Number: int intValue()>();

        return $i0;
    }

    public long getLongValue() throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.util.TokenBuffer$Parser r0;
        java.lang.Number $r1;
        long $l0;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer$Parser;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer$Parser: java.lang.Number getNumberValue()>();

        $l0 = virtualinvoke $r1.<java.lang.Number: long longValue()>();

        return $l0;
    }

    public org.codehaus.jackson.JsonParser$NumberType getNumberType() throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.util.TokenBuffer$Parser r0;
        java.lang.Number $r1;
        boolean $z0;
        org.codehaus.jackson.JsonParser$NumberType r2;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer$Parser;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer$Parser: java.lang.Number getNumberValue()>();

        $z0 = $r1 instanceof java.lang.Integer;

        if $z0 == 0 goto label1;

        r2 = <org.codehaus.jackson.JsonParser$NumberType: org.codehaus.jackson.JsonParser$NumberType INT>;

        return r2;

     label1:
        $z0 = $r1 instanceof java.lang.Long;

        if $z0 == 0 goto label2;

        r2 = <org.codehaus.jackson.JsonParser$NumberType: org.codehaus.jackson.JsonParser$NumberType LONG>;

        return r2;

     label2:
        $z0 = $r1 instanceof java.lang.Double;

        if $z0 == 0 goto label3;

        r2 = <org.codehaus.jackson.JsonParser$NumberType: org.codehaus.jackson.JsonParser$NumberType DOUBLE>;

        return r2;

     label3:
        $z0 = $r1 instanceof java.math.BigDecimal;

        if $z0 == 0 goto label4;

        r2 = <org.codehaus.jackson.JsonParser$NumberType: org.codehaus.jackson.JsonParser$NumberType BIG_DECIMAL>;

        return r2;

     label4:
        $z0 = $r1 instanceof java.lang.Float;

        if $z0 == 0 goto label5;

        r2 = <org.codehaus.jackson.JsonParser$NumberType: org.codehaus.jackson.JsonParser$NumberType FLOAT>;

        return r2;

     label5:
        $z0 = $r1 instanceof java.math.BigInteger;

        if $z0 == 0 goto label6;

        r2 = <org.codehaus.jackson.JsonParser$NumberType: org.codehaus.jackson.JsonParser$NumberType BIG_INTEGER>;

        return r2;

     label6:
        return null;
    }

    public final java.lang.Number getNumberValue() throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        java.lang.Object $r0;
        org.codehaus.jackson.util.TokenBuffer$Parser r1;
        java.lang.Number r2;

        r1 := @this: org.codehaus.jackson.util.TokenBuffer$Parser;

        virtualinvoke r1.<org.codehaus.jackson.util.TokenBuffer$Parser: void _checkIsNumber()>();

        $r0 = virtualinvoke r1.<org.codehaus.jackson.util.TokenBuffer$Parser: java.lang.Object _currentObject()>();

        r2 = (java.lang.Number) $r0;

        return r2;
    }

    public org.codehaus.jackson.JsonStreamContext getParsingContext()
    {
        org.codehaus.jackson.util.TokenBuffer$Parser r0;
        org.codehaus.jackson.impl.JsonReadContext r1;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer$Parser;

        r1 = r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.impl.JsonReadContext _parsingContext>;

        return r1;
    }

    public java.lang.String getText()
    {
        org.codehaus.jackson.util.TokenBuffer$Parser r0;
        org.codehaus.jackson.JsonToken $r1, $r2;
        java.lang.Object $r3;
        boolean $z0;
        java.lang.String r4;
        int[] $r5;
        int $i0;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer$Parser;

        $r1 = r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.JsonToken _currToken>;

        $r2 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_STRING>;

        if $r1 == $r2 goto label1;

        $r1 = r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.JsonToken _currToken>;

        $r2 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken FIELD_NAME>;

        if $r1 != $r2 goto label4;

     label1:
        $r3 = virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer$Parser: java.lang.Object _currentObject()>();

        $z0 = $r3 instanceof java.lang.String;

        if $z0 == 0 goto label2;

        r4 = (java.lang.String) $r3;

        return r4;

     label2:
        if $r3 != null goto label3;

        return null;

     label3:
        r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        return r4;

     label4:
        $r1 = r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.JsonToken _currToken>;

        if $r1 != null goto label5;

        return null;

     label5:
        $r5 = <org.codehaus.jackson.util.TokenBuffer$1: int[] $SwitchMap$org$codehaus$jackson$JsonToken>;

        $r1 = r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.JsonToken _currToken>;

        $i0 = virtualinvoke $r1.<org.codehaus.jackson.JsonToken: int ordinal()>();

        $i0 = $r5[$i0];

        lookupswitch($i0)
        {
            case 7: goto label7;
            case 8: goto label7;
            default: goto label6;
        };

     label6:
        $r1 = r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.JsonToken _currToken>;

        r4 = virtualinvoke $r1.<org.codehaus.jackson.JsonToken: java.lang.String asString()>();

        return r4;

     label7:
        $r3 = virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer$Parser: java.lang.Object _currentObject()>();

        if $r3 != null goto label8;

        return null;

     label8:
        r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        return r4;
    }

    public char[] getTextCharacters()
    {
        org.codehaus.jackson.util.TokenBuffer$Parser r0;
        java.lang.String $r1;
        char[] $r2;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer$Parser;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer$Parser: java.lang.String getText()>();

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = virtualinvoke $r1.<java.lang.String: char[] toCharArray()>();

        return $r2;
    }

    public int getTextLength()
    {
        org.codehaus.jackson.util.TokenBuffer$Parser r0;
        java.lang.String $r1;
        int $i0;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer$Parser;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer$Parser: java.lang.String getText()>();

        if $r1 != null goto label1;

        return 0;

     label1:
        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        return $i0;
    }

    public int getTextOffset()
    {
        org.codehaus.jackson.util.TokenBuffer$Parser r0;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer$Parser;

        return 0;
    }

    public org.codehaus.jackson.JsonLocation getTokenLocation()
    {
        org.codehaus.jackson.util.TokenBuffer$Parser r0;
        org.codehaus.jackson.JsonLocation $r1;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer$Parser;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.JsonLocation getCurrentLocation()>();

        return $r1;
    }

    public boolean hasTextCharacters()
    {
        org.codehaus.jackson.util.TokenBuffer$Parser r0;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer$Parser;

        return 0;
    }

    public boolean isClosed()
    {
        org.codehaus.jackson.util.TokenBuffer$Parser r0;
        boolean z0;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer$Parser;

        z0 = r0.<org.codehaus.jackson.util.TokenBuffer$Parser: boolean _closed>;

        return z0;
    }

    public org.codehaus.jackson.JsonToken nextToken() throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.util.TokenBuffer$Parser r0;
        boolean $z0;
        org.codehaus.jackson.util.TokenBuffer$Segment $r1;
        int $i0;
        org.codehaus.jackson.JsonToken $r2, $r3;
        java.lang.Object $r4;
        java.lang.String r5;
        org.codehaus.jackson.impl.JsonReadContext $r6;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer$Parser;

        $z0 = r0.<org.codehaus.jackson.util.TokenBuffer$Parser: boolean _closed>;

        if $z0 != 0 goto label01;

        $r1 = r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.util.TokenBuffer$Segment _segment>;

        if $r1 != null goto label02;

     label01:
        return null;

     label02:
        $i0 = r0.<org.codehaus.jackson.util.TokenBuffer$Parser: int _segmentPtr>;

        $i0 = $i0 + 1;

        r0.<org.codehaus.jackson.util.TokenBuffer$Parser: int _segmentPtr> = $i0;

        if $i0 < 16 goto label03;

        r0.<org.codehaus.jackson.util.TokenBuffer$Parser: int _segmentPtr> = 0;

        $r1 = r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.util.TokenBuffer$Segment _segment>;

        $r1 = virtualinvoke $r1.<org.codehaus.jackson.util.TokenBuffer$Segment: org.codehaus.jackson.util.TokenBuffer$Segment next()>();

        r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.util.TokenBuffer$Segment _segment> = $r1;

        $r1 = r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.util.TokenBuffer$Segment _segment>;

        if $r1 != null goto label03;

        return null;

     label03:
        $r1 = r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.util.TokenBuffer$Segment _segment>;

        $i0 = r0.<org.codehaus.jackson.util.TokenBuffer$Parser: int _segmentPtr>;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.util.TokenBuffer$Segment: org.codehaus.jackson.JsonToken type(int)>($i0);

        r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.JsonToken _currToken> = $r2;

        $r2 = r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.JsonToken _currToken>;

        $r3 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken FIELD_NAME>;

        if $r2 != $r3 goto label07;

        $r4 = virtualinvoke r0.<org.codehaus.jackson.util.TokenBuffer$Parser: java.lang.Object _currentObject()>();

        $z0 = $r4 instanceof java.lang.String;

        if $z0 == 0 goto label06;

        r5 = (java.lang.String) $r4;

     label04:
        $r6 = r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.impl.JsonReadContext _parsingContext>;

        virtualinvoke $r6.<org.codehaus.jackson.impl.JsonReadContext: void setCurrentName(java.lang.String)>(r5);

     label05:
        $r2 = r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.JsonToken _currToken>;

        return $r2;

     label06:
        r5 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>();

        goto label04;

     label07:
        $r2 = r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.JsonToken _currToken>;

        $r3 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken START_OBJECT>;

        if $r2 != $r3 goto label08;

        $r6 = r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.impl.JsonReadContext _parsingContext>;

        $r6 = virtualinvoke $r6.<org.codehaus.jackson.impl.JsonReadContext: org.codehaus.jackson.impl.JsonReadContext createChildObjectContext(int,int)>(-1, -1);

        r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.impl.JsonReadContext _parsingContext> = $r6;

        goto label05;

     label08:
        $r2 = r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.JsonToken _currToken>;

        $r3 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken START_ARRAY>;

        if $r2 != $r3 goto label09;

        $r6 = r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.impl.JsonReadContext _parsingContext>;

        $r6 = virtualinvoke $r6.<org.codehaus.jackson.impl.JsonReadContext: org.codehaus.jackson.impl.JsonReadContext createChildArrayContext(int,int)>(-1, -1);

        r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.impl.JsonReadContext _parsingContext> = $r6;

        goto label05;

     label09:
        $r2 = r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.JsonToken _currToken>;

        $r3 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken END_OBJECT>;

        if $r2 == $r3 goto label10;

        $r2 = r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.JsonToken _currToken>;

        $r3 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken END_ARRAY>;

        if $r2 != $r3 goto label05;

     label10:
        $r6 = r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.impl.JsonReadContext _parsingContext>;

        $r6 = virtualinvoke $r6.<org.codehaus.jackson.impl.JsonReadContext: org.codehaus.jackson.impl.JsonReadContext getParent()>();

        r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.impl.JsonReadContext _parsingContext> = $r6;

        $r6 = r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.impl.JsonReadContext _parsingContext>;

        if $r6 != null goto label05;

        $r6 = staticinvoke <org.codehaus.jackson.impl.JsonReadContext: org.codehaus.jackson.impl.JsonReadContext createRootContext(int,int)>(-1, -1);

        r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.impl.JsonReadContext _parsingContext> = $r6;

        goto label05;
    }

    public org.codehaus.jackson.JsonToken peekNextToken() throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.util.TokenBuffer$Parser r0;
        boolean $z0;
        org.codehaus.jackson.util.TokenBuffer$Segment r1;
        int $i0;
        org.codehaus.jackson.JsonToken $r2;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer$Parser;

        $z0 = r0.<org.codehaus.jackson.util.TokenBuffer$Parser: boolean _closed>;

        if $z0 == 0 goto label1;

        return null;

     label1:
        r1 = r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.util.TokenBuffer$Segment _segment>;

        $i0 = r0.<org.codehaus.jackson.util.TokenBuffer$Parser: int _segmentPtr>;

        $i0 = $i0 + 1;

        if $i0 < 16 goto label2;

        $i0 = 0;

        if r1 != null goto label3;

        r1 = null;

     label2:
        if r1 != null goto label4;

        return null;

     label3:
        r1 = virtualinvoke r1.<org.codehaus.jackson.util.TokenBuffer$Segment: org.codehaus.jackson.util.TokenBuffer$Segment next()>();

        goto label2;

     label4:
        $r2 = virtualinvoke r1.<org.codehaus.jackson.util.TokenBuffer$Segment: org.codehaus.jackson.JsonToken type(int)>($i0);

        return $r2;
    }

    public void setCodec(org.codehaus.jackson.ObjectCodec)
    {
        org.codehaus.jackson.util.TokenBuffer$Parser r0;
        org.codehaus.jackson.ObjectCodec $r1;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer$Parser;

        $r1 := @parameter0: org.codehaus.jackson.ObjectCodec;

        r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.ObjectCodec _codec> = $r1;

        return;
    }

    public void setLocation(org.codehaus.jackson.JsonLocation)
    {
        org.codehaus.jackson.util.TokenBuffer$Parser r0;
        org.codehaus.jackson.JsonLocation $r1;

        r0 := @this: org.codehaus.jackson.util.TokenBuffer$Parser;

        $r1 := @parameter0: org.codehaus.jackson.JsonLocation;

        r0.<org.codehaus.jackson.util.TokenBuffer$Parser: org.codehaus.jackson.JsonLocation _location> = $r1;

        return;
    }
}
