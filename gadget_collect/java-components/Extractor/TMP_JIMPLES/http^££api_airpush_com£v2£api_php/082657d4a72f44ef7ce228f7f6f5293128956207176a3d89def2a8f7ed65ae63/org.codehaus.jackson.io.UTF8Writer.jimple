public final class org.codehaus.jackson.io.UTF8Writer extends java.io.Writer
{
    static final int SURR1_FIRST;
    static final int SURR1_LAST;
    static final int SURR2_FIRST;
    static final int SURR2_LAST;
    protected final org.codehaus.jackson.io.IOContext _context;
    java.io.OutputStream _out;
    byte[] _outBuffer;
    final int _outBufferEnd;
    int _outPtr;
    int _surrogate;

    public void <init>(org.codehaus.jackson.io.IOContext, java.io.OutputStream)
    {
        org.codehaus.jackson.io.UTF8Writer r0;
        org.codehaus.jackson.io.IOContext $r1;
        java.io.OutputStream $r2;
        byte[] $r3;
        int $i0;

        r0 := @this: org.codehaus.jackson.io.UTF8Writer;

        $r1 := @parameter0: org.codehaus.jackson.io.IOContext;

        $r2 := @parameter1: java.io.OutputStream;

        specialinvoke r0.<java.io.Writer: void <init>()>();

        r0.<org.codehaus.jackson.io.UTF8Writer: int _surrogate> = 0;

        r0.<org.codehaus.jackson.io.UTF8Writer: org.codehaus.jackson.io.IOContext _context> = $r1;

        r0.<org.codehaus.jackson.io.UTF8Writer: java.io.OutputStream _out> = $r2;

        $r3 = virtualinvoke $r1.<org.codehaus.jackson.io.IOContext: byte[] allocWriteEncodingBuffer()>();

        r0.<org.codehaus.jackson.io.UTF8Writer: byte[] _outBuffer> = $r3;

        $r3 = r0.<org.codehaus.jackson.io.UTF8Writer: byte[] _outBuffer>;

        $i0 = lengthof $r3;

        $i0 = $i0 - 4;

        r0.<org.codehaus.jackson.io.UTF8Writer: int _outBufferEnd> = $i0;

        r0.<org.codehaus.jackson.io.UTF8Writer: int _outPtr> = 0;

        return;
    }

    private int convertSurrogate(int) throws java.io.IOException
    {
        org.codehaus.jackson.io.UTF8Writer r0;
        int $i0, i1;
        java.io.IOException $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;

        r0 := @this: org.codehaus.jackson.io.UTF8Writer;

        $i0 := @parameter0: int;

        i1 = r0.<org.codehaus.jackson.io.UTF8Writer: int _surrogate>;

        r0.<org.codehaus.jackson.io.UTF8Writer: int _surrogate> = 0;

        if $i0 < 56320 goto label1;

        if $i0 <= 57343 goto label2;

     label1:
        $r1 = new java.io.IOException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Broken surrogate pair: first char 0x");

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", second 0x");

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; illegal combination");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>($r3);

        throw $r1;

     label2:
        i1 = i1 - 55296;

        i1 = i1 << 10;

        i1 = 65536 + i1;

        $i0 = $i0 - 56320;

        $i0 = i1 + $i0;

        return $i0;
    }

    private void throwIllegal(int) throws java.io.IOException
    {
        org.codehaus.jackson.io.UTF8Writer r0;
        int $i0;
        java.io.IOException $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;

        r0 := @this: org.codehaus.jackson.io.UTF8Writer;

        $i0 := @parameter0: int;

        if $i0 <= 1114111 goto label1;

        $r1 = new java.io.IOException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal character point (0x");

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") to output; max is 0x10FFFF as per RFC 4627");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>($r3);

        throw $r1;

     label1:
        if $i0 < 55296 goto label3;

        if $i0 > 56319 goto label2;

        $r1 = new java.io.IOException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unmatched first part of surrogate pair (0x");

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>($r3);

        throw $r1;

     label2:
        $r1 = new java.io.IOException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unmatched second part of surrogate pair (0x");

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>($r3);

        throw $r1;

     label3:
        $r1 = new java.io.IOException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal character point (0x");

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") to output");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>($r3);

        throw $r1;
    }

    public java.io.Writer append(char) throws java.io.IOException
    {
        org.codehaus.jackson.io.UTF8Writer r0;
        char $c0;

        r0 := @this: org.codehaus.jackson.io.UTF8Writer;

        $c0 := @parameter0: char;

        virtualinvoke r0.<org.codehaus.jackson.io.UTF8Writer: void write(int)>($c0);

        return r0;
    }

    public volatile java.lang.Appendable append(char) throws java.io.IOException
    {
        org.codehaus.jackson.io.UTF8Writer r0;
        char $c0;
        java.io.Writer $r1;

        r0 := @this: org.codehaus.jackson.io.UTF8Writer;

        $c0 := @parameter0: char;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.io.UTF8Writer: java.io.Writer append(char)>($c0);

        return $r1;
    }

    public void close() throws java.io.IOException
    {
        org.codehaus.jackson.io.UTF8Writer r0;
        byte[] r1;
        int i0;
        java.io.OutputStream r2;
        org.codehaus.jackson.io.IOContext $r3;

        r0 := @this: org.codehaus.jackson.io.UTF8Writer;

        r2 = r0.<org.codehaus.jackson.io.UTF8Writer: java.io.OutputStream _out>;

        if r2 == null goto label3;

        i0 = r0.<org.codehaus.jackson.io.UTF8Writer: int _outPtr>;

        if i0 <= 0 goto label1;

        r2 = r0.<org.codehaus.jackson.io.UTF8Writer: java.io.OutputStream _out>;

        r1 = r0.<org.codehaus.jackson.io.UTF8Writer: byte[] _outBuffer>;

        i0 = r0.<org.codehaus.jackson.io.UTF8Writer: int _outPtr>;

        virtualinvoke r2.<java.io.OutputStream: void write(byte[],int,int)>(r1, 0, i0);

        r0.<org.codehaus.jackson.io.UTF8Writer: int _outPtr> = 0;

     label1:
        r2 = r0.<org.codehaus.jackson.io.UTF8Writer: java.io.OutputStream _out>;

        r0.<org.codehaus.jackson.io.UTF8Writer: java.io.OutputStream _out> = null;

        r1 = r0.<org.codehaus.jackson.io.UTF8Writer: byte[] _outBuffer>;

        if r1 == null goto label2;

        r0.<org.codehaus.jackson.io.UTF8Writer: byte[] _outBuffer> = null;

        $r3 = r0.<org.codehaus.jackson.io.UTF8Writer: org.codehaus.jackson.io.IOContext _context>;

        virtualinvoke $r3.<org.codehaus.jackson.io.IOContext: void releaseWriteEncodingBuffer(byte[])>(r1);

     label2:
        virtualinvoke r2.<java.io.OutputStream: void close()>();

        i0 = r0.<org.codehaus.jackson.io.UTF8Writer: int _surrogate>;

        r0.<org.codehaus.jackson.io.UTF8Writer: int _surrogate> = 0;

        if i0 <= 0 goto label3;

        specialinvoke r0.<org.codehaus.jackson.io.UTF8Writer: void throwIllegal(int)>(i0);

     label3:
        return;
    }

    public void flush() throws java.io.IOException
    {
        org.codehaus.jackson.io.UTF8Writer r0;
        byte[] $r1;
        int $i0;
        java.io.OutputStream $r2;

        r0 := @this: org.codehaus.jackson.io.UTF8Writer;

        $i0 = r0.<org.codehaus.jackson.io.UTF8Writer: int _outPtr>;

        if $i0 <= 0 goto label1;

        $r2 = r0.<org.codehaus.jackson.io.UTF8Writer: java.io.OutputStream _out>;

        $r1 = r0.<org.codehaus.jackson.io.UTF8Writer: byte[] _outBuffer>;

        $i0 = r0.<org.codehaus.jackson.io.UTF8Writer: int _outPtr>;

        virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>($r1, 0, $i0);

        r0.<org.codehaus.jackson.io.UTF8Writer: int _outPtr> = 0;

     label1:
        $r2 = r0.<org.codehaus.jackson.io.UTF8Writer: java.io.OutputStream _out>;

        virtualinvoke $r2.<java.io.OutputStream: void flush()>();

        return;
    }

    public void write(int) throws java.io.IOException
    {
        org.codehaus.jackson.io.UTF8Writer r0;
        int $i0, $i1, $i2, $i4;
        java.io.OutputStream $r1;
        byte[] $r2;
        byte $b3;

        r0 := @this: org.codehaus.jackson.io.UTF8Writer;

        $i0 := @parameter0: int;

        $i1 = r0.<org.codehaus.jackson.io.UTF8Writer: int _surrogate>;

        if $i1 <= 0 goto label3;

        $i0 = specialinvoke r0.<org.codehaus.jackson.io.UTF8Writer: int convertSurrogate(int)>($i0);

     label1:
        $i1 = r0.<org.codehaus.jackson.io.UTF8Writer: int _outPtr>;

        $i2 = r0.<org.codehaus.jackson.io.UTF8Writer: int _outBufferEnd>;

        if $i1 < $i2 goto label2;

        $r1 = r0.<org.codehaus.jackson.io.UTF8Writer: java.io.OutputStream _out>;

        $r2 = r0.<org.codehaus.jackson.io.UTF8Writer: byte[] _outBuffer>;

        $i1 = r0.<org.codehaus.jackson.io.UTF8Writer: int _outPtr>;

        virtualinvoke $r1.<java.io.OutputStream: void write(byte[],int,int)>($r2, 0, $i1);

        r0.<org.codehaus.jackson.io.UTF8Writer: int _outPtr> = 0;

     label2:
        if $i0 >= 128 goto label5;

        $r2 = r0.<org.codehaus.jackson.io.UTF8Writer: byte[] _outBuffer>;

        $i1 = r0.<org.codehaus.jackson.io.UTF8Writer: int _outPtr>;

        $i2 = $i1 + 1;

        r0.<org.codehaus.jackson.io.UTF8Writer: int _outPtr> = $i2;

        $b3 = (byte) $i0;

        $r2[$i1] = $b3;

        return;

     label3:
        if $i0 < 55296 goto label1;

        if $i0 > 57343 goto label1;

        if $i0 <= 56319 goto label4;

        specialinvoke r0.<org.codehaus.jackson.io.UTF8Writer: void throwIllegal(int)>($i0);

     label4:
        r0.<org.codehaus.jackson.io.UTF8Writer: int _surrogate> = $i0;

        return;

     label5:
        $i1 = r0.<org.codehaus.jackson.io.UTF8Writer: int _outPtr>;

        if $i0 >= 2048 goto label7;

        $r2 = r0.<org.codehaus.jackson.io.UTF8Writer: byte[] _outBuffer>;

        $i2 = $i1 + 1;

        $i4 = $i0 >> 6;

        $i4 = $i4 | 192;

        $b3 = (byte) $i4;

        $r2[$i1] = $b3;

        $r2 = r0.<org.codehaus.jackson.io.UTF8Writer: byte[] _outBuffer>;

        $i1 = $i2 + 1;

        $i0 = $i0 & 63;

        $i0 = $i0 | 128;

        $b3 = (byte) $i0;

        $r2[$i2] = $b3;

     label6:
        r0.<org.codehaus.jackson.io.UTF8Writer: int _outPtr> = $i1;

        return;

     label7:
        if $i0 > 65535 goto label8;

        $r2 = r0.<org.codehaus.jackson.io.UTF8Writer: byte[] _outBuffer>;

        $i2 = $i1 + 1;

        $i4 = $i0 >> 12;

        $i4 = $i4 | 224;

        $b3 = (byte) $i4;

        $r2[$i1] = $b3;

        $r2 = r0.<org.codehaus.jackson.io.UTF8Writer: byte[] _outBuffer>;

        $i1 = $i2 + 1;

        $i4 = $i0 >> 6;

        $i4 = $i4 & 63;

        $i4 = $i4 | 128;

        $b3 = (byte) $i4;

        $r2[$i2] = $b3;

        $r2 = r0.<org.codehaus.jackson.io.UTF8Writer: byte[] _outBuffer>;

        $i0 = $i0 & 63;

        $i0 = $i0 | 128;

        $b3 = (byte) $i0;

        $r2[$i1] = $b3;

        $i1 = $i1 + 1;

        goto label6;

     label8:
        if $i0 <= 1114111 goto label9;

        specialinvoke r0.<org.codehaus.jackson.io.UTF8Writer: void throwIllegal(int)>($i0);

     label9:
        $r2 = r0.<org.codehaus.jackson.io.UTF8Writer: byte[] _outBuffer>;

        $i2 = $i1 + 1;

        $i4 = $i0 >> 18;

        $i4 = $i4 | 240;

        $b3 = (byte) $i4;

        $r2[$i1] = $b3;

        $r2 = r0.<org.codehaus.jackson.io.UTF8Writer: byte[] _outBuffer>;

        $i1 = $i2 + 1;

        $i4 = $i0 >> 12;

        $i4 = $i4 & 63;

        $i4 = $i4 | 128;

        $b3 = (byte) $i4;

        $r2[$i2] = $b3;

        $r2 = r0.<org.codehaus.jackson.io.UTF8Writer: byte[] _outBuffer>;

        $i2 = $i1 + 1;

        $i4 = $i0 >> 6;

        $i4 = $i4 & 63;

        $i4 = $i4 | 128;

        $b3 = (byte) $i4;

        $r2[$i1] = $b3;

        $r2 = r0.<org.codehaus.jackson.io.UTF8Writer: byte[] _outBuffer>;

        $i1 = $i2 + 1;

        $i0 = $i0 & 63;

        $i0 = $i0 | 128;

        $b3 = (byte) $i0;

        $r2[$i2] = $b3;

        goto label6;
    }

    public void write(java.lang.String) throws java.io.IOException
    {
        org.codehaus.jackson.io.UTF8Writer r0;
        java.lang.String $r1;
        int $i0;

        r0 := @this: org.codehaus.jackson.io.UTF8Writer;

        $r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        virtualinvoke r0.<org.codehaus.jackson.io.UTF8Writer: void write(java.lang.String,int,int)>($r1, 0, $i0);

        return;
    }

    public void write(java.lang.String, int, int) throws java.io.IOException
    {
        org.codehaus.jackson.io.UTF8Writer r0;
        java.lang.String $r1;
        int i0, i1, $i2, i4, i5, i7, $i9;
        byte[] r2;
        char $c3, $c6;
        java.io.OutputStream $r3;
        byte $b8;

        r0 := @this: org.codehaus.jackson.io.UTF8Writer;

        $r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $i2 := @parameter2: int;

        if $i2 >= 2 goto label01;

        if $i2 != 1 goto label20;

        $c3 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(i0);

        virtualinvoke r0.<org.codehaus.jackson.io.UTF8Writer: void write(int)>($c3);

        return;

     label01:
        i1 = r0.<org.codehaus.jackson.io.UTF8Writer: int _surrogate>;

        if i1 <= 0 goto label02;

        i1 = i0 + 1;

        $c3 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(i0);

        $i2 = $i2 + -1;

        i0 = specialinvoke r0.<org.codehaus.jackson.io.UTF8Writer: int convertSurrogate(int)>($c3);

        virtualinvoke r0.<org.codehaus.jackson.io.UTF8Writer: void write(int)>(i0);

        i0 = i1;

     label02:
        i4 = r0.<org.codehaus.jackson.io.UTF8Writer: int _outPtr>;

        r2 = r0.<org.codehaus.jackson.io.UTF8Writer: byte[] _outBuffer>;

        i1 = r0.<org.codehaus.jackson.io.UTF8Writer: int _outBufferEnd>;

        $i2 = $i2 + i0;

     label03:
        if i0 >= $i2 goto label19;

        if i4 < i1 goto label04;

        $r3 = r0.<org.codehaus.jackson.io.UTF8Writer: java.io.OutputStream _out>;

        virtualinvoke $r3.<java.io.OutputStream: void write(byte[],int,int)>(r2, 0, i4);

        i4 = 0;

     label04:
        i5 = i0 + 1;

        $c6 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(i0);

        $c3 = $c6;

        if $c6 >= 128 goto label18;

        i7 = i4 + 1;

        $b8 = (byte) $c6;

        r2[i4] = $b8;

        i4 = $i2 - i5;

        i0 = i1 - i7;

        if i4 <= i0 goto label05;

        i4 = i0;

     label05:
        i4 = i4 + i5;

        i0 = i5;

     label06:
        if i0 < i4 goto label07;

        i4 = i7;

        goto label03;

     label07:
        i5 = i0 + 1;

        $c6 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(i0);

        $c3 = $c6;

        if $c6 < 128 goto label10;

        i0 = i5;

     label08:
        if $c3 >= 2048 goto label11;

        i5 = i7 + 1;

        i4 = $c3 >> 6;

        i4 = i4 | 192;

        $b8 = (byte) i4;

        r2[i7] = $b8;

        i4 = $c3 & 63;

        i4 = i4 | 128;

        $b8 = (byte) i4;

        r2[i5] = $b8;

        i4 = i5 + 1;

        i5 = i0;

     label09:
        i0 = i5;

        goto label03;

     label10:
        $b8 = (byte) $c6;

        r2[i7] = $b8;

        i7 = i7 + 1;

        i0 = i5;

        goto label06;

     label11:
        if $c3 < 55296 goto label12;

        if $c3 <= 57343 goto label13;

     label12:
        i5 = i7 + 1;

        i4 = $c3 >> 12;

        i4 = i4 | 224;

        $b8 = (byte) i4;

        r2[i7] = $b8;

        i7 = i5 + 1;

        i4 = $c3 >> 6;

        i4 = i4 & 63;

        i4 = i4 | 128;

        $b8 = (byte) i4;

        r2[i5] = $b8;

        i4 = i7 + 1;

        i5 = $c3 & 63;

        i5 = i5 | 128;

        $b8 = (byte) i5;

        r2[i7] = $b8;

        goto label03;

     label13:
        if $c3 <= 56319 goto label14;

        r0.<org.codehaus.jackson.io.UTF8Writer: int _outPtr> = i7;

        specialinvoke r0.<org.codehaus.jackson.io.UTF8Writer: void throwIllegal(int)>($c3);

     label14:
        r0.<org.codehaus.jackson.io.UTF8Writer: int _surrogate> = $c3;

        if i0 < $i2 goto label16;

        i4 = i7;

     label15:
        r0.<org.codehaus.jackson.io.UTF8Writer: int _outPtr> = i4;

        return;

     label16:
        i5 = i0 + 1;

        $c3 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(i0);

        i0 = specialinvoke r0.<org.codehaus.jackson.io.UTF8Writer: int convertSurrogate(int)>($c3);

        if i0 <= 1114111 goto label17;

        r0.<org.codehaus.jackson.io.UTF8Writer: int _outPtr> = i7;

        specialinvoke r0.<org.codehaus.jackson.io.UTF8Writer: void throwIllegal(int)>(i0);

     label17:
        i4 = i7 + 1;

        $i9 = i0 >> 18;

        $i9 = $i9 | 240;

        $b8 = (byte) $i9;

        r2[i7] = $b8;

        i7 = i4 + 1;

        $i9 = i0 >> 12;

        $i9 = $i9 & 63;

        $i9 = $i9 | 128;

        $b8 = (byte) $i9;

        r2[i4] = $b8;

        i4 = i7 + 1;

        $i9 = i0 >> 6;

        $i9 = $i9 & 63;

        $i9 = $i9 | 128;

        $b8 = (byte) $i9;

        r2[i7] = $b8;

        i0 = i0 & 63;

        i0 = i0 | 128;

        $b8 = (byte) i0;

        r2[i4] = $b8;

        i4 = i4 + 1;

        goto label09;

     label18:
        i7 = i4;

        i0 = i5;

        goto label08;

     label19:
        goto label15;

     label20:
        return;
    }

    public void write(char[]) throws java.io.IOException
    {
        org.codehaus.jackson.io.UTF8Writer r0;
        char[] $r1;
        int $i0;

        r0 := @this: org.codehaus.jackson.io.UTF8Writer;

        $r1 := @parameter0: char[];

        $i0 = lengthof $r1;

        virtualinvoke r0.<org.codehaus.jackson.io.UTF8Writer: void write(char[],int,int)>($r1, 0, $i0);

        return;
    }

    public void write(char[], int, int) throws java.io.IOException
    {
        org.codehaus.jackson.io.UTF8Writer r0;
        char[] $r1;
        int i0, i1, $i3, i4, i5, i6, $i8;
        byte[] r2;
        char c2;
        java.io.OutputStream $r3;
        byte $b7;

        r0 := @this: org.codehaus.jackson.io.UTF8Writer;

        $r1 := @parameter0: char[];

        i0 := @parameter1: int;

        $i3 := @parameter2: int;

        if $i3 >= 2 goto label01;

        if $i3 != 1 goto label20;

        c2 = $r1[i0];

        virtualinvoke r0.<org.codehaus.jackson.io.UTF8Writer: void write(int)>(c2);

        return;

     label01:
        i1 = r0.<org.codehaus.jackson.io.UTF8Writer: int _surrogate>;

        if i1 <= 0 goto label02;

        i1 = i0 + 1;

        c2 = $r1[i0];

        $i3 = $i3 + -1;

        i0 = specialinvoke r0.<org.codehaus.jackson.io.UTF8Writer: int convertSurrogate(int)>(c2);

        virtualinvoke r0.<org.codehaus.jackson.io.UTF8Writer: void write(int)>(i0);

        i0 = i1;

     label02:
        i4 = r0.<org.codehaus.jackson.io.UTF8Writer: int _outPtr>;

        r2 = r0.<org.codehaus.jackson.io.UTF8Writer: byte[] _outBuffer>;

        i1 = r0.<org.codehaus.jackson.io.UTF8Writer: int _outBufferEnd>;

        $i3 = $i3 + i0;

     label03:
        if i0 >= $i3 goto label19;

        if i4 < i1 goto label04;

        $r3 = r0.<org.codehaus.jackson.io.UTF8Writer: java.io.OutputStream _out>;

        virtualinvoke $r3.<java.io.OutputStream: void write(byte[],int,int)>(r2, 0, i4);

        i4 = 0;

     label04:
        i5 = i0 + 1;

        c2 = $r1[i0];

        if c2 >= 128 goto label18;

        i6 = i4 + 1;

        $b7 = (byte) c2;

        r2[i4] = $b7;

        i4 = $i3 - i5;

        i0 = i1 - i6;

        if i4 <= i0 goto label05;

        i4 = i0;

     label05:
        i4 = i4 + i5;

        i0 = i5;

     label06:
        if i0 < i4 goto label07;

        i4 = i6;

        goto label03;

     label07:
        i5 = i0 + 1;

        c2 = $r1[i0];

        if c2 < 128 goto label10;

        i0 = i5;

     label08:
        if c2 >= 2048 goto label11;

        i5 = i6 + 1;

        i4 = c2 >> 6;

        i4 = i4 | 192;

        $b7 = (byte) i4;

        r2[i6] = $b7;

        i4 = c2 & 63;

        i4 = i4 | 128;

        $b7 = (byte) i4;

        r2[i5] = $b7;

        i4 = i5 + 1;

        i5 = i0;

     label09:
        i0 = i5;

        goto label03;

     label10:
        $b7 = (byte) c2;

        r2[i6] = $b7;

        i6 = i6 + 1;

        i0 = i5;

        goto label06;

     label11:
        if c2 < 55296 goto label12;

        if c2 <= 57343 goto label13;

     label12:
        i5 = i6 + 1;

        i4 = c2 >> 12;

        i4 = i4 | 224;

        $b7 = (byte) i4;

        r2[i6] = $b7;

        i6 = i5 + 1;

        i4 = c2 >> 6;

        i4 = i4 & 63;

        i4 = i4 | 128;

        $b7 = (byte) i4;

        r2[i5] = $b7;

        i4 = i6 + 1;

        i5 = c2 & 63;

        i5 = i5 | 128;

        $b7 = (byte) i5;

        r2[i6] = $b7;

        goto label03;

     label13:
        if c2 <= 56319 goto label14;

        r0.<org.codehaus.jackson.io.UTF8Writer: int _outPtr> = i6;

        specialinvoke r0.<org.codehaus.jackson.io.UTF8Writer: void throwIllegal(int)>(c2);

     label14:
        r0.<org.codehaus.jackson.io.UTF8Writer: int _surrogate> = c2;

        if i0 < $i3 goto label16;

        i4 = i6;

     label15:
        r0.<org.codehaus.jackson.io.UTF8Writer: int _outPtr> = i4;

        return;

     label16:
        i5 = i0 + 1;

        c2 = $r1[i0];

        i0 = specialinvoke r0.<org.codehaus.jackson.io.UTF8Writer: int convertSurrogate(int)>(c2);

        if i0 <= 1114111 goto label17;

        r0.<org.codehaus.jackson.io.UTF8Writer: int _outPtr> = i6;

        specialinvoke r0.<org.codehaus.jackson.io.UTF8Writer: void throwIllegal(int)>(i0);

     label17:
        i4 = i6 + 1;

        $i8 = i0 >> 18;

        $i8 = $i8 | 240;

        $b7 = (byte) $i8;

        r2[i6] = $b7;

        i6 = i4 + 1;

        $i8 = i0 >> 12;

        $i8 = $i8 & 63;

        $i8 = $i8 | 128;

        $b7 = (byte) $i8;

        r2[i4] = $b7;

        i4 = i6 + 1;

        $i8 = i0 >> 6;

        $i8 = $i8 & 63;

        $i8 = $i8 | 128;

        $b7 = (byte) $i8;

        r2[i6] = $b7;

        i0 = i0 & 63;

        i0 = i0 | 128;

        $b7 = (byte) i0;

        r2[i4] = $b7;

        i4 = i4 + 1;

        goto label09;

     label18:
        i6 = i4;

        i0 = i5;

        goto label08;

     label19:
        goto label15;

     label20:
        return;
    }

    public static void <clinit>()
    {
        <org.codehaus.jackson.io.UTF8Writer: int SURR2_LAST> = 57343;

        <org.codehaus.jackson.io.UTF8Writer: int SURR2_FIRST> = 56320;

        <org.codehaus.jackson.io.UTF8Writer: int SURR1_LAST> = 56319;

        <org.codehaus.jackson.io.UTF8Writer: int SURR1_FIRST> = 55296;

        return;
    }
}
