public final enum class org.codehaus.jackson.JsonParser$Feature extends java.lang.Enum
{
    private static final org.codehaus.jackson.JsonParser$Feature[] $VALUES;
    public static final enum org.codehaus.jackson.JsonParser$Feature ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
    public static final enum org.codehaus.jackson.JsonParser$Feature ALLOW_COMMENTS;
    public static final enum org.codehaus.jackson.JsonParser$Feature ALLOW_SINGLE_QUOTES;
    public static final enum org.codehaus.jackson.JsonParser$Feature ALLOW_UNQUOTED_CONTROL_CHARS;
    public static final enum org.codehaus.jackson.JsonParser$Feature ALLOW_UNQUOTED_FIELD_NAMES;
    public static final enum org.codehaus.jackson.JsonParser$Feature AUTO_CLOSE_SOURCE;
    public static final enum org.codehaus.jackson.JsonParser$Feature CANONICALIZE_FIELD_NAMES;
    public static final enum org.codehaus.jackson.JsonParser$Feature INTERN_FIELD_NAMES;
    final boolean _defaultState;

    static void <clinit>()
    {
        org.codehaus.jackson.JsonParser$Feature $r0;
        org.codehaus.jackson.JsonParser$Feature[] $r1;

        $r0 = new org.codehaus.jackson.JsonParser$Feature;

        specialinvoke $r0.<org.codehaus.jackson.JsonParser$Feature: void <init>(java.lang.String,int,boolean)>("AUTO_CLOSE_SOURCE", 0, 1);

        <org.codehaus.jackson.JsonParser$Feature: org.codehaus.jackson.JsonParser$Feature AUTO_CLOSE_SOURCE> = $r0;

        $r0 = new org.codehaus.jackson.JsonParser$Feature;

        specialinvoke $r0.<org.codehaus.jackson.JsonParser$Feature: void <init>(java.lang.String,int,boolean)>("ALLOW_COMMENTS", 1, 0);

        <org.codehaus.jackson.JsonParser$Feature: org.codehaus.jackson.JsonParser$Feature ALLOW_COMMENTS> = $r0;

        $r0 = new org.codehaus.jackson.JsonParser$Feature;

        specialinvoke $r0.<org.codehaus.jackson.JsonParser$Feature: void <init>(java.lang.String,int,boolean)>("ALLOW_UNQUOTED_FIELD_NAMES", 2, 0);

        <org.codehaus.jackson.JsonParser$Feature: org.codehaus.jackson.JsonParser$Feature ALLOW_UNQUOTED_FIELD_NAMES> = $r0;

        $r0 = new org.codehaus.jackson.JsonParser$Feature;

        specialinvoke $r0.<org.codehaus.jackson.JsonParser$Feature: void <init>(java.lang.String,int,boolean)>("ALLOW_SINGLE_QUOTES", 3, 0);

        <org.codehaus.jackson.JsonParser$Feature: org.codehaus.jackson.JsonParser$Feature ALLOW_SINGLE_QUOTES> = $r0;

        $r0 = new org.codehaus.jackson.JsonParser$Feature;

        specialinvoke $r0.<org.codehaus.jackson.JsonParser$Feature: void <init>(java.lang.String,int,boolean)>("ALLOW_UNQUOTED_CONTROL_CHARS", 4, 0);

        <org.codehaus.jackson.JsonParser$Feature: org.codehaus.jackson.JsonParser$Feature ALLOW_UNQUOTED_CONTROL_CHARS> = $r0;

        $r0 = new org.codehaus.jackson.JsonParser$Feature;

        specialinvoke $r0.<org.codehaus.jackson.JsonParser$Feature: void <init>(java.lang.String,int,boolean)>("ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER", 5, 0);

        <org.codehaus.jackson.JsonParser$Feature: org.codehaus.jackson.JsonParser$Feature ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER> = $r0;

        $r0 = new org.codehaus.jackson.JsonParser$Feature;

        specialinvoke $r0.<org.codehaus.jackson.JsonParser$Feature: void <init>(java.lang.String,int,boolean)>("INTERN_FIELD_NAMES", 6, 1);

        <org.codehaus.jackson.JsonParser$Feature: org.codehaus.jackson.JsonParser$Feature INTERN_FIELD_NAMES> = $r0;

        $r0 = new org.codehaus.jackson.JsonParser$Feature;

        specialinvoke $r0.<org.codehaus.jackson.JsonParser$Feature: void <init>(java.lang.String,int,boolean)>("CANONICALIZE_FIELD_NAMES", 7, 1);

        <org.codehaus.jackson.JsonParser$Feature: org.codehaus.jackson.JsonParser$Feature CANONICALIZE_FIELD_NAMES> = $r0;

        $r1 = newarray (org.codehaus.jackson.JsonParser$Feature)[8];

        $r0 = <org.codehaus.jackson.JsonParser$Feature: org.codehaus.jackson.JsonParser$Feature AUTO_CLOSE_SOURCE>;

        $r1[0] = $r0;

        $r0 = <org.codehaus.jackson.JsonParser$Feature: org.codehaus.jackson.JsonParser$Feature ALLOW_COMMENTS>;

        $r1[1] = $r0;

        $r0 = <org.codehaus.jackson.JsonParser$Feature: org.codehaus.jackson.JsonParser$Feature ALLOW_UNQUOTED_FIELD_NAMES>;

        $r1[2] = $r0;

        $r0 = <org.codehaus.jackson.JsonParser$Feature: org.codehaus.jackson.JsonParser$Feature ALLOW_SINGLE_QUOTES>;

        $r1[3] = $r0;

        $r0 = <org.codehaus.jackson.JsonParser$Feature: org.codehaus.jackson.JsonParser$Feature ALLOW_UNQUOTED_CONTROL_CHARS>;

        $r1[4] = $r0;

        $r0 = <org.codehaus.jackson.JsonParser$Feature: org.codehaus.jackson.JsonParser$Feature ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER>;

        $r1[5] = $r0;

        $r0 = <org.codehaus.jackson.JsonParser$Feature: org.codehaus.jackson.JsonParser$Feature INTERN_FIELD_NAMES>;

        $r1[6] = $r0;

        $r0 = <org.codehaus.jackson.JsonParser$Feature: org.codehaus.jackson.JsonParser$Feature CANONICALIZE_FIELD_NAMES>;

        $r1[7] = $r0;

        <org.codehaus.jackson.JsonParser$Feature: org.codehaus.jackson.JsonParser$Feature[] $VALUES> = $r1;

        return;
    }

    private void <init>(java.lang.String, int, boolean)
    {
        org.codehaus.jackson.JsonParser$Feature r0;
        java.lang.String $r1;
        int $i0;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.JsonParser$Feature;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $z0 := @parameter2: boolean;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>($r1, $i0);

        r0.<org.codehaus.jackson.JsonParser$Feature: boolean _defaultState> = $z0;

        return;
    }

    public static int collectDefaults()
    {
        org.codehaus.jackson.JsonParser$Feature r0;
        int i0, i1, i2, $i3;
        org.codehaus.jackson.JsonParser$Feature[] $r1;
        boolean $z0;

        i1 = 0;

        $r1 = staticinvoke <org.codehaus.jackson.JsonParser$Feature: org.codehaus.jackson.JsonParser$Feature[] values()>();

        i0 = lengthof $r1;

        i2 = 0;

     label1:
        if i2 >= i0 goto label3;

        r0 = $r1[i2];

        $z0 = virtualinvoke r0.<org.codehaus.jackson.JsonParser$Feature: boolean enabledByDefault()>();

        if $z0 == 0 goto label2;

        $i3 = virtualinvoke r0.<org.codehaus.jackson.JsonParser$Feature: int getMask()>();

        i1 = i1 | $i3;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return i1;
    }

    public static org.codehaus.jackson.JsonParser$Feature valueOf(java.lang.String)
    {
        java.lang.Enum $r0;
        java.lang.String $r1;
        org.codehaus.jackson.JsonParser$Feature $r2;

        $r1 := @parameter0: java.lang.String;

        $r0 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lorg/codehaus/jackson/JsonParser$Feature;", $r1);

        $r2 = (org.codehaus.jackson.JsonParser$Feature) $r0;

        return $r2;
    }

    public static org.codehaus.jackson.JsonParser$Feature[] values()
    {
        java.lang.Object $r0;
        org.codehaus.jackson.JsonParser$Feature[] $r1;

        $r1 = <org.codehaus.jackson.JsonParser$Feature: org.codehaus.jackson.JsonParser$Feature[] $VALUES>;

        $r0 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r1 = (org.codehaus.jackson.JsonParser$Feature[]) $r0;

        return $r1;
    }

    public boolean enabledByDefault()
    {
        org.codehaus.jackson.JsonParser$Feature r0;
        boolean z0;

        r0 := @this: org.codehaus.jackson.JsonParser$Feature;

        z0 = r0.<org.codehaus.jackson.JsonParser$Feature: boolean _defaultState>;

        return z0;
    }

    public boolean enabledIn(int)
    {
        org.codehaus.jackson.JsonParser$Feature r0;
        int $i0, $i1;

        r0 := @this: org.codehaus.jackson.JsonParser$Feature;

        $i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<org.codehaus.jackson.JsonParser$Feature: int getMask()>();

        $i0 = $i1 & $i0;

        if $i0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public int getMask()
    {
        org.codehaus.jackson.JsonParser$Feature r0;
        int $i0;

        r0 := @this: org.codehaus.jackson.JsonParser$Feature;

        $i0 = virtualinvoke r0.<org.codehaus.jackson.JsonParser$Feature: int ordinal()>();

        $i0 = 1 << $i0;

        return $i0;
    }
}
