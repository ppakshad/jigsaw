public final class org.codehaus.jackson.Base64Variant extends java.lang.Object
{
    public static final int BASE64_VALUE_INVALID;
    public static final int BASE64_VALUE_PADDING;
    static final char PADDING_CHAR_NONE;
    private final int[] _asciiToBase64;
    private final byte[] _base64ToAsciiB;
    private final char[] _base64ToAsciiC;
    final int _maxLineLength;
    final java.lang.String _name;
    final char _paddingChar;
    final boolean _usesPadding;

    public void <init>(java.lang.String, java.lang.String, boolean, char, int)
    {
        org.codehaus.jackson.Base64Variant r0;
        java.lang.String $r1, $r2;
        boolean $z0;
        char $c0, c2;
        int $i1, i3;
        int[] $r3;
        char[] $r4;
        byte[] $r5;
        java.lang.IllegalArgumentException $r6;
        java.lang.StringBuilder $r7;
        byte $b4;

        r0 := @this: org.codehaus.jackson.Base64Variant;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $z0 := @parameter2: boolean;

        $c0 := @parameter3: char;

        $i1 := @parameter4: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = newarray (int)[128];

        r0.<org.codehaus.jackson.Base64Variant: int[] _asciiToBase64> = $r3;

        $r4 = newarray (char)[64];

        r0.<org.codehaus.jackson.Base64Variant: char[] _base64ToAsciiC> = $r4;

        $r5 = newarray (byte)[64];

        r0.<org.codehaus.jackson.Base64Variant: byte[] _base64ToAsciiB> = $r5;

        r0.<org.codehaus.jackson.Base64Variant: java.lang.String _name> = $r1;

        r0.<org.codehaus.jackson.Base64Variant: boolean _usesPadding> = $z0;

        r0.<org.codehaus.jackson.Base64Variant: char _paddingChar> = $c0;

        r0.<org.codehaus.jackson.Base64Variant: int _maxLineLength> = $i1;

        $i1 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i1 == 64 goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Base64Alphabet length must be exactly 64 (was ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r1 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r6;

     label1:
        $r4 = r0.<org.codehaus.jackson.Base64Variant: char[] _base64ToAsciiC>;

        virtualinvoke $r2.<java.lang.String: void getChars(int,int,char[],int)>(0, $i1, $r4, 0);

        $r3 = r0.<org.codehaus.jackson.Base64Variant: int[] _asciiToBase64>;

        staticinvoke <java.util.Arrays: void fill(int[],int)>($r3, -1);

        i3 = 0;

     label2:
        if i3 >= $i1 goto label3;

        $r4 = r0.<org.codehaus.jackson.Base64Variant: char[] _base64ToAsciiC>;

        c2 = $r4[i3];

        $r5 = r0.<org.codehaus.jackson.Base64Variant: byte[] _base64ToAsciiB>;

        $b4 = (byte) c2;

        $r5[i3] = $b4;

        $r3 = r0.<org.codehaus.jackson.Base64Variant: int[] _asciiToBase64>;

        $r3[c2] = i3;

        i3 = i3 + 1;

        goto label2;

     label3:
        if $z0 == 0 goto label4;

        $r3 = r0.<org.codehaus.jackson.Base64Variant: int[] _asciiToBase64>;

        $r3[$c0] = -2;

     label4:
        return;
    }

    public void <init>(org.codehaus.jackson.Base64Variant, java.lang.String, int)
    {
        org.codehaus.jackson.Base64Variant r0, $r1;
        java.lang.String $r2;
        int $i0;
        boolean $z0;
        char $c1;

        r0 := @this: org.codehaus.jackson.Base64Variant;

        $r1 := @parameter0: org.codehaus.jackson.Base64Variant;

        $r2 := @parameter1: java.lang.String;

        $i0 := @parameter2: int;

        $z0 = $r1.<org.codehaus.jackson.Base64Variant: boolean _usesPadding>;

        $c1 = $r1.<org.codehaus.jackson.Base64Variant: char _paddingChar>;

        specialinvoke r0.<org.codehaus.jackson.Base64Variant: void <init>(org.codehaus.jackson.Base64Variant,java.lang.String,boolean,char,int)>($r1, $r2, $z0, $c1, $i0);

        return;
    }

    public void <init>(org.codehaus.jackson.Base64Variant, java.lang.String, boolean, char, int)
    {
        org.codehaus.jackson.Base64Variant r0, $r1;
        java.lang.String $r2;
        boolean $z0;
        char $c0;
        int $i1, $i2;
        byte[] r3, $r6;
        char[] r4, $r7;
        int[] r5, $r8;

        r0 := @this: org.codehaus.jackson.Base64Variant;

        $r1 := @parameter0: org.codehaus.jackson.Base64Variant;

        $r2 := @parameter1: java.lang.String;

        $z0 := @parameter2: boolean;

        $c0 := @parameter3: char;

        $i1 := @parameter4: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r5 = newarray (int)[128];

        r0.<org.codehaus.jackson.Base64Variant: int[] _asciiToBase64> = r5;

        r4 = newarray (char)[64];

        r0.<org.codehaus.jackson.Base64Variant: char[] _base64ToAsciiC> = r4;

        r3 = newarray (byte)[64];

        r0.<org.codehaus.jackson.Base64Variant: byte[] _base64ToAsciiB> = r3;

        r0.<org.codehaus.jackson.Base64Variant: java.lang.String _name> = $r2;

        r3 = $r1.<org.codehaus.jackson.Base64Variant: byte[] _base64ToAsciiB>;

        $r6 = r0.<org.codehaus.jackson.Base64Variant: byte[] _base64ToAsciiB>;

        $i2 = lengthof r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, 0, $r6, 0, $i2);

        r4 = $r1.<org.codehaus.jackson.Base64Variant: char[] _base64ToAsciiC>;

        $r7 = r0.<org.codehaus.jackson.Base64Variant: char[] _base64ToAsciiC>;

        $i2 = lengthof r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r4, 0, $r7, 0, $i2);

        r5 = $r1.<org.codehaus.jackson.Base64Variant: int[] _asciiToBase64>;

        $r8 = r0.<org.codehaus.jackson.Base64Variant: int[] _asciiToBase64>;

        $i2 = lengthof r5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r5, 0, $r8, 0, $i2);

        r0.<org.codehaus.jackson.Base64Variant: boolean _usesPadding> = $z0;

        r0.<org.codehaus.jackson.Base64Variant: char _paddingChar> = $c0;

        r0.<org.codehaus.jackson.Base64Variant: int _maxLineLength> = $i1;

        return;
    }

    public int decodeBase64Byte(byte)
    {
        org.codehaus.jackson.Base64Variant r0;
        byte $b0;
        int[] $r1;
        int $i1;

        r0 := @this: org.codehaus.jackson.Base64Variant;

        $b0 := @parameter0: byte;

        if $b0 > 127 goto label1;

        $r1 = r0.<org.codehaus.jackson.Base64Variant: int[] _asciiToBase64>;

        $i1 = $r1[$b0];

        return $i1;

     label1:
        return -1;
    }

    public int decodeBase64Char(char)
    {
        org.codehaus.jackson.Base64Variant r0;
        char $c0;
        int[] $r1;
        int $i1;

        r0 := @this: org.codehaus.jackson.Base64Variant;

        $c0 := @parameter0: char;

        if $c0 > 127 goto label1;

        $r1 = r0.<org.codehaus.jackson.Base64Variant: int[] _asciiToBase64>;

        $i1 = $r1[$c0];

        return $i1;

     label1:
        return -1;
    }

    public int decodeBase64Char(int)
    {
        org.codehaus.jackson.Base64Variant r0;
        int $i0;
        int[] $r1;

        r0 := @this: org.codehaus.jackson.Base64Variant;

        $i0 := @parameter0: int;

        if $i0 > 127 goto label1;

        $r1 = r0.<org.codehaus.jackson.Base64Variant: int[] _asciiToBase64>;

        $i0 = $r1[$i0];

        return $i0;

     label1:
        return -1;
    }

    public java.lang.String encode(byte[])
    {
        org.codehaus.jackson.Base64Variant r0;
        byte[] $r1;
        java.lang.String $r2;

        r0 := @this: org.codehaus.jackson.Base64Variant;

        $r1 := @parameter0: byte[];

        $r2 = virtualinvoke r0.<org.codehaus.jackson.Base64Variant: java.lang.String encode(byte[],boolean)>($r1, 0);

        return $r2;
    }

    public java.lang.String encode(byte[], boolean)
    {
        org.codehaus.jackson.Base64Variant r0;
        byte[] $r1;
        boolean $z0;
        int i0, i1, $i2, i3, i4, i6;
        java.lang.StringBuilder r2;
        byte $b5;
        java.lang.String $r3;

        r0 := @this: org.codehaus.jackson.Base64Variant;

        $r1 := @parameter0: byte[];

        $z0 := @parameter1: boolean;

        i0 = lengthof $r1;

        i1 = i0 >> 2;

        i1 = i1 + i0;

        $i2 = i0 >> 3;

        i1 = i1 + $i2;

        r2 = new java.lang.StringBuilder;

        specialinvoke r2.<java.lang.StringBuilder: void <init>(int)>(i1);

        if $z0 == 0 goto label1;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);

     label1:
        i1 = virtualinvoke r0.<org.codehaus.jackson.Base64Variant: int getMaxLineLength()>();

        $i2 = i1 >> 2;

        i1 = i0 - 3;

        i3 = 0;

     label2:
        if i3 > i1 goto label4;

        i4 = i3 + 1;

        $b5 = $r1[i3];

        i6 = $b5 << 8;

        i3 = i4 + 1;

        $b5 = $r1[i4];

        i4 = $b5 & 255;

        i4 = i6 | i4;

        i6 = i4 << 8;

        i4 = i3 + 1;

        $b5 = $r1[i3];

        i3 = $b5 & 255;

        i3 = i6 | i3;

        virtualinvoke r0.<org.codehaus.jackson.Base64Variant: void encodeBase64Chunk(java.lang.StringBuilder,int)>(r2, i3);

        $i2 = $i2 + -1;

        if $i2 > 0 goto label3;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(92);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(110);

        $i2 = virtualinvoke r0.<org.codehaus.jackson.Base64Variant: int getMaxLineLength()>();

        $i2 = $i2 >> 2;

     label3:
        i3 = i4;

        goto label2;

     label4:
        i0 = i0 - i3;

        if i0 <= 0 goto label8;

        $i2 = i3 + 1;

        $b5 = $r1[i3];

        i1 = $b5 << 16;

        if i0 != 2 goto label5;

        $b5 = $r1[$i2];

        $i2 = $b5 & 255;

        $i2 = $i2 << 8;

        i1 = i1 | $i2;

     label5:
        virtualinvoke r0.<org.codehaus.jackson.Base64Variant: void encodeBase64Partial(java.lang.StringBuilder,int,int)>(r2, i1, i0);

     label6:
        if $z0 == 0 goto label7;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);

     label7:
        $r3 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;

     label8:
        goto label6;
    }

    public byte encodeBase64BitsAsByte(int)
    {
        org.codehaus.jackson.Base64Variant r0;
        int $i0;
        byte[] $r1;
        byte $b1;

        r0 := @this: org.codehaus.jackson.Base64Variant;

        $i0 := @parameter0: int;

        $r1 = r0.<org.codehaus.jackson.Base64Variant: byte[] _base64ToAsciiB>;

        $b1 = $r1[$i0];

        return $b1;
    }

    public char encodeBase64BitsAsChar(int)
    {
        org.codehaus.jackson.Base64Variant r0;
        int $i0;
        char[] $r1;
        char $c1;

        r0 := @this: org.codehaus.jackson.Base64Variant;

        $i0 := @parameter0: int;

        $r1 = r0.<org.codehaus.jackson.Base64Variant: char[] _base64ToAsciiC>;

        $c1 = $r1[$i0];

        return $c1;
    }

    public int encodeBase64Chunk(int, byte[], int)
    {
        org.codehaus.jackson.Base64Variant r0;
        int $i0, i1, i2, $i3;
        byte[] $r1, $r2;
        byte $b4;

        r0 := @this: org.codehaus.jackson.Base64Variant;

        $i0 := @parameter0: int;

        $r1 := @parameter1: byte[];

        i1 := @parameter2: int;

        i2 = i1 + 1;

        $r2 = r0.<org.codehaus.jackson.Base64Variant: byte[] _base64ToAsciiB>;

        $i3 = $i0 >> 18;

        $i3 = $i3 & 63;

        $b4 = $r2[$i3];

        $r1[i1] = $b4;

        i1 = i2 + 1;

        $r2 = r0.<org.codehaus.jackson.Base64Variant: byte[] _base64ToAsciiB>;

        $i3 = $i0 >> 12;

        $i3 = $i3 & 63;

        $b4 = $r2[$i3];

        $r1[i2] = $b4;

        i2 = i1 + 1;

        $r2 = r0.<org.codehaus.jackson.Base64Variant: byte[] _base64ToAsciiB>;

        $i3 = $i0 >> 6;

        $i3 = $i3 & 63;

        $b4 = $r2[$i3];

        $r1[i1] = $b4;

        i1 = i2 + 1;

        $r2 = r0.<org.codehaus.jackson.Base64Variant: byte[] _base64ToAsciiB>;

        $i0 = $i0 & 63;

        $b4 = $r2[$i0];

        $r1[i2] = $b4;

        return i1;
    }

    public int encodeBase64Chunk(int, char[], int)
    {
        org.codehaus.jackson.Base64Variant r0;
        int $i0, i1, i2, $i3;
        char[] $r1, $r2;
        char $c4;

        r0 := @this: org.codehaus.jackson.Base64Variant;

        $i0 := @parameter0: int;

        $r1 := @parameter1: char[];

        i1 := @parameter2: int;

        i2 = i1 + 1;

        $r2 = r0.<org.codehaus.jackson.Base64Variant: char[] _base64ToAsciiC>;

        $i3 = $i0 >> 18;

        $i3 = $i3 & 63;

        $c4 = $r2[$i3];

        $r1[i1] = $c4;

        i1 = i2 + 1;

        $r2 = r0.<org.codehaus.jackson.Base64Variant: char[] _base64ToAsciiC>;

        $i3 = $i0 >> 12;

        $i3 = $i3 & 63;

        $c4 = $r2[$i3];

        $r1[i2] = $c4;

        i2 = i1 + 1;

        $r2 = r0.<org.codehaus.jackson.Base64Variant: char[] _base64ToAsciiC>;

        $i3 = $i0 >> 6;

        $i3 = $i3 & 63;

        $c4 = $r2[$i3];

        $r1[i1] = $c4;

        i1 = i2 + 1;

        $r2 = r0.<org.codehaus.jackson.Base64Variant: char[] _base64ToAsciiC>;

        $i0 = $i0 & 63;

        $c4 = $r2[$i0];

        $r1[i2] = $c4;

        return i1;
    }

    public void encodeBase64Chunk(java.lang.StringBuilder, int)
    {
        org.codehaus.jackson.Base64Variant r0;
        java.lang.StringBuilder $r1;
        int $i0, $i1;
        char[] $r2;
        char $c2;

        r0 := @this: org.codehaus.jackson.Base64Variant;

        $r1 := @parameter0: java.lang.StringBuilder;

        $i0 := @parameter1: int;

        $r2 = r0.<org.codehaus.jackson.Base64Variant: char[] _base64ToAsciiC>;

        $i1 = $i0 >> 18;

        $i1 = $i1 & 63;

        $c2 = $r2[$i1];

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2);

        $r2 = r0.<org.codehaus.jackson.Base64Variant: char[] _base64ToAsciiC>;

        $i1 = $i0 >> 12;

        $i1 = $i1 & 63;

        $c2 = $r2[$i1];

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2);

        $r2 = r0.<org.codehaus.jackson.Base64Variant: char[] _base64ToAsciiC>;

        $i1 = $i0 >> 6;

        $i1 = $i1 & 63;

        $c2 = $r2[$i1];

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2);

        $r2 = r0.<org.codehaus.jackson.Base64Variant: char[] _base64ToAsciiC>;

        $i0 = $i0 & 63;

        $c2 = $r2[$i0];

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2);

        return;
    }

    public int encodeBase64Partial(int, int, byte[], int)
    {
        org.codehaus.jackson.Base64Variant r0;
        int $i0, $i1, i3, i4, $i5;
        byte[] $r1, $r2;
        byte b2, $b7;
        boolean $z0;
        char $c6;

        r0 := @this: org.codehaus.jackson.Base64Variant;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 := @parameter2: byte[];

        i3 := @parameter3: int;

        i4 = i3 + 1;

        $r2 = r0.<org.codehaus.jackson.Base64Variant: byte[] _base64ToAsciiB>;

        $i5 = $i0 >> 18;

        $i5 = $i5 & 63;

        b2 = $r2[$i5];

        $r1[i3] = b2;

        i3 = i4 + 1;

        $r2 = r0.<org.codehaus.jackson.Base64Variant: byte[] _base64ToAsciiB>;

        $i5 = $i0 >> 12;

        $i5 = $i5 & 63;

        b2 = $r2[$i5];

        $r1[i4] = b2;

        $z0 = r0.<org.codehaus.jackson.Base64Variant: boolean _usesPadding>;

        if $z0 == 0 goto label3;

        $c6 = r0.<org.codehaus.jackson.Base64Variant: char _paddingChar>;

        b2 = (byte) $c6;

        i4 = i3 + 1;

        if $i1 != 2 goto label2;

        $r2 = r0.<org.codehaus.jackson.Base64Variant: byte[] _base64ToAsciiB>;

        $i0 = $i0 >> 6;

        $i0 = $i0 & 63;

        $b7 = $r2[$i0];

     label1:
        $r1[i3] = $b7;

        $i0 = i4 + 1;

        $r1[i4] = b2;

        return $i0;

     label2:
        $b7 = b2;

        goto label1;

     label3:
        if $i1 != 2 goto label4;

        $i1 = i3 + 1;

        $r2 = r0.<org.codehaus.jackson.Base64Variant: byte[] _base64ToAsciiB>;

        $i0 = $i0 >> 6;

        $i0 = $i0 & 63;

        b2 = $r2[$i0];

        $r1[i3] = b2;

        return $i1;

     label4:
        return i3;
    }

    public int encodeBase64Partial(int, int, char[], int)
    {
        org.codehaus.jackson.Base64Variant r0;
        int $i0, $i1, i2, i3, $i4;
        char[] $r1, $r2;
        char $c5;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.Base64Variant;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 := @parameter2: char[];

        i2 := @parameter3: int;

        i3 = i2 + 1;

        $r2 = r0.<org.codehaus.jackson.Base64Variant: char[] _base64ToAsciiC>;

        $i4 = $i0 >> 18;

        $i4 = $i4 & 63;

        $c5 = $r2[$i4];

        $r1[i2] = $c5;

        i2 = i3 + 1;

        $r2 = r0.<org.codehaus.jackson.Base64Variant: char[] _base64ToAsciiC>;

        $i4 = $i0 >> 12;

        $i4 = $i4 & 63;

        $c5 = $r2[$i4];

        $r1[i3] = $c5;

        $z0 = r0.<org.codehaus.jackson.Base64Variant: boolean _usesPadding>;

        if $z0 == 0 goto label3;

        i3 = i2 + 1;

        if $i1 != 2 goto label2;

        $r2 = r0.<org.codehaus.jackson.Base64Variant: char[] _base64ToAsciiC>;

        $i0 = $i0 >> 6;

        $i0 = $i0 & 63;

        $c5 = $r2[$i0];

     label1:
        $r1[i2] = $c5;

        $i0 = i3 + 1;

        $c5 = r0.<org.codehaus.jackson.Base64Variant: char _paddingChar>;

        $r1[i3] = $c5;

        return $i0;

     label2:
        $c5 = r0.<org.codehaus.jackson.Base64Variant: char _paddingChar>;

        goto label1;

     label3:
        if $i1 != 2 goto label4;

        $i1 = i2 + 1;

        $r2 = r0.<org.codehaus.jackson.Base64Variant: char[] _base64ToAsciiC>;

        $i0 = $i0 >> 6;

        $i0 = $i0 & 63;

        $c5 = $r2[$i0];

        $r1[i2] = $c5;

        return $i1;

     label4:
        return i2;
    }

    public void encodeBase64Partial(java.lang.StringBuilder, int, int)
    {
        org.codehaus.jackson.Base64Variant r0;
        java.lang.StringBuilder $r1;
        int $i0, $i1, $i2;
        char[] $r2;
        char $c3;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.Base64Variant;

        $r1 := @parameter0: java.lang.StringBuilder;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = r0.<org.codehaus.jackson.Base64Variant: char[] _base64ToAsciiC>;

        $i2 = $i0 >> 18;

        $i2 = $i2 & 63;

        $c3 = $r2[$i2];

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c3);

        $r2 = r0.<org.codehaus.jackson.Base64Variant: char[] _base64ToAsciiC>;

        $i2 = $i0 >> 12;

        $i2 = $i2 & 63;

        $c3 = $r2[$i2];

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c3);

        $z0 = r0.<org.codehaus.jackson.Base64Variant: boolean _usesPadding>;

        if $z0 == 0 goto label3;

        if $i1 != 2 goto label2;

        $r2 = r0.<org.codehaus.jackson.Base64Variant: char[] _base64ToAsciiC>;

        $i0 = $i0 >> 6;

        $i0 = $i0 & 63;

        $c3 = $r2[$i0];

     label1:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c3);

        $c3 = r0.<org.codehaus.jackson.Base64Variant: char _paddingChar>;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c3);

        return;

     label2:
        $c3 = r0.<org.codehaus.jackson.Base64Variant: char _paddingChar>;

        goto label1;

     label3:
        if $i1 != 2 goto label4;

        $r2 = r0.<org.codehaus.jackson.Base64Variant: char[] _base64ToAsciiC>;

        $i0 = $i0 >> 6;

        $i0 = $i0 & 63;

        $c3 = $r2[$i0];

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c3);

     label4:
        return;
    }

    public int getMaxLineLength()
    {
        org.codehaus.jackson.Base64Variant r0;
        int i0;

        r0 := @this: org.codehaus.jackson.Base64Variant;

        i0 = r0.<org.codehaus.jackson.Base64Variant: int _maxLineLength>;

        return i0;
    }

    public java.lang.String getName()
    {
        org.codehaus.jackson.Base64Variant r0;
        java.lang.String r1;

        r0 := @this: org.codehaus.jackson.Base64Variant;

        r1 = r0.<org.codehaus.jackson.Base64Variant: java.lang.String _name>;

        return r1;
    }

    public byte getPaddingByte()
    {
        org.codehaus.jackson.Base64Variant r0;
        char $c0;
        byte $b1;

        r0 := @this: org.codehaus.jackson.Base64Variant;

        $c0 = r0.<org.codehaus.jackson.Base64Variant: char _paddingChar>;

        $b1 = (byte) $c0;

        return $b1;
    }

    public char getPaddingChar()
    {
        org.codehaus.jackson.Base64Variant r0;
        char c0;

        r0 := @this: org.codehaus.jackson.Base64Variant;

        c0 = r0.<org.codehaus.jackson.Base64Variant: char _paddingChar>;

        return c0;
    }

    public java.lang.String toString()
    {
        org.codehaus.jackson.Base64Variant r0;
        java.lang.String r1;

        r0 := @this: org.codehaus.jackson.Base64Variant;

        r1 = r0.<org.codehaus.jackson.Base64Variant: java.lang.String _name>;

        return r1;
    }

    public boolean usesPadding()
    {
        org.codehaus.jackson.Base64Variant r0;
        boolean z0;

        r0 := @this: org.codehaus.jackson.Base64Variant;

        z0 = r0.<org.codehaus.jackson.Base64Variant: boolean _usesPadding>;

        return z0;
    }

    public boolean usesPaddingChar(char)
    {
        org.codehaus.jackson.Base64Variant r0;
        char $c0, $c1;

        r0 := @this: org.codehaus.jackson.Base64Variant;

        $c0 := @parameter0: char;

        $c1 = r0.<org.codehaus.jackson.Base64Variant: char _paddingChar>;

        if $c0 != $c1 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean usesPaddingChar(int)
    {
        org.codehaus.jackson.Base64Variant r0;
        int $i0;
        char $c1;

        r0 := @this: org.codehaus.jackson.Base64Variant;

        $i0 := @parameter0: int;

        $c1 = r0.<org.codehaus.jackson.Base64Variant: char _paddingChar>;

        if $i0 != $c1 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static void <clinit>()
    {
        <org.codehaus.jackson.Base64Variant: int BASE64_VALUE_PADDING> = -2;

        <org.codehaus.jackson.Base64Variant: int BASE64_VALUE_INVALID> = -1;

        return;
    }
}
