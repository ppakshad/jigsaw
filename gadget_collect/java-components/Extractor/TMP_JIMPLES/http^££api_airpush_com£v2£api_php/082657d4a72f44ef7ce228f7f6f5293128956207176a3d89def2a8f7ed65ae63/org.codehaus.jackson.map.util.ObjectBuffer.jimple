public final class org.codehaus.jackson.map.util.ObjectBuffer extends java.lang.Object
{
    static final int INITIAL_CHUNK_SIZE;
    static final int MAX_CHUNK_SIZE;
    static final int SMALL_CHUNK_SIZE;
    private org.codehaus.jackson.map.util.ObjectBuffer$Node _bufferHead;
    private org.codehaus.jackson.map.util.ObjectBuffer$Node _bufferTail;
    private int _bufferedEntryCount;
    private java.lang.Object[] _freeBuffer;

    public void <init>()
    {
        org.codehaus.jackson.map.util.ObjectBuffer r0;

        r0 := @this: org.codehaus.jackson.map.util.ObjectBuffer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    protected final void _copyTo(java.lang.Object, int, java.lang.Object[], int)
    {
        org.codehaus.jackson.map.util.ObjectBuffer r0;
        java.lang.Object $r1;
        int $i0, $i1, i2, i3;
        java.lang.Object[] $r2, $r4;
        org.codehaus.jackson.map.util.ObjectBuffer$Node r3;
        java.lang.IllegalStateException $r5;
        java.lang.StringBuilder $r6;
        java.lang.String $r7;

        r0 := @this: org.codehaus.jackson.map.util.ObjectBuffer;

        $r1 := @parameter0: java.lang.Object;

        $i0 := @parameter1: int;

        $r2 := @parameter2: java.lang.Object[];

        $i1 := @parameter3: int;

        i3 = 0;

        r3 = r0.<org.codehaus.jackson.map.util.ObjectBuffer: org.codehaus.jackson.map.util.ObjectBuffer$Node _bufferHead>;

     label1:
        if r3 == null goto label2;

        $r4 = virtualinvoke r3.<org.codehaus.jackson.map.util.ObjectBuffer$Node: java.lang.Object[] getData()>();

        i2 = lengthof $r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, $r1, i3, i2);

        i3 = i3 + i2;

        r3 = virtualinvoke r3.<org.codehaus.jackson.map.util.ObjectBuffer$Node: org.codehaus.jackson.map.util.ObjectBuffer$Node next()>();

        goto label1;

     label2:
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r1, i3, $i1);

        $i1 = i3 + $i1;

        if $i1 == $i0 goto label3;

        $r5 = new java.lang.IllegalStateException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Should have gotten ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" entries, got ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r7);

        throw $r5;

     label3:
        return;
    }

    protected void _reset()
    {
        org.codehaus.jackson.map.util.ObjectBuffer r0;
        java.lang.Object[] $r1;
        org.codehaus.jackson.map.util.ObjectBuffer$Node $r2;

        r0 := @this: org.codehaus.jackson.map.util.ObjectBuffer;

        $r2 = r0.<org.codehaus.jackson.map.util.ObjectBuffer: org.codehaus.jackson.map.util.ObjectBuffer$Node _bufferTail>;

        if $r2 == null goto label1;

        $r2 = r0.<org.codehaus.jackson.map.util.ObjectBuffer: org.codehaus.jackson.map.util.ObjectBuffer$Node _bufferTail>;

        $r1 = virtualinvoke $r2.<org.codehaus.jackson.map.util.ObjectBuffer$Node: java.lang.Object[] getData()>();

        r0.<org.codehaus.jackson.map.util.ObjectBuffer: java.lang.Object[] _freeBuffer> = $r1;

     label1:
        r0.<org.codehaus.jackson.map.util.ObjectBuffer: org.codehaus.jackson.map.util.ObjectBuffer$Node _bufferTail> = null;

        r0.<org.codehaus.jackson.map.util.ObjectBuffer: org.codehaus.jackson.map.util.ObjectBuffer$Node _bufferHead> = null;

        r0.<org.codehaus.jackson.map.util.ObjectBuffer: int _bufferedEntryCount> = 0;

        return;
    }

    public java.lang.Object[] appendCompletedChunk(java.lang.Object[])
    {
        org.codehaus.jackson.map.util.ObjectBuffer r0;
        java.lang.Object[] $r1;
        org.codehaus.jackson.map.util.ObjectBuffer$Node r2, $r3;
        int i0, $i1;

        r0 := @this: org.codehaus.jackson.map.util.ObjectBuffer;

        $r1 := @parameter0: java.lang.Object[];

        r2 = new org.codehaus.jackson.map.util.ObjectBuffer$Node;

        specialinvoke r2.<org.codehaus.jackson.map.util.ObjectBuffer$Node: void <init>(java.lang.Object[])>($r1);

        $r3 = r0.<org.codehaus.jackson.map.util.ObjectBuffer: org.codehaus.jackson.map.util.ObjectBuffer$Node _bufferHead>;

        if $r3 != null goto label3;

        r0.<org.codehaus.jackson.map.util.ObjectBuffer: org.codehaus.jackson.map.util.ObjectBuffer$Node _bufferTail> = r2;

        r0.<org.codehaus.jackson.map.util.ObjectBuffer: org.codehaus.jackson.map.util.ObjectBuffer$Node _bufferHead> = r2;

     label1:
        i0 = lengthof $r1;

        $i1 = r0.<org.codehaus.jackson.map.util.ObjectBuffer: int _bufferedEntryCount>;

        $i1 = $i1 + i0;

        r0.<org.codehaus.jackson.map.util.ObjectBuffer: int _bufferedEntryCount> = $i1;

        if i0 >= 16384 goto label4;

        i0 = i0 + i0;

     label2:
        $r1 = newarray (java.lang.Object)[i0];

        return $r1;

     label3:
        $r3 = r0.<org.codehaus.jackson.map.util.ObjectBuffer: org.codehaus.jackson.map.util.ObjectBuffer$Node _bufferTail>;

        virtualinvoke $r3.<org.codehaus.jackson.map.util.ObjectBuffer$Node: void linkNext(org.codehaus.jackson.map.util.ObjectBuffer$Node)>(r2);

        r0.<org.codehaus.jackson.map.util.ObjectBuffer: org.codehaus.jackson.map.util.ObjectBuffer$Node _bufferTail> = r2;

        goto label1;

     label4:
        $i1 = i0 >> 2;

        i0 = i0 + $i1;

        goto label2;
    }

    public int bufferedSize()
    {
        org.codehaus.jackson.map.util.ObjectBuffer r0;
        int i0;

        r0 := @this: org.codehaus.jackson.map.util.ObjectBuffer;

        i0 = r0.<org.codehaus.jackson.map.util.ObjectBuffer: int _bufferedEntryCount>;

        return i0;
    }

    public void completeAndClearBuffer(java.lang.Object[], int, java.util.List)
    {
        org.codehaus.jackson.map.util.ObjectBuffer r0;
        java.lang.Object[] $r1, $r4;
        int $i0, i1, i2;
        java.util.List r2;
        org.codehaus.jackson.map.util.ObjectBuffer$Node r3;
        java.lang.Object $r5;

        r0 := @this: org.codehaus.jackson.map.util.ObjectBuffer;

        $r1 := @parameter0: java.lang.Object[];

        $i0 := @parameter1: int;

        r2 := @parameter2: java.util.List;

        r3 = r0.<org.codehaus.jackson.map.util.ObjectBuffer: org.codehaus.jackson.map.util.ObjectBuffer$Node _bufferHead>;

     label1:
        if r3 == null goto label4;

        $r4 = virtualinvoke r3.<org.codehaus.jackson.map.util.ObjectBuffer$Node: java.lang.Object[] getData()>();

        i2 = 0;

        i1 = lengthof $r4;

     label2:
        if i2 >= i1 goto label3;

        $r5 = $r4[i2];

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r5);

        i2 = i2 + 1;

        goto label2;

     label3:
        r3 = virtualinvoke r3.<org.codehaus.jackson.map.util.ObjectBuffer$Node: org.codehaus.jackson.map.util.ObjectBuffer$Node next()>();

        goto label1;

     label4:
        i1 = 0;

     label5:
        if i1 >= $i0 goto label6;

        $r5 = $r1[i1];

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r5);

        i1 = i1 + 1;

        goto label5;

     label6:
        return;
    }

    public java.lang.Object[] completeAndClearBuffer(java.lang.Object[], int)
    {
        org.codehaus.jackson.map.util.ObjectBuffer r0;
        java.lang.Object[] $r1, r2;
        int $i0, i1;

        r0 := @this: org.codehaus.jackson.map.util.ObjectBuffer;

        $r1 := @parameter0: java.lang.Object[];

        $i0 := @parameter1: int;

        i1 = r0.<org.codehaus.jackson.map.util.ObjectBuffer: int _bufferedEntryCount>;

        i1 = $i0 + i1;

        r2 = newarray (java.lang.Object)[i1];

        virtualinvoke r0.<org.codehaus.jackson.map.util.ObjectBuffer: void _copyTo(java.lang.Object,int,java.lang.Object[],int)>(r2, i1, $r1, $i0);

        return r2;
    }

    public java.lang.Object[] completeAndClearBuffer(java.lang.Object[], int, java.lang.Class)
    {
        org.codehaus.jackson.map.util.ObjectBuffer r0;
        java.lang.Object[] $r1, $r4;
        int $i0, i1;
        java.lang.Class r2;
        java.lang.Object $r3;

        r0 := @this: org.codehaus.jackson.map.util.ObjectBuffer;

        $r1 := @parameter0: java.lang.Object[];

        $i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Class;

        i1 = r0.<org.codehaus.jackson.map.util.ObjectBuffer: int _bufferedEntryCount>;

        i1 = $i0 + i1;

        $r3 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(r2, i1);

        $r4 = (java.lang.Object[]) $r3;

        virtualinvoke r0.<org.codehaus.jackson.map.util.ObjectBuffer: void _copyTo(java.lang.Object,int,java.lang.Object[],int)>($r4, i1, $r1, $i0);

        virtualinvoke r0.<org.codehaus.jackson.map.util.ObjectBuffer: void _reset()>();

        return $r4;
    }

    public int initialCapacity()
    {
        org.codehaus.jackson.map.util.ObjectBuffer r0;
        java.lang.Object[] $r1;
        int $i0;

        r0 := @this: org.codehaus.jackson.map.util.ObjectBuffer;

        $r1 = r0.<org.codehaus.jackson.map.util.ObjectBuffer: java.lang.Object[] _freeBuffer>;

        if $r1 != null goto label1;

        return 0;

     label1:
        $r1 = r0.<org.codehaus.jackson.map.util.ObjectBuffer: java.lang.Object[] _freeBuffer>;

        $i0 = lengthof $r1;

        return $i0;
    }

    public java.lang.Object[] resetAndStart()
    {
        org.codehaus.jackson.map.util.ObjectBuffer r0;
        java.lang.Object[] $r1;

        r0 := @this: org.codehaus.jackson.map.util.ObjectBuffer;

        virtualinvoke r0.<org.codehaus.jackson.map.util.ObjectBuffer: void _reset()>();

        $r1 = r0.<org.codehaus.jackson.map.util.ObjectBuffer: java.lang.Object[] _freeBuffer>;

        if $r1 != null goto label1;

        $r1 = newarray (java.lang.Object)[12];

        return $r1;

     label1:
        $r1 = r0.<org.codehaus.jackson.map.util.ObjectBuffer: java.lang.Object[] _freeBuffer>;

        return $r1;
    }

    public static void <clinit>()
    {
        <org.codehaus.jackson.map.util.ObjectBuffer: int SMALL_CHUNK_SIZE> = 16384;

        <org.codehaus.jackson.map.util.ObjectBuffer: int MAX_CHUNK_SIZE> = 262144;

        <org.codehaus.jackson.map.util.ObjectBuffer: int INITIAL_CHUNK_SIZE> = 12;

        return;
    }
}
