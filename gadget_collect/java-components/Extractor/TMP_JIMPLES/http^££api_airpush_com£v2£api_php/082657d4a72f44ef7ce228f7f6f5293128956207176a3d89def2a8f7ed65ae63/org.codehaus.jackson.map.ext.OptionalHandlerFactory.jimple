public class org.codehaus.jackson.map.ext.OptionalHandlerFactory extends java.lang.Object
{
    private static final java.lang.String CLASS_NAME_DOM_DOCUMENT;
    private static final java.lang.String CLASS_NAME_DOM_NODE;
    private static final java.lang.String DESERIALIZERS_FOR_JAVAX_XML;
    private static final java.lang.String DESERIALIZERS_FOR_JODA_DATETIME;
    private static final java.lang.String DESERIALIZER_FOR_DOM_DOCUMENT;
    private static final java.lang.String DESERIALIZER_FOR_DOM_NODE;
    private static final java.lang.String PACKAGE_PREFIX_JAVAX_XML;
    private static final java.lang.String PACKAGE_PREFIX_JODA_DATETIME;
    private static final java.lang.String SERIALIZERS_FOR_JAVAX_XML;
    private static final java.lang.String SERIALIZERS_FOR_JODA_DATETIME;
    private static final java.lang.String SERIALIZER_FOR_DOM_NODE;
    public static final org.codehaus.jackson.map.ext.OptionalHandlerFactory instance;

    static void <clinit>()
    {
        org.codehaus.jackson.map.ext.OptionalHandlerFactory $r0;

        <org.codehaus.jackson.map.ext.OptionalHandlerFactory: java.lang.String SERIALIZER_FOR_DOM_NODE> = "org.codehaus.jackson.map.ext.DOMSerializer";

        <org.codehaus.jackson.map.ext.OptionalHandlerFactory: java.lang.String SERIALIZERS_FOR_JODA_DATETIME> = "org.codehaus.jackson.map.ext.JodaSerializers";

        <org.codehaus.jackson.map.ext.OptionalHandlerFactory: java.lang.String SERIALIZERS_FOR_JAVAX_XML> = "org.codehaus.jackson.map.ext.CoreXMLSerializers";

        <org.codehaus.jackson.map.ext.OptionalHandlerFactory: java.lang.String PACKAGE_PREFIX_JODA_DATETIME> = "org.joda.time.";

        <org.codehaus.jackson.map.ext.OptionalHandlerFactory: java.lang.String PACKAGE_PREFIX_JAVAX_XML> = "javax.xml.";

        <org.codehaus.jackson.map.ext.OptionalHandlerFactory: java.lang.String DESERIALIZER_FOR_DOM_NODE> = "org.codehaus.jackson.map.ext.DOMDeserializer$NodeDeserializer";

        <org.codehaus.jackson.map.ext.OptionalHandlerFactory: java.lang.String DESERIALIZER_FOR_DOM_DOCUMENT> = "org.codehaus.jackson.map.ext.DOMDeserializer$DocumentDeserializer";

        <org.codehaus.jackson.map.ext.OptionalHandlerFactory: java.lang.String DESERIALIZERS_FOR_JODA_DATETIME> = "org.codehaus.jackson.map.ext.JodaDeserializers";

        <org.codehaus.jackson.map.ext.OptionalHandlerFactory: java.lang.String DESERIALIZERS_FOR_JAVAX_XML> = "org.codehaus.jackson.map.ext.CoreXMLDeserializers";

        <org.codehaus.jackson.map.ext.OptionalHandlerFactory: java.lang.String CLASS_NAME_DOM_NODE> = "org.w3c.dom.Node";

        <org.codehaus.jackson.map.ext.OptionalHandlerFactory: java.lang.String CLASS_NAME_DOM_DOCUMENT> = "org.w3c.dom.Node";

        $r0 = new org.codehaus.jackson.map.ext.OptionalHandlerFactory;

        specialinvoke $r0.<org.codehaus.jackson.map.ext.OptionalHandlerFactory: void <init>()>();

        <org.codehaus.jackson.map.ext.OptionalHandlerFactory: org.codehaus.jackson.map.ext.OptionalHandlerFactory instance> = $r0;

        return;
    }

    protected void <init>()
    {
        org.codehaus.jackson.map.ext.OptionalHandlerFactory r0;

        r0 := @this: org.codehaus.jackson.map.ext.OptionalHandlerFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private boolean doesImplement(java.lang.Class, java.lang.String)
    {
        org.codehaus.jackson.map.ext.OptionalHandlerFactory r0;
        java.lang.Class r1;
        java.lang.String $r2, $r3;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.ext.OptionalHandlerFactory;

        r1 := @parameter0: java.lang.Class;

        $r2 := @parameter1: java.lang.String;

     label1:
        if r1 == null goto label4;

        $r3 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        $z0 = specialinvoke r0.<org.codehaus.jackson.map.ext.OptionalHandlerFactory: boolean hasInterface(java.lang.Class,java.lang.String)>(r1, $r2);

        if $z0 == 0 goto label3;

        return 1;

     label3:
        r1 = virtualinvoke r1.<java.lang.Class: java.lang.Class getSuperclass()>();

        goto label1;

     label4:
        return 0;
    }

    private boolean hasInterface(java.lang.Class, java.lang.String)
    {
        org.codehaus.jackson.map.ext.OptionalHandlerFactory r0;
        java.lang.Class r1;
        java.lang.String $r2, $r4;
        java.lang.Class[] $r3;
        int i0, i1;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.ext.OptionalHandlerFactory;

        r1 := @parameter0: java.lang.Class;

        $r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r1.<java.lang.Class: java.lang.Class[] getInterfaces()>();

        i0 = lengthof $r3;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r1 = $r3[i1];

        $r4 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        i0 = lengthof $r3;

        i1 = 0;

     label4:
        if i1 >= i0 goto label6;

        r1 = $r3[i1];

        $z0 = specialinvoke r0.<org.codehaus.jackson.map.ext.OptionalHandlerFactory: boolean hasInterface(java.lang.Class,java.lang.String)>(r1, $r2);

        if $z0 == 0 goto label5;

        return 1;

     label5:
        i1 = i1 + 1;

        goto label4;

     label6:
        return 0;
    }

    private boolean hasInterfaceStartingWith(java.lang.Class, java.lang.String)
    {
        org.codehaus.jackson.map.ext.OptionalHandlerFactory r0;
        java.lang.Class r1;
        java.lang.String $r2, $r4;
        java.lang.Class[] $r3;
        int i0, i1;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.ext.OptionalHandlerFactory;

        r1 := @parameter0: java.lang.Class;

        $r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r1.<java.lang.Class: java.lang.Class[] getInterfaces()>();

        i0 = lengthof $r3;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r1 = $r3[i1];

        $r4 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean startsWith(java.lang.String)>($r2);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        i0 = lengthof $r3;

        i1 = 0;

     label4:
        if i1 >= i0 goto label6;

        r1 = $r3[i1];

        $z0 = specialinvoke r0.<org.codehaus.jackson.map.ext.OptionalHandlerFactory: boolean hasInterfaceStartingWith(java.lang.Class,java.lang.String)>(r1, $r2);

        if $z0 == 0 goto label5;

        return 1;

     label5:
        i1 = i1 + 1;

        goto label4;

     label6:
        return 0;
    }

    private boolean hasSupertypeStartingWith(java.lang.Class, java.lang.String)
    {
        org.codehaus.jackson.map.ext.OptionalHandlerFactory r0;
        java.lang.Class r1, $r3;
        java.lang.String $r2, $r4;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.ext.OptionalHandlerFactory;

        r1 := @parameter0: java.lang.Class;

        $r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r1.<java.lang.Class: java.lang.Class getSuperclass()>();

     label1:
        if $r3 == null goto label3;

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean startsWith(java.lang.String)>($r2);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        $r3 = virtualinvoke $r3.<java.lang.Class: java.lang.Class getSuperclass()>();

        goto label1;

     label3:
        if r1 == null goto label5;

        $z0 = specialinvoke r0.<org.codehaus.jackson.map.ext.OptionalHandlerFactory: boolean hasInterfaceStartingWith(java.lang.Class,java.lang.String)>(r1, $r2);

        if $z0 == 0 goto label4;

        return 1;

     label4:
        r1 = virtualinvoke r1.<java.lang.Class: java.lang.Class getSuperclass()>();

        goto label3;

     label5:
        return 0;
    }

    private java.lang.Object instantiate(java.lang.String)
    {
        org.codehaus.jackson.map.ext.OptionalHandlerFactory r0;
        java.lang.String $r1;
        java.lang.Class $r2;
        java.lang.Object $r3;
        java.lang.Exception $r4;
        java.lang.LinkageError $r5;

        r0 := @this: org.codehaus.jackson.map.ext.OptionalHandlerFactory;

        $r1 := @parameter0: java.lang.String;

     label1:
        $r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r1);

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.Object newInstance()>();

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

     label4:
        return null;

     label5:
        $r5 := @caughtexception;

        goto label4;

        catch java.lang.LinkageError from label1 to label2 with label5;
        catch java.lang.Exception from label1 to label2 with label3;
    }

    public org.codehaus.jackson.map.JsonDeserializer findDeserializer(org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.DeserializationConfig, org.codehaus.jackson.map.DeserializerProvider)
    {
        org.codehaus.jackson.type.JavaType $r0;
        org.codehaus.jackson.map.DeserializationConfig $r1;
        org.codehaus.jackson.map.DeserializerProvider $r2;
        org.codehaus.jackson.map.ext.OptionalHandlerFactory r3;
        java.lang.Class $r4, $r12;
        java.lang.String $r5;
        boolean $z0;
        java.lang.Object $r6;
        org.codehaus.jackson.map.JsonDeserializer r7;
        org.codehaus.jackson.map.util.Provider $r8;
        java.util.Collection $r9;
        java.util.Iterator $r10;
        org.codehaus.jackson.map.deser.StdDeserializer r11;

        r3 := @this: org.codehaus.jackson.map.ext.OptionalHandlerFactory;

        $r0 := @parameter0: org.codehaus.jackson.type.JavaType;

        $r1 := @parameter1: org.codehaus.jackson.map.DeserializationConfig;

        $r2 := @parameter2: org.codehaus.jackson.map.DeserializerProvider;

        $r4 = virtualinvoke $r0.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean startsWith(java.lang.String)>("org.joda.time.");

        if $z0 == 0 goto label02;

        $r5 = "org.codehaus.jackson.map.ext.JodaDeserializers";

     label01:
        $r6 = specialinvoke r3.<org.codehaus.jackson.map.ext.OptionalHandlerFactory: java.lang.Object instantiate(java.lang.String)>($r5);

        if $r6 != null goto label07;

        return null;

     label02:
        $z0 = virtualinvoke $r5.<java.lang.String: boolean startsWith(java.lang.String)>("javax.xml.");

        if $z0 != 0 goto label03;

        $z0 = specialinvoke r3.<org.codehaus.jackson.map.ext.OptionalHandlerFactory: boolean hasSupertypeStartingWith(java.lang.Class,java.lang.String)>($r4, "javax.xml.");

        if $z0 == 0 goto label04;

     label03:
        $r5 = "org.codehaus.jackson.map.ext.CoreXMLDeserializers";

        goto label01;

     label04:
        $z0 = specialinvoke r3.<org.codehaus.jackson.map.ext.OptionalHandlerFactory: boolean doesImplement(java.lang.Class,java.lang.String)>($r4, "org.w3c.dom.Node");

        if $z0 == 0 goto label05;

        $r6 = specialinvoke r3.<org.codehaus.jackson.map.ext.OptionalHandlerFactory: java.lang.Object instantiate(java.lang.String)>("org.codehaus.jackson.map.ext.DOMDeserializer$DocumentDeserializer");

        r7 = (org.codehaus.jackson.map.JsonDeserializer) $r6;

        return r7;

     label05:
        $z0 = specialinvoke r3.<org.codehaus.jackson.map.ext.OptionalHandlerFactory: boolean doesImplement(java.lang.Class,java.lang.String)>($r4, "org.w3c.dom.Node");

        if $z0 == 0 goto label06;

        $r6 = specialinvoke r3.<org.codehaus.jackson.map.ext.OptionalHandlerFactory: java.lang.Object instantiate(java.lang.String)>("org.codehaus.jackson.map.ext.DOMDeserializer$NodeDeserializer");

        r7 = (org.codehaus.jackson.map.JsonDeserializer) $r6;

        return r7;

     label06:
        return null;

     label07:
        $r8 = (org.codehaus.jackson.map.util.Provider) $r6;

        $r9 = interfaceinvoke $r8.<org.codehaus.jackson.map.util.Provider: java.util.Collection provide()>();

        $r10 = interfaceinvoke $r9.<java.util.Collection: java.util.Iterator iterator()>();

     label08:
        $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label09;

        $r6 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r11 = (org.codehaus.jackson.map.deser.StdDeserializer) $r6;

        $r12 = virtualinvoke r11.<org.codehaus.jackson.map.deser.StdDeserializer: java.lang.Class getValueClass()>();

        if $r4 != $r12 goto label08;

        return r11;

     label09:
        $r10 = interfaceinvoke $r9.<java.util.Collection: java.util.Iterator iterator()>();

     label10:
        $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label11;

        $r6 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r11 = (org.codehaus.jackson.map.deser.StdDeserializer) $r6;

        $r12 = virtualinvoke r11.<org.codehaus.jackson.map.deser.StdDeserializer: java.lang.Class getValueClass()>();

        $z0 = virtualinvoke $r12.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r4);

        if $z0 == 0 goto label10;

        return r11;

     label11:
        return null;
    }

    public org.codehaus.jackson.map.JsonSerializer findSerializer(org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.introspect.BasicBeanDescription, org.codehaus.jackson.map.BeanProperty)
    {
        org.codehaus.jackson.map.SerializationConfig $r0;
        org.codehaus.jackson.type.JavaType $r1;
        org.codehaus.jackson.map.introspect.BasicBeanDescription $r2;
        org.codehaus.jackson.map.BeanProperty $r3;
        org.codehaus.jackson.map.ext.OptionalHandlerFactory r4;
        java.lang.Class $r5, r13;
        java.lang.String $r6;
        boolean $z0;
        java.lang.Object $r7;
        org.codehaus.jackson.map.JsonSerializer r8;
        org.codehaus.jackson.map.util.Provider $r9;
        java.util.Collection $r10;
        java.util.Iterator $r11;
        java.util.Map$Entry r12;

        r4 := @this: org.codehaus.jackson.map.ext.OptionalHandlerFactory;

        $r0 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        $r1 := @parameter1: org.codehaus.jackson.type.JavaType;

        $r2 := @parameter2: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        $r3 := @parameter3: org.codehaus.jackson.map.BeanProperty;

        $r5 = virtualinvoke $r1.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $z0 = virtualinvoke $r6.<java.lang.String: boolean startsWith(java.lang.String)>("org.joda.time.");

        if $z0 == 0 goto label02;

        $r6 = "org.codehaus.jackson.map.ext.JodaSerializers";

     label01:
        $r7 = specialinvoke r4.<org.codehaus.jackson.map.ext.OptionalHandlerFactory: java.lang.Object instantiate(java.lang.String)>($r6);

        if $r7 != null goto label06;

        return null;

     label02:
        $z0 = virtualinvoke $r6.<java.lang.String: boolean startsWith(java.lang.String)>("javax.xml.");

        if $z0 != 0 goto label03;

        $z0 = specialinvoke r4.<org.codehaus.jackson.map.ext.OptionalHandlerFactory: boolean hasSupertypeStartingWith(java.lang.Class,java.lang.String)>($r5, "javax.xml.");

        if $z0 == 0 goto label04;

     label03:
        $r6 = "org.codehaus.jackson.map.ext.CoreXMLSerializers";

        goto label01;

     label04:
        $z0 = specialinvoke r4.<org.codehaus.jackson.map.ext.OptionalHandlerFactory: boolean doesImplement(java.lang.Class,java.lang.String)>($r5, "org.w3c.dom.Node");

        if $z0 == 0 goto label05;

        $r7 = specialinvoke r4.<org.codehaus.jackson.map.ext.OptionalHandlerFactory: java.lang.Object instantiate(java.lang.String)>("org.codehaus.jackson.map.ext.DOMSerializer");

        r8 = (org.codehaus.jackson.map.JsonSerializer) $r7;

        return r8;

     label05:
        return null;

     label06:
        $r9 = (org.codehaus.jackson.map.util.Provider) $r7;

        $r10 = interfaceinvoke $r9.<org.codehaus.jackson.map.util.Provider: java.util.Collection provide()>();

        $r11 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();

     label07:
        $z0 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label08;

        $r7 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        r12 = (java.util.Map$Entry) $r7;

        $r7 = interfaceinvoke r12.<java.util.Map$Entry: java.lang.Object getKey()>();

        if $r5 != $r7 goto label07;

        $r7 = interfaceinvoke r12.<java.util.Map$Entry: java.lang.Object getValue()>();

        r8 = (org.codehaus.jackson.map.JsonSerializer) $r7;

        return r8;

     label08:
        $r11 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();

     label09:
        $z0 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label10;

        $r7 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        r12 = (java.util.Map$Entry) $r7;

        $r7 = interfaceinvoke r12.<java.util.Map$Entry: java.lang.Object getKey()>();

        r13 = (java.lang.Class) $r7;

        $z0 = virtualinvoke r13.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r5);

        if $z0 == 0 goto label09;

        $r7 = interfaceinvoke r12.<java.util.Map$Entry: java.lang.Object getValue()>();

        r8 = (org.codehaus.jackson.map.JsonSerializer) $r7;

        return r8;

     label10:
        return null;
    }
}
