public class org.codehaus.jackson.map.introspect.BasicClassIntrospector$GetterMethodFilter extends java.lang.Object implements org.codehaus.jackson.map.introspect.MethodFilter
{
    public static final org.codehaus.jackson.map.introspect.BasicClassIntrospector$GetterMethodFilter instance;

    static void <clinit>()
    {
        org.codehaus.jackson.map.introspect.BasicClassIntrospector$GetterMethodFilter $r0;

        $r0 = new org.codehaus.jackson.map.introspect.BasicClassIntrospector$GetterMethodFilter;

        specialinvoke $r0.<org.codehaus.jackson.map.introspect.BasicClassIntrospector$GetterMethodFilter: void <init>()>();

        <org.codehaus.jackson.map.introspect.BasicClassIntrospector$GetterMethodFilter: org.codehaus.jackson.map.introspect.BasicClassIntrospector$GetterMethodFilter instance> = $r0;

        return;
    }

    private void <init>()
    {
        org.codehaus.jackson.map.introspect.BasicClassIntrospector$GetterMethodFilter r0;

        r0 := @this: org.codehaus.jackson.map.introspect.BasicClassIntrospector$GetterMethodFilter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public boolean includeMethod(java.lang.reflect.Method)
    {
        org.codehaus.jackson.map.introspect.BasicClassIntrospector$GetterMethodFilter r0;
        java.lang.reflect.Method $r1;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.introspect.BasicClassIntrospector$GetterMethodFilter;

        $r1 := @parameter0: java.lang.reflect.Method;

        $z0 = staticinvoke <org.codehaus.jackson.map.util.ClassUtil: boolean hasGetterSignature(java.lang.reflect.Method)>($r1);

        return $z0;
    }
}
