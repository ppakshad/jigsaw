public class org.codehaus.jackson.map.util.StdDateFormat extends java.text.DateFormat
{
    static final java.lang.String[] ALL_FORMATS;
    static final java.text.SimpleDateFormat DATE_FORMAT_ISO8601;
    static final java.text.SimpleDateFormat DATE_FORMAT_ISO8601_Z;
    static final java.text.SimpleDateFormat DATE_FORMAT_PLAIN;
    static final java.text.SimpleDateFormat DATE_FORMAT_RFC1123;
    static final java.lang.String DATE_FORMAT_STR_ISO8601;
    static final java.lang.String DATE_FORMAT_STR_ISO8601_Z;
    static final java.lang.String DATE_FORMAT_STR_PLAIN;
    static final java.lang.String DATE_FORMAT_STR_RFC1123;
    public static final org.codehaus.jackson.map.util.StdDateFormat instance;
    transient java.text.SimpleDateFormat _formatISO8601;
    transient java.text.SimpleDateFormat _formatISO8601_z;
    transient java.text.SimpleDateFormat _formatPlain;
    transient java.text.SimpleDateFormat _formatRFC1123;

    static void <clinit>()
    {
        java.util.TimeZone $r0;
        java.lang.String[] $r1;
        java.text.SimpleDateFormat $r2;
        org.codehaus.jackson.map.util.StdDateFormat $r3;

        <org.codehaus.jackson.map.util.StdDateFormat: java.lang.String DATE_FORMAT_STR_RFC1123> = "EEE, dd MMM yyyy HH:mm:ss zzz";

        <org.codehaus.jackson.map.util.StdDateFormat: java.lang.String DATE_FORMAT_STR_PLAIN> = "yyyy-MM-dd";

        <org.codehaus.jackson.map.util.StdDateFormat: java.lang.String DATE_FORMAT_STR_ISO8601_Z> = "yyyy-MM-dd\'T\'HH:mm:ss.SSS\'Z\'";

        <org.codehaus.jackson.map.util.StdDateFormat: java.lang.String DATE_FORMAT_STR_ISO8601> = "yyyy-MM-dd\'T\'HH:mm:ss.SSSZ";

        $r1 = newarray (java.lang.String)[4];

        $r1[0] = "yyyy-MM-dd\'T\'HH:mm:ss.SSSZ";

        $r1[1] = "yyyy-MM-dd\'T\'HH:mm:ss.SSS\'Z\'";

        $r1[2] = "EEE, dd MMM yyyy HH:mm:ss zzz";

        $r1[3] = "yyyy-MM-dd";

        <org.codehaus.jackson.map.util.StdDateFormat: java.lang.String[] ALL_FORMATS> = $r1;

        $r0 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("GMT");

        $r2 = new java.text.SimpleDateFormat;

        specialinvoke $r2.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("EEE, dd MMM yyyy HH:mm:ss zzz");

        <org.codehaus.jackson.map.util.StdDateFormat: java.text.SimpleDateFormat DATE_FORMAT_RFC1123> = $r2;

        $r2 = <org.codehaus.jackson.map.util.StdDateFormat: java.text.SimpleDateFormat DATE_FORMAT_RFC1123>;

        virtualinvoke $r2.<java.text.SimpleDateFormat: void setTimeZone(java.util.TimeZone)>($r0);

        $r2 = new java.text.SimpleDateFormat;

        specialinvoke $r2.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("yyyy-MM-dd\'T\'HH:mm:ss.SSSZ");

        <org.codehaus.jackson.map.util.StdDateFormat: java.text.SimpleDateFormat DATE_FORMAT_ISO8601> = $r2;

        $r2 = <org.codehaus.jackson.map.util.StdDateFormat: java.text.SimpleDateFormat DATE_FORMAT_ISO8601>;

        virtualinvoke $r2.<java.text.SimpleDateFormat: void setTimeZone(java.util.TimeZone)>($r0);

        $r2 = new java.text.SimpleDateFormat;

        specialinvoke $r2.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("yyyy-MM-dd\'T\'HH:mm:ss.SSS\'Z\'");

        <org.codehaus.jackson.map.util.StdDateFormat: java.text.SimpleDateFormat DATE_FORMAT_ISO8601_Z> = $r2;

        $r2 = <org.codehaus.jackson.map.util.StdDateFormat: java.text.SimpleDateFormat DATE_FORMAT_ISO8601_Z>;

        virtualinvoke $r2.<java.text.SimpleDateFormat: void setTimeZone(java.util.TimeZone)>($r0);

        $r2 = new java.text.SimpleDateFormat;

        specialinvoke $r2.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("yyyy-MM-dd");

        <org.codehaus.jackson.map.util.StdDateFormat: java.text.SimpleDateFormat DATE_FORMAT_PLAIN> = $r2;

        $r2 = <org.codehaus.jackson.map.util.StdDateFormat: java.text.SimpleDateFormat DATE_FORMAT_PLAIN>;

        virtualinvoke $r2.<java.text.SimpleDateFormat: void setTimeZone(java.util.TimeZone)>($r0);

        $r3 = new org.codehaus.jackson.map.util.StdDateFormat;

        specialinvoke $r3.<org.codehaus.jackson.map.util.StdDateFormat: void <init>()>();

        <org.codehaus.jackson.map.util.StdDateFormat: org.codehaus.jackson.map.util.StdDateFormat instance> = $r3;

        return;
    }

    public void <init>()
    {
        org.codehaus.jackson.map.util.StdDateFormat r0;

        r0 := @this: org.codehaus.jackson.map.util.StdDateFormat;

        specialinvoke r0.<java.text.DateFormat: void <init>()>();

        return;
    }

    public static java.text.DateFormat getBlueprintISO8601Format()
    {
        java.text.SimpleDateFormat r0;

        r0 = <org.codehaus.jackson.map.util.StdDateFormat: java.text.SimpleDateFormat DATE_FORMAT_ISO8601>;

        return r0;
    }

    public static java.text.DateFormat getBlueprintRFC1123Format()
    {
        java.text.SimpleDateFormat r0;

        r0 = <org.codehaus.jackson.map.util.StdDateFormat: java.text.SimpleDateFormat DATE_FORMAT_RFC1123>;

        return r0;
    }

    public static java.text.DateFormat getISO8601Format(java.util.TimeZone)
    {
        java.util.TimeZone $r0;
        java.text.SimpleDateFormat $r1;
        java.lang.Object $r2;

        $r0 := @parameter0: java.util.TimeZone;

        $r1 = <org.codehaus.jackson.map.util.StdDateFormat: java.text.SimpleDateFormat DATE_FORMAT_ISO8601>;

        $r2 = virtualinvoke $r1.<java.text.SimpleDateFormat: java.lang.Object clone()>();

        $r1 = (java.text.SimpleDateFormat) $r2;

        virtualinvoke $r1.<java.text.DateFormat: void setTimeZone(java.util.TimeZone)>($r0);

        return $r1;
    }

    public static java.text.DateFormat getRFC1123Format(java.util.TimeZone)
    {
        java.util.TimeZone $r0;
        java.text.SimpleDateFormat $r1;
        java.lang.Object $r2;

        $r0 := @parameter0: java.util.TimeZone;

        $r1 = <org.codehaus.jackson.map.util.StdDateFormat: java.text.SimpleDateFormat DATE_FORMAT_RFC1123>;

        $r2 = virtualinvoke $r1.<java.text.SimpleDateFormat: java.lang.Object clone()>();

        $r1 = (java.text.SimpleDateFormat) $r2;

        virtualinvoke $r1.<java.text.DateFormat: void setTimeZone(java.util.TimeZone)>($r0);

        return $r1;
    }

    private static final boolean hasTimeZone(java.lang.String)
    {
        java.lang.String $r0;
        int $i0, $i1;
        char $c2;

        $r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        if $i0 < 6 goto label6;

        $i1 = $i0 - 6;

        $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i1);

        if $c2 == 43 goto label1;

        if $c2 != 45 goto label2;

     label1:
        return 1;

     label2:
        $i1 = $i0 - 5;

        $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i1);

        if $c2 == 43 goto label3;

        if $c2 != 45 goto label4;

     label3:
        return 1;

     label4:
        $i0 = $i0 - 3;

        $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i0);

        if $c2 == 43 goto label5;

        if $c2 != 45 goto label6;

     label5:
        return 1;

     label6:
        return 0;
    }

    public volatile java.lang.Object clone()
    {
        org.codehaus.jackson.map.util.StdDateFormat r0;

        r0 := @this: org.codehaus.jackson.map.util.StdDateFormat;

        r0 = virtualinvoke r0.<org.codehaus.jackson.map.util.StdDateFormat: org.codehaus.jackson.map.util.StdDateFormat clone()>();

        return r0;
    }

    public org.codehaus.jackson.map.util.StdDateFormat clone()
    {
        org.codehaus.jackson.map.util.StdDateFormat r0;

        r0 := @this: org.codehaus.jackson.map.util.StdDateFormat;

        r0 = new org.codehaus.jackson.map.util.StdDateFormat;

        specialinvoke r0.<org.codehaus.jackson.map.util.StdDateFormat: void <init>()>();

        return r0;
    }

    public java.lang.StringBuffer format(java.util.Date, java.lang.StringBuffer, java.text.FieldPosition)
    {
        org.codehaus.jackson.map.util.StdDateFormat r0;
        java.util.Date $r1;
        java.lang.StringBuffer $r2;
        java.text.FieldPosition $r3;
        java.text.SimpleDateFormat $r4;
        java.lang.Object $r5;

        r0 := @this: org.codehaus.jackson.map.util.StdDateFormat;

        $r1 := @parameter0: java.util.Date;

        $r2 := @parameter1: java.lang.StringBuffer;

        $r3 := @parameter2: java.text.FieldPosition;

        $r4 = r0.<org.codehaus.jackson.map.util.StdDateFormat: java.text.SimpleDateFormat _formatISO8601>;

        if $r4 != null goto label1;

        $r4 = <org.codehaus.jackson.map.util.StdDateFormat: java.text.SimpleDateFormat DATE_FORMAT_ISO8601>;

        $r5 = virtualinvoke $r4.<java.text.SimpleDateFormat: java.lang.Object clone()>();

        $r4 = (java.text.SimpleDateFormat) $r5;

        r0.<org.codehaus.jackson.map.util.StdDateFormat: java.text.SimpleDateFormat _formatISO8601> = $r4;

     label1:
        $r4 = r0.<org.codehaus.jackson.map.util.StdDateFormat: java.text.SimpleDateFormat _formatISO8601>;

        $r2 = virtualinvoke $r4.<java.text.SimpleDateFormat: java.lang.StringBuffer format(java.util.Date,java.lang.StringBuffer,java.text.FieldPosition)>($r1, $r2, $r3);

        return $r2;
    }

    protected boolean looksLikeISO8601(java.lang.String)
    {
        org.codehaus.jackson.map.util.StdDateFormat r0;
        java.lang.String $r1;
        int $i0;
        char $c1;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.util.StdDateFormat;

        $r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 < 5 goto label1;

        $c1 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(0);

        $z0 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c1);

        if $z0 == 0 goto label1;

        $c1 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(3);

        $z0 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c1);

        if $z0 == 0 goto label1;

        $c1 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(4);

        if $c1 != 45 goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.util.Date parse(java.lang.String) throws java.text.ParseException
    {
        org.codehaus.jackson.map.util.StdDateFormat r0;
        java.lang.String[] r1;
        java.lang.String r2, $r5;
        int i0, i1, $i2;
        java.text.ParsePosition r3;
        java.lang.StringBuilder r4;
        java.util.Date $r6;
        java.text.ParseException $r7;
        java.lang.Object[] $r8;

        r0 := @this: org.codehaus.jackson.map.util.StdDateFormat;

        r2 := @parameter0: java.lang.String;

        $r5 = virtualinvoke r2.<java.lang.String: java.lang.String trim()>();

        r3 = new java.text.ParsePosition;

        specialinvoke r3.<java.text.ParsePosition: void <init>(int)>(0);

        $r6 = virtualinvoke r0.<org.codehaus.jackson.map.util.StdDateFormat: java.util.Date parse(java.lang.String,java.text.ParsePosition)>($r5, r3);

        if $r6 == null goto label1;

        return $r6;

     label1:
        r4 = new java.lang.StringBuilder;

        specialinvoke r4.<java.lang.StringBuilder: void <init>()>();

        r1 = <org.codehaus.jackson.map.util.StdDateFormat: java.lang.String[] ALL_FORMATS>;

        i0 = lengthof r1;

        i1 = 0;

     label2:
        if i1 >= i0 goto label5;

        r2 = r1[i1];

        $i2 = virtualinvoke r4.<java.lang.StringBuilder: int length()>();

        if $i2 <= 0 goto label4;

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\", \"");

     label3:
        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        i1 = i1 + 1;

        goto label2;

     label4:
        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);

        goto label3;

     label5:
        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);

        $r7 = new java.text.ParseException;

        $r8 = newarray (java.lang.Object)[2];

        $r8[0] = $r5;

        r2 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8[1] = r2;

        r2 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Can not parse date \"%s\": not compatible with any of standard forms (%s)", $r8);

        i0 = virtualinvoke r3.<java.text.ParsePosition: int getErrorIndex()>();

        specialinvoke $r7.<java.text.ParseException: void <init>(java.lang.String,int)>(r2, i0);

        throw $r7;
    }

    public java.util.Date parse(java.lang.String, java.text.ParsePosition)
    {
        org.codehaus.jackson.map.util.StdDateFormat r0;
        java.lang.String $r1;
        java.text.ParsePosition $r2;
        boolean $z0;
        java.util.Date $r3;
        int $i0;
        char $c1;
        long $l2;

        r0 := @this: org.codehaus.jackson.map.util.StdDateFormat;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.text.ParsePosition;

        $z0 = virtualinvoke r0.<org.codehaus.jackson.map.util.StdDateFormat: boolean looksLikeISO8601(java.lang.String)>($r1);

        if $z0 == 0 goto label1;

        $r3 = virtualinvoke r0.<org.codehaus.jackson.map.util.StdDateFormat: java.util.Date parseAsISO8601(java.lang.String,java.text.ParsePosition)>($r1, $r2);

        return $r3;

     label1:
        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

     label2:
        $i0 = $i0 + -1;

        if $i0 < 0 goto label3;

        $c1 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i0);

        if $c1 < 48 goto label3;

        if $c1 <= 57 goto label2;

     label3:
        if $i0 >= 0 goto label4;

        $z0 = staticinvoke <org.codehaus.jackson.io.NumberInput: boolean inLongRange(java.lang.String,boolean)>($r1, 0);

        if $z0 == 0 goto label4;

        $r3 = new java.util.Date;

        $l2 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r1);

        specialinvoke $r3.<java.util.Date: void <init>(long)>($l2);

        return $r3;

     label4:
        $r3 = virtualinvoke r0.<org.codehaus.jackson.map.util.StdDateFormat: java.util.Date parseAsRFC1123(java.lang.String,java.text.ParsePosition)>($r1, $r2);

        return $r3;
    }

    protected java.util.Date parseAsISO8601(java.lang.String, java.text.ParsePosition)
    {
        org.codehaus.jackson.map.util.StdDateFormat r0;
        java.text.ParsePosition $r1;
        int i0, $i1;
        java.lang.String $r2;
        char $c2;
        boolean $z0;
        java.text.SimpleDateFormat r3, $r7;
        java.lang.Object $r4;
        java.util.Date $r5;
        java.lang.StringBuilder r6;

        r0 := @this: org.codehaus.jackson.map.util.StdDateFormat;

        $r2 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.text.ParsePosition;

        i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        $i1 = i0 - 1;

        $c2 = virtualinvoke $r2.<java.lang.String: char charAt(int)>($i1);

        if i0 > 10 goto label02;

        $z0 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c2);

        if $z0 == 0 goto label02;

        r3 = r0.<org.codehaus.jackson.map.util.StdDateFormat: java.text.SimpleDateFormat _formatPlain>;

        if r3 != null goto label01;

        r3 = <org.codehaus.jackson.map.util.StdDateFormat: java.text.SimpleDateFormat DATE_FORMAT_PLAIN>;

        $r4 = virtualinvoke r3.<java.text.SimpleDateFormat: java.lang.Object clone()>();

        r3 = (java.text.SimpleDateFormat) $r4;

        r0.<org.codehaus.jackson.map.util.StdDateFormat: java.text.SimpleDateFormat _formatPlain> = r3;

     label01:
        $r5 = virtualinvoke r3.<java.text.SimpleDateFormat: java.util.Date parse(java.lang.String,java.text.ParsePosition)>($r2, $r1);

        return $r5;

     label02:
        if $c2 != 90 goto label04;

        r3 = r0.<org.codehaus.jackson.map.util.StdDateFormat: java.text.SimpleDateFormat _formatISO8601_z>;

        if r3 != null goto label03;

        r3 = <org.codehaus.jackson.map.util.StdDateFormat: java.text.SimpleDateFormat DATE_FORMAT_ISO8601_Z>;

        $r4 = virtualinvoke r3.<java.text.SimpleDateFormat: java.lang.Object clone()>();

        r3 = (java.text.SimpleDateFormat) $r4;

        r0.<org.codehaus.jackson.map.util.StdDateFormat: java.text.SimpleDateFormat _formatISO8601_z> = r3;

     label03:
        $i1 = i0 - 4;

        $c2 = virtualinvoke $r2.<java.lang.String: char charAt(int)>($i1);

        if $c2 != 58 goto label01;

        r6 = new java.lang.StringBuilder;

        specialinvoke r6.<java.lang.StringBuilder: void <init>(java.lang.String)>($r2);

        i0 = i0 - 1;

        virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.String)>(i0, ".000");

        $r2 = virtualinvoke r6.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label01;

     label04:
        $z0 = staticinvoke <org.codehaus.jackson.map.util.StdDateFormat: boolean hasTimeZone(java.lang.String)>($r2);

        if $z0 == 0 goto label09;

        $i1 = i0 - 3;

        $c2 = virtualinvoke $r2.<java.lang.String: char charAt(int)>($i1);

        if $c2 != 58 goto label07;

        r6 = new java.lang.StringBuilder;

        specialinvoke r6.<java.lang.StringBuilder: void <init>(java.lang.String)>($r2);

        $i1 = i0 - 3;

        i0 = i0 - 2;

        virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder delete(int,int)>($i1, i0);

        $r2 = virtualinvoke r6.<java.lang.StringBuilder: java.lang.String toString()>();

     label05:
        i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        $i1 = i0 - 9;

        $c2 = virtualinvoke $r2.<java.lang.String: char charAt(int)>($i1);

        $z0 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c2);

        if $z0 == 0 goto label06;

        r6 = new java.lang.StringBuilder;

        specialinvoke r6.<java.lang.StringBuilder: void <init>(java.lang.String)>($r2);

        i0 = i0 - 5;

        virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.String)>(i0, ".000");

        $r2 = virtualinvoke r6.<java.lang.StringBuilder: java.lang.String toString()>();

     label06:
        r3 = r0.<org.codehaus.jackson.map.util.StdDateFormat: java.text.SimpleDateFormat _formatISO8601>;

        $r7 = r0.<org.codehaus.jackson.map.util.StdDateFormat: java.text.SimpleDateFormat _formatISO8601>;

        if $r7 != null goto label01;

        r3 = <org.codehaus.jackson.map.util.StdDateFormat: java.text.SimpleDateFormat DATE_FORMAT_ISO8601>;

        $r4 = virtualinvoke r3.<java.text.SimpleDateFormat: java.lang.Object clone()>();

        r3 = (java.text.SimpleDateFormat) $r4;

        r0.<org.codehaus.jackson.map.util.StdDateFormat: java.text.SimpleDateFormat _formatISO8601> = r3;

        goto label01;

     label07:
        if $c2 == 43 goto label08;

        if $c2 != 45 goto label05;

     label08:
        r6 = new java.lang.StringBuilder;

        specialinvoke r6.<java.lang.StringBuilder: void <init>()>();

        r6 = virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        r6 = virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("00");

        $r2 = virtualinvoke r6.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label05;

     label09:
        r6 = new java.lang.StringBuilder;

        specialinvoke r6.<java.lang.StringBuilder: void <init>(java.lang.String)>($r2);

        $i1 = virtualinvoke $r2.<java.lang.String: int lastIndexOf(int)>(84);

        i0 = i0 - $i1;

        i0 = i0 - 1;

        if i0 > 8 goto label10;

        virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".000");

     label10:
        virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(90);

        $r2 = virtualinvoke r6.<java.lang.StringBuilder: java.lang.String toString()>();

        r3 = r0.<org.codehaus.jackson.map.util.StdDateFormat: java.text.SimpleDateFormat _formatISO8601_z>;

        if r3 != null goto label01;

        r3 = <org.codehaus.jackson.map.util.StdDateFormat: java.text.SimpleDateFormat DATE_FORMAT_ISO8601_Z>;

        $r4 = virtualinvoke r3.<java.text.SimpleDateFormat: java.lang.Object clone()>();

        r3 = (java.text.SimpleDateFormat) $r4;

        r0.<org.codehaus.jackson.map.util.StdDateFormat: java.text.SimpleDateFormat _formatISO8601_z> = r3;

        goto label01;
    }

    protected java.util.Date parseAsRFC1123(java.lang.String, java.text.ParsePosition)
    {
        org.codehaus.jackson.map.util.StdDateFormat r0;
        java.lang.String $r1;
        java.text.ParsePosition $r2;
        java.text.SimpleDateFormat $r3;
        java.lang.Object $r4;
        java.util.Date $r5;

        r0 := @this: org.codehaus.jackson.map.util.StdDateFormat;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.text.ParsePosition;

        $r3 = r0.<org.codehaus.jackson.map.util.StdDateFormat: java.text.SimpleDateFormat _formatRFC1123>;

        if $r3 != null goto label1;

        $r3 = <org.codehaus.jackson.map.util.StdDateFormat: java.text.SimpleDateFormat DATE_FORMAT_RFC1123>;

        $r4 = virtualinvoke $r3.<java.text.SimpleDateFormat: java.lang.Object clone()>();

        $r3 = (java.text.SimpleDateFormat) $r4;

        r0.<org.codehaus.jackson.map.util.StdDateFormat: java.text.SimpleDateFormat _formatRFC1123> = $r3;

     label1:
        $r3 = r0.<org.codehaus.jackson.map.util.StdDateFormat: java.text.SimpleDateFormat _formatRFC1123>;

        $r5 = virtualinvoke $r3.<java.text.SimpleDateFormat: java.util.Date parse(java.lang.String,java.text.ParsePosition)>($r1, $r2);

        return $r5;
    }
}
