public abstract class org.codehaus.jackson.map.deser.BasicDeserializerFactory extends org.codehaus.jackson.map.DeserializerFactory
{
    static final org.codehaus.jackson.type.JavaType TYPE_STRING;
    protected static final java.util.HashMap _arrayDeserializers;
    static final java.util.HashMap _collectionFallbacks;
    static final java.util.HashMap _mapFallbacks;
    static final java.util.HashMap _simpleDeserializers;
    protected org.codehaus.jackson.map.ext.OptionalHandlerFactory optionalHandlers;

    static void <clinit>()
    {
        org.codehaus.jackson.type.JavaType $r0;
        java.util.HashMap $r1;
        java.lang.Class $r2, $r4;
        java.lang.String $r3;
        java.lang.ClassNotFoundException $r5;

        $r0 = staticinvoke <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType type(java.lang.reflect.Type)>(class "Ljava/lang/String;");

        <org.codehaus.jackson.map.deser.BasicDeserializerFactory: org.codehaus.jackson.type.JavaType TYPE_STRING> = $r0;

        $r1 = staticinvoke <org.codehaus.jackson.map.deser.StdDeserializers: java.util.HashMap constructAll()>();

        <org.codehaus.jackson.map.deser.BasicDeserializerFactory: java.util.HashMap _simpleDeserializers> = $r1;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        <org.codehaus.jackson.map.deser.BasicDeserializerFactory: java.util.HashMap _mapFallbacks> = $r1;

        $r1 = <org.codehaus.jackson.map.deser.BasicDeserializerFactory: java.util.HashMap _mapFallbacks>;

        $r2 = class "Ljava/util/Map;";

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, class "Ljava/util/LinkedHashMap;");

        $r1 = <org.codehaus.jackson.map.deser.BasicDeserializerFactory: java.util.HashMap _mapFallbacks>;

        $r2 = class "Ljava/util/concurrent/ConcurrentMap;";

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, class "Ljava/util/concurrent/ConcurrentHashMap;");

        $r1 = <org.codehaus.jackson.map.deser.BasicDeserializerFactory: java.util.HashMap _mapFallbacks>;

        $r2 = class "Ljava/util/SortedMap;";

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, class "Ljava/util/TreeMap;");

        $r1 = <org.codehaus.jackson.map.deser.BasicDeserializerFactory: java.util.HashMap _mapFallbacks>;

        virtualinvoke $r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.util.NavigableMap", class "Ljava/util/TreeMap;");

     label1:
        $r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("java.util.ConcurrentNavigableMap");

        $r4 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("java.util.ConcurrentSkipListMap");

     label2:
        $r1 = <org.codehaus.jackson.map.deser.BasicDeserializerFactory: java.util.HashMap _mapFallbacks>;

     label3:
        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r4);

     label4:
        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        <org.codehaus.jackson.map.deser.BasicDeserializerFactory: java.util.HashMap _collectionFallbacks> = $r1;

        $r1 = <org.codehaus.jackson.map.deser.BasicDeserializerFactory: java.util.HashMap _collectionFallbacks>;

        $r2 = class "Ljava/util/Collection;";

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, class "Ljava/util/ArrayList;");

        $r1 = <org.codehaus.jackson.map.deser.BasicDeserializerFactory: java.util.HashMap _collectionFallbacks>;

        $r2 = class "Ljava/util/List;";

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, class "Ljava/util/ArrayList;");

        $r1 = <org.codehaus.jackson.map.deser.BasicDeserializerFactory: java.util.HashMap _collectionFallbacks>;

        $r2 = class "Ljava/util/Set;";

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, class "Ljava/util/HashSet;");

        $r1 = <org.codehaus.jackson.map.deser.BasicDeserializerFactory: java.util.HashMap _collectionFallbacks>;

        $r2 = class "Ljava/util/SortedSet;";

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, class "Ljava/util/TreeSet;");

        $r1 = <org.codehaus.jackson.map.deser.BasicDeserializerFactory: java.util.HashMap _collectionFallbacks>;

        $r2 = class "Ljava/util/Queue;";

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, class "Ljava/util/LinkedList;");

        $r1 = <org.codehaus.jackson.map.deser.BasicDeserializerFactory: java.util.HashMap _collectionFallbacks>;

        virtualinvoke $r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.util.Deque", class "Ljava/util/LinkedList;");

        $r1 = <org.codehaus.jackson.map.deser.BasicDeserializerFactory: java.util.HashMap _collectionFallbacks>;

        virtualinvoke $r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.util.NavigableSet", class "Ljava/util/TreeSet;");

        $r1 = staticinvoke <org.codehaus.jackson.map.deser.ArrayDeserializers: java.util.HashMap getAll()>();

        <org.codehaus.jackson.map.deser.BasicDeserializerFactory: java.util.HashMap _arrayDeserializers> = $r1;

        return;

     label5:
        $r5 := @caughtexception;

        goto label4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label5;
        catch java.lang.ClassNotFoundException from label3 to label4 with label5;
    }

    protected void <init>()
    {
        org.codehaus.jackson.map.deser.BasicDeserializerFactory r0;
        org.codehaus.jackson.map.ext.OptionalHandlerFactory $r1;

        r0 := @this: org.codehaus.jackson.map.deser.BasicDeserializerFactory;

        specialinvoke r0.<org.codehaus.jackson.map.DeserializerFactory: void <init>()>();

        $r1 = <org.codehaus.jackson.map.ext.OptionalHandlerFactory: org.codehaus.jackson.map.ext.OptionalHandlerFactory instance>;

        r0.<org.codehaus.jackson.map.deser.BasicDeserializerFactory: org.codehaus.jackson.map.ext.OptionalHandlerFactory optionalHandlers> = $r1;

        return;
    }

    org.codehaus.jackson.map.JsonDeserializer _constructDeserializer(org.codehaus.jackson.map.DeserializationConfig, java.lang.Object)
    {
        org.codehaus.jackson.map.DeserializationConfig $r0;
        org.codehaus.jackson.map.deser.BasicDeserializerFactory r1;
        java.lang.Object r2;
        boolean $z0;
        org.codehaus.jackson.map.JsonDeserializer r3;
        java.lang.IllegalStateException $r4;
        java.lang.StringBuilder $r5;
        java.lang.Class $r6, $r8;
        java.lang.String $r7;
        org.codehaus.jackson.map.DeserializationConfig$Feature $r9;

        r1 := @this: org.codehaus.jackson.map.deser.BasicDeserializerFactory;

        $r0 := @parameter0: org.codehaus.jackson.map.DeserializationConfig;

        r2 := @parameter1: java.lang.Object;

        $z0 = r2 instanceof org.codehaus.jackson.map.JsonDeserializer;

        if $z0 == 0 goto label1;

        r3 = (org.codehaus.jackson.map.JsonDeserializer) r2;

        return r3;

     label1:
        $z0 = r2 instanceof java.lang.Class;

        if $z0 != 0 goto label2;

        $r4 = new java.lang.IllegalStateException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("AnnotationIntrospector returned deserializer definition of type ");

        $r6 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; expected type JsonDeserializer or Class<JsonDeserializer> instead");

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r7);

        throw $r4;

     label2:
        $r6 = (java.lang.Class) r2;

        $r8 = class "Lorg/codehaus/jackson/map/JsonDeserializer;";

        $z0 = virtualinvoke $r8.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r6);

        if $z0 != 0 goto label3;

        $r4 = new java.lang.IllegalStateException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("AnnotationIntrospector returned Class ");

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; expected Class<JsonDeserializer>");

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r7);

        throw $r4;

     label3:
        $r9 = <org.codehaus.jackson.map.DeserializationConfig$Feature: org.codehaus.jackson.map.DeserializationConfig$Feature CAN_OVERRIDE_ACCESS_MODIFIERS>;

        $z0 = virtualinvoke $r0.<org.codehaus.jackson.map.DeserializationConfig: boolean isEnabled(org.codehaus.jackson.map.DeserializationConfig$Feature)>($r9);

        r2 = staticinvoke <org.codehaus.jackson.map.util.ClassUtil: java.lang.Object createInstance(java.lang.Class,boolean)>($r6, $z0);

        r3 = (org.codehaus.jackson.map.JsonDeserializer) r2;

        return r3;
    }

    protected abstract org.codehaus.jackson.map.JsonDeserializer _findCustomArrayDeserializer(org.codehaus.jackson.map.type.ArrayType, org.codehaus.jackson.map.DeserializationConfig, org.codehaus.jackson.map.DeserializerProvider, org.codehaus.jackson.map.BeanProperty, org.codehaus.jackson.map.TypeDeserializer, org.codehaus.jackson.map.JsonDeserializer) throws org.codehaus.jackson.map.JsonMappingException;

    protected abstract org.codehaus.jackson.map.JsonDeserializer _findCustomCollectionDeserializer(org.codehaus.jackson.map.type.CollectionType, org.codehaus.jackson.map.DeserializationConfig, org.codehaus.jackson.map.DeserializerProvider, org.codehaus.jackson.map.introspect.BasicBeanDescription, org.codehaus.jackson.map.BeanProperty, org.codehaus.jackson.map.TypeDeserializer, org.codehaus.jackson.map.JsonDeserializer) throws org.codehaus.jackson.map.JsonMappingException;

    protected abstract org.codehaus.jackson.map.JsonDeserializer _findCustomEnumDeserializer(java.lang.Class, org.codehaus.jackson.map.DeserializationConfig, org.codehaus.jackson.map.introspect.BasicBeanDescription, org.codehaus.jackson.map.BeanProperty) throws org.codehaus.jackson.map.JsonMappingException;

    protected abstract org.codehaus.jackson.map.JsonDeserializer _findCustomMapDeserializer(org.codehaus.jackson.map.type.MapType, org.codehaus.jackson.map.DeserializationConfig, org.codehaus.jackson.map.DeserializerProvider, org.codehaus.jackson.map.introspect.BasicBeanDescription, org.codehaus.jackson.map.BeanProperty, org.codehaus.jackson.map.KeyDeserializer, org.codehaus.jackson.map.TypeDeserializer, org.codehaus.jackson.map.JsonDeserializer) throws org.codehaus.jackson.map.JsonMappingException;

    protected abstract org.codehaus.jackson.map.JsonDeserializer _findCustomTreeNodeDeserializer(java.lang.Class, org.codehaus.jackson.map.DeserializationConfig, org.codehaus.jackson.map.BeanProperty) throws org.codehaus.jackson.map.JsonMappingException;

    protected org.codehaus.jackson.map.deser.SettableBeanProperty constructCreatorProperty(org.codehaus.jackson.map.DeserializationConfig, org.codehaus.jackson.map.introspect.BasicBeanDescription, java.lang.String, int, org.codehaus.jackson.map.introspect.AnnotatedParameter) throws org.codehaus.jackson.map.JsonMappingException
    {
        org.codehaus.jackson.map.deser.BasicDeserializerFactory r0;
        org.codehaus.jackson.map.DeserializationConfig $r1;
        org.codehaus.jackson.map.introspect.BasicBeanDescription $r2;
        java.lang.String $r3;
        int $i0;
        org.codehaus.jackson.map.introspect.AnnotatedParameter $r4;
        org.codehaus.jackson.map.deser.SettableBeanProperty$CreatorProperty r5;
        java.lang.reflect.Type $r6;
        org.codehaus.jackson.map.type.TypeBindings $r7;
        org.codehaus.jackson.type.JavaType $r8, $r11;
        org.codehaus.jackson.map.BeanProperty$Std r9;
        org.codehaus.jackson.map.util.Annotations $r10;
        org.codehaus.jackson.map.JsonDeserializer $r12;
        org.codehaus.jackson.map.TypeDeserializer $r13;

        r0 := @this: org.codehaus.jackson.map.deser.BasicDeserializerFactory;

        $r1 := @parameter0: org.codehaus.jackson.map.DeserializationConfig;

        $r2 := @parameter1: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        $r3 := @parameter2: java.lang.String;

        $i0 := @parameter3: int;

        $r4 := @parameter4: org.codehaus.jackson.map.introspect.AnnotatedParameter;

        $r6 = virtualinvoke $r4.<org.codehaus.jackson.map.introspect.AnnotatedParameter: java.lang.reflect.Type getParameterType()>();

        $r7 = virtualinvoke $r2.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.type.TypeBindings bindingsForBeanType()>();

        $r8 = staticinvoke <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType type(java.lang.reflect.Type,org.codehaus.jackson.map.type.TypeBindings)>($r6, $r7);

        r9 = new org.codehaus.jackson.map.BeanProperty$Std;

        $r10 = virtualinvoke $r2.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.util.Annotations getClassAnnotations()>();

        specialinvoke r9.<org.codehaus.jackson.map.BeanProperty$Std: void <init>(java.lang.String,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.util.Annotations,org.codehaus.jackson.map.introspect.AnnotatedMember)>($r3, $r8, $r10, $r4);

        $r11 = virtualinvoke r0.<org.codehaus.jackson.map.deser.BasicDeserializerFactory: org.codehaus.jackson.type.JavaType resolveType(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.map.introspect.BasicBeanDescription,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.introspect.AnnotatedMember,org.codehaus.jackson.map.BeanProperty)>($r1, $r2, $r8, $r4, r9);

        if $r11 == $r8 goto label1;

        r9 = virtualinvoke r9.<org.codehaus.jackson.map.BeanProperty$Std: org.codehaus.jackson.map.BeanProperty$Std withType(org.codehaus.jackson.type.JavaType)>($r11);

     label1:
        $r12 = virtualinvoke r0.<org.codehaus.jackson.map.deser.BasicDeserializerFactory: org.codehaus.jackson.map.JsonDeserializer findDeserializerFromAnnotation(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.map.introspect.Annotated,org.codehaus.jackson.map.BeanProperty)>($r1, $r4, r9);

        $r8 = virtualinvoke r0.<org.codehaus.jackson.map.deser.BasicDeserializerFactory: org.codehaus.jackson.type.JavaType modifyTypeByAnnotation(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.map.introspect.Annotated,org.codehaus.jackson.type.JavaType,java.lang.String)>($r1, $r4, $r11, $r3);

        $r13 = virtualinvoke r0.<org.codehaus.jackson.map.deser.BasicDeserializerFactory: org.codehaus.jackson.map.TypeDeserializer findTypeDeserializer(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanProperty)>($r1, $r8, r9);

        r5 = new org.codehaus.jackson.map.deser.SettableBeanProperty$CreatorProperty;

        $r10 = virtualinvoke $r2.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.util.Annotations getClassAnnotations()>();

        specialinvoke r5.<org.codehaus.jackson.map.deser.SettableBeanProperty$CreatorProperty: void <init>(java.lang.String,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.TypeDeserializer,org.codehaus.jackson.map.util.Annotations,org.codehaus.jackson.map.introspect.AnnotatedParameter,int)>($r3, $r8, $r13, $r10, $r4, $i0);

        if $r12 == null goto label2;

        virtualinvoke r5.<org.codehaus.jackson.map.deser.SettableBeanProperty: void setValueDeserializer(org.codehaus.jackson.map.JsonDeserializer)>($r12);

     label2:
        return r5;
    }

    protected org.codehaus.jackson.map.deser.EnumResolver constructEnumResolver(java.lang.Class, org.codehaus.jackson.map.DeserializationConfig)
    {
        org.codehaus.jackson.map.deser.BasicDeserializerFactory r0;
        java.lang.Class r1;
        org.codehaus.jackson.map.DeserializationConfig $r2;
        org.codehaus.jackson.map.DeserializationConfig$Feature $r3;
        boolean $z0;
        org.codehaus.jackson.map.deser.EnumResolver $r4;
        org.codehaus.jackson.map.AnnotationIntrospector $r5;

        r0 := @this: org.codehaus.jackson.map.deser.BasicDeserializerFactory;

        r1 := @parameter0: java.lang.Class;

        $r2 := @parameter1: org.codehaus.jackson.map.DeserializationConfig;

        $r3 = <org.codehaus.jackson.map.DeserializationConfig$Feature: org.codehaus.jackson.map.DeserializationConfig$Feature READ_ENUMS_USING_TO_STRING>;

        $z0 = virtualinvoke $r2.<org.codehaus.jackson.map.DeserializationConfig: boolean isEnabled(org.codehaus.jackson.map.DeserializationConfig$Feature)>($r3);

        if $z0 == 0 goto label1;

        $r4 = staticinvoke <org.codehaus.jackson.map.deser.EnumResolver: org.codehaus.jackson.map.deser.EnumResolver constructUnsafeUsingToString(java.lang.Class)>(r1);

        return $r4;

     label1:
        $r5 = virtualinvoke $r2.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.map.AnnotationIntrospector getAnnotationIntrospector()>();

        $r4 = staticinvoke <org.codehaus.jackson.map.deser.EnumResolver: org.codehaus.jackson.map.deser.EnumResolver constructUnsafe(java.lang.Class,org.codehaus.jackson.map.AnnotationIntrospector)>(r1, $r5);

        return $r4;
    }

    public org.codehaus.jackson.map.JsonDeserializer createArrayDeserializer(org.codehaus.jackson.map.DeserializationConfig, org.codehaus.jackson.map.DeserializerProvider, org.codehaus.jackson.map.type.ArrayType, org.codehaus.jackson.map.BeanProperty) throws org.codehaus.jackson.map.JsonMappingException
    {
        org.codehaus.jackson.map.deser.BasicDeserializerFactory r0;
        org.codehaus.jackson.map.DeserializationConfig $r1;
        org.codehaus.jackson.map.DeserializerProvider $r2;
        org.codehaus.jackson.map.type.ArrayType $r3;
        org.codehaus.jackson.map.BeanProperty $r4;
        org.codehaus.jackson.type.JavaType $r5;
        java.lang.Object $r6;
        org.codehaus.jackson.map.JsonDeserializer r7, r9;
        java.util.HashMap $r8;
        boolean $z0;
        java.lang.IllegalArgumentException $r10;
        java.lang.StringBuilder $r11;
        java.lang.String $r12;
        org.codehaus.jackson.map.TypeDeserializer r13;
        org.codehaus.jackson.map.deser.ArrayDeserializer $r14;

        r0 := @this: org.codehaus.jackson.map.deser.BasicDeserializerFactory;

        $r1 := @parameter0: org.codehaus.jackson.map.DeserializationConfig;

        $r2 := @parameter1: org.codehaus.jackson.map.DeserializerProvider;

        $r3 := @parameter2: org.codehaus.jackson.map.type.ArrayType;

        $r4 := @parameter3: org.codehaus.jackson.map.BeanProperty;

        $r5 = virtualinvoke $r3.<org.codehaus.jackson.map.type.ArrayType: org.codehaus.jackson.type.JavaType getContentType()>();

        $r6 = virtualinvoke $r5.<org.codehaus.jackson.type.JavaType: java.lang.Object getValueHandler()>();

        r7 = (org.codehaus.jackson.map.JsonDeserializer) $r6;

        if r7 != null goto label3;

        $r8 = <org.codehaus.jackson.map.deser.BasicDeserializerFactory: java.util.HashMap _arrayDeserializers>;

        $r6 = virtualinvoke $r8.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r5);

        r9 = (org.codehaus.jackson.map.JsonDeserializer) $r6;

        if r9 == null goto label2;

        r7 = virtualinvoke r0.<org.codehaus.jackson.map.deser.BasicDeserializerFactory: org.codehaus.jackson.map.JsonDeserializer _findCustomArrayDeserializer(org.codehaus.jackson.map.type.ArrayType,org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.map.DeserializerProvider,org.codehaus.jackson.map.BeanProperty,org.codehaus.jackson.map.TypeDeserializer,org.codehaus.jackson.map.JsonDeserializer)>($r3, $r1, $r2, $r4, null, null);

        if r7 == null goto label1;

        return r7;

     label1:
        return r9;

     label2:
        $z0 = virtualinvoke $r5.<org.codehaus.jackson.type.JavaType: boolean isPrimitive()>();

        if $z0 == 0 goto label3;

        $r10 = new java.lang.IllegalArgumentException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Internal error: primitive type (");

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") passed, no array deserializer found");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r10;

     label3:
        $r6 = virtualinvoke $r5.<org.codehaus.jackson.type.JavaType: java.lang.Object getTypeHandler()>();

        r13 = (org.codehaus.jackson.map.TypeDeserializer) $r6;

        if r13 != null goto label4;

        r13 = virtualinvoke r0.<org.codehaus.jackson.map.deser.BasicDeserializerFactory: org.codehaus.jackson.map.TypeDeserializer findTypeDeserializer(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanProperty)>($r1, $r5, $r4);

     label4:
        r9 = virtualinvoke r0.<org.codehaus.jackson.map.deser.BasicDeserializerFactory: org.codehaus.jackson.map.JsonDeserializer _findCustomArrayDeserializer(org.codehaus.jackson.map.type.ArrayType,org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.map.DeserializerProvider,org.codehaus.jackson.map.BeanProperty,org.codehaus.jackson.map.TypeDeserializer,org.codehaus.jackson.map.JsonDeserializer)>($r3, $r1, $r2, $r4, r13, r7);

        if r9 == null goto label5;

        return r9;

     label5:
        if r7 != null goto label6;

        r7 = virtualinvoke $r2.<org.codehaus.jackson.map.DeserializerProvider: org.codehaus.jackson.map.JsonDeserializer findValueDeserializer(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanProperty)>($r1, $r5, $r4);

     label6:
        $r14 = new org.codehaus.jackson.map.deser.ArrayDeserializer;

        specialinvoke $r14.<org.codehaus.jackson.map.deser.ArrayDeserializer: void <init>(org.codehaus.jackson.map.type.ArrayType,org.codehaus.jackson.map.JsonDeserializer,org.codehaus.jackson.map.TypeDeserializer)>($r3, r7, r13);

        return $r14;
    }

    public org.codehaus.jackson.map.JsonDeserializer createBeanDeserializer(org.codehaus.jackson.map.DeserializationConfig, org.codehaus.jackson.map.DeserializerProvider, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.BeanProperty) throws org.codehaus.jackson.map.JsonMappingException
    {
        org.codehaus.jackson.map.deser.BasicDeserializerFactory r0;
        org.codehaus.jackson.map.DeserializationConfig $r1;
        org.codehaus.jackson.map.DeserializerProvider $r2;
        org.codehaus.jackson.type.JavaType $r3;
        org.codehaus.jackson.map.BeanProperty $r4;
        org.codehaus.jackson.map.deser.StdDeserializer$AtomicReferenceDeserializer r5;
        java.util.HashMap $r6;
        java.lang.Object $r7;
        org.codehaus.jackson.map.JsonDeserializer r8;
        java.lang.Class $r9, $r10;
        boolean $z0;
        org.codehaus.jackson.map.ext.OptionalHandlerFactory $r11;

        r0 := @this: org.codehaus.jackson.map.deser.BasicDeserializerFactory;

        $r1 := @parameter0: org.codehaus.jackson.map.DeserializationConfig;

        $r2 := @parameter1: org.codehaus.jackson.map.DeserializerProvider;

        $r3 := @parameter2: org.codehaus.jackson.type.JavaType;

        $r4 := @parameter3: org.codehaus.jackson.map.BeanProperty;

        $r6 = <org.codehaus.jackson.map.deser.BasicDeserializerFactory: java.util.HashMap _simpleDeserializers>;

        $r7 = virtualinvoke $r6.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r3);

        r8 = (org.codehaus.jackson.map.JsonDeserializer) $r7;

        if r8 == null goto label1;

        return r8;

     label1:
        $r9 = virtualinvoke $r3.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        $r10 = class "Ljava/util/concurrent/atomic/AtomicReference;";

        $z0 = virtualinvoke $r10.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r9);

        if $z0 == 0 goto label2;

        r5 = new org.codehaus.jackson.map.deser.StdDeserializer$AtomicReferenceDeserializer;

        specialinvoke r5.<org.codehaus.jackson.map.deser.StdDeserializer$AtomicReferenceDeserializer: void <init>(org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanProperty)>($r3, $r4);

        return r5;

     label2:
        $r11 = r0.<org.codehaus.jackson.map.deser.BasicDeserializerFactory: org.codehaus.jackson.map.ext.OptionalHandlerFactory optionalHandlers>;

        r8 = virtualinvoke $r11.<org.codehaus.jackson.map.ext.OptionalHandlerFactory: org.codehaus.jackson.map.JsonDeserializer findDeserializer(org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.map.DeserializerProvider)>($r3, $r1, $r2);

        if r8 == null goto label3;

        return r8;

     label3:
        return null;
    }

    public org.codehaus.jackson.map.JsonDeserializer createCollectionDeserializer(org.codehaus.jackson.map.DeserializationConfig, org.codehaus.jackson.map.DeserializerProvider, org.codehaus.jackson.map.type.CollectionType, org.codehaus.jackson.map.BeanProperty) throws org.codehaus.jackson.map.JsonMappingException
    {
        org.codehaus.jackson.map.deser.BasicDeserializerFactory r0;
        org.codehaus.jackson.map.DeserializationConfig $r1;
        org.codehaus.jackson.map.DeserializerProvider $r2;
        org.codehaus.jackson.map.BeanProperty $r3;
        org.codehaus.jackson.map.type.CollectionType r4;
        java.lang.Class $r5, r6, $r15;
        org.codehaus.jackson.map.BeanDescription $r7;
        org.codehaus.jackson.map.introspect.BasicBeanDescription r8;
        org.codehaus.jackson.map.introspect.AnnotatedClass $r9;
        org.codehaus.jackson.map.JsonDeserializer $r10, $r14;
        org.codehaus.jackson.type.JavaType $r11;
        java.lang.Object $r12;
        org.codehaus.jackson.map.TypeDeserializer r13;
        boolean $z0;
        org.codehaus.jackson.map.deser.EnumSetDeserializer $r16;
        org.codehaus.jackson.map.deser.EnumResolver $r17;
        java.util.HashMap $r18;
        java.lang.String $r19;
        java.lang.IllegalArgumentException $r20;
        java.lang.StringBuilder $r21;
        org.codehaus.jackson.map.DeserializationConfig$Feature $r22;
        java.lang.reflect.Constructor $r23;
        org.codehaus.jackson.map.deser.impl.StringCollectionDeserializer $r24;
        org.codehaus.jackson.map.deser.CollectionDeserializer $r25;

        r0 := @this: org.codehaus.jackson.map.deser.BasicDeserializerFactory;

        $r1 := @parameter0: org.codehaus.jackson.map.DeserializationConfig;

        $r2 := @parameter1: org.codehaus.jackson.map.DeserializerProvider;

        r4 := @parameter2: org.codehaus.jackson.map.type.CollectionType;

        $r3 := @parameter3: org.codehaus.jackson.map.BeanProperty;

        $r5 = virtualinvoke r4.<org.codehaus.jackson.map.type.CollectionType: java.lang.Class getRawClass()>();

        r6 = $r5;

        $r7 = virtualinvoke $r1.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.map.BeanDescription introspectClassAnnotations(java.lang.Class)>($r5);

        r8 = (org.codehaus.jackson.map.introspect.BasicBeanDescription) $r7;

        $r9 = virtualinvoke r8.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.AnnotatedClass getClassInfo()>();

        $r10 = virtualinvoke r0.<org.codehaus.jackson.map.deser.BasicDeserializerFactory: org.codehaus.jackson.map.JsonDeserializer findDeserializerFromAnnotation(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.map.introspect.Annotated,org.codehaus.jackson.map.BeanProperty)>($r1, $r9, $r3);

        if $r10 == null goto label1;

        return $r10;

     label1:
        $r9 = virtualinvoke r8.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.AnnotatedClass getClassInfo()>();

        $r11 = virtualinvoke r0.<org.codehaus.jackson.map.deser.BasicDeserializerFactory: org.codehaus.jackson.type.JavaType modifyTypeByAnnotation(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.map.introspect.Annotated,org.codehaus.jackson.type.JavaType,java.lang.String)>($r1, $r9, r4, null);

        r4 = (org.codehaus.jackson.map.type.CollectionType) $r11;

        $r11 = virtualinvoke r4.<org.codehaus.jackson.map.type.CollectionType: org.codehaus.jackson.type.JavaType getContentType()>();

        $r12 = virtualinvoke $r11.<org.codehaus.jackson.type.JavaType: java.lang.Object getValueHandler()>();

        $r10 = (org.codehaus.jackson.map.JsonDeserializer) $r12;

        $r12 = virtualinvoke $r11.<org.codehaus.jackson.type.JavaType: java.lang.Object getTypeHandler()>();

        r13 = (org.codehaus.jackson.map.TypeDeserializer) $r12;

        if r13 != null goto label2;

        r13 = virtualinvoke r0.<org.codehaus.jackson.map.deser.BasicDeserializerFactory: org.codehaus.jackson.map.TypeDeserializer findTypeDeserializer(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanProperty)>($r1, $r11, $r3);

     label2:
        $r14 = virtualinvoke r0.<org.codehaus.jackson.map.deser.BasicDeserializerFactory: org.codehaus.jackson.map.JsonDeserializer _findCustomCollectionDeserializer(org.codehaus.jackson.map.type.CollectionType,org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.map.DeserializerProvider,org.codehaus.jackson.map.introspect.BasicBeanDescription,org.codehaus.jackson.map.BeanProperty,org.codehaus.jackson.map.TypeDeserializer,org.codehaus.jackson.map.JsonDeserializer)>(r4, $r1, $r2, r8, $r3, r13, $r10);

        if $r14 == null goto label3;

        return $r14;

     label3:
        if $r10 != null goto label5;

        $r15 = class "Ljava/util/EnumSet;";

        $z0 = virtualinvoke $r15.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r5);

        if $z0 == 0 goto label4;

        $r16 = new org.codehaus.jackson.map.deser.EnumSetDeserializer;

        $r5 = virtualinvoke $r11.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        $r17 = virtualinvoke r0.<org.codehaus.jackson.map.deser.BasicDeserializerFactory: org.codehaus.jackson.map.deser.EnumResolver constructEnumResolver(java.lang.Class,org.codehaus.jackson.map.DeserializationConfig)>($r5, $r1);

        specialinvoke $r16.<org.codehaus.jackson.map.deser.EnumSetDeserializer: void <init>(org.codehaus.jackson.map.deser.EnumResolver)>($r17);

        return $r16;

     label4:
        $r10 = virtualinvoke $r2.<org.codehaus.jackson.map.DeserializerProvider: org.codehaus.jackson.map.JsonDeserializer findValueDeserializer(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanProperty)>($r1, $r11, $r3);

     label5:
        $z0 = virtualinvoke r4.<org.codehaus.jackson.map.type.CollectionType: boolean isInterface()>();

        if $z0 != 0 goto label6;

        $z0 = virtualinvoke r4.<org.codehaus.jackson.map.type.CollectionType: boolean isAbstract()>();

        if $z0 == 0 goto label8;

     label6:
        $r18 = <org.codehaus.jackson.map.deser.BasicDeserializerFactory: java.util.HashMap _collectionFallbacks>;

        $r19 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r12 = virtualinvoke $r18.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r19);

        $r5 = (java.lang.Class) $r12;

        if $r5 != null goto label7;

        $r20 = new java.lang.IllegalArgumentException;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can not find a deserializer for non-concrete Collection type ");

        $r21 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r19 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r19);

        throw $r20;

     label7:
        r6 = $r5;

     label8:
        $r22 = <org.codehaus.jackson.map.DeserializationConfig$Feature: org.codehaus.jackson.map.DeserializationConfig$Feature CAN_OVERRIDE_ACCESS_MODIFIERS>;

        $z0 = virtualinvoke $r1.<org.codehaus.jackson.map.DeserializationConfig: boolean isEnabled(org.codehaus.jackson.map.DeserializationConfig$Feature)>($r22);

        $r23 = staticinvoke <org.codehaus.jackson.map.util.ClassUtil: java.lang.reflect.Constructor findConstructor(java.lang.Class,boolean)>(r6, $z0);

        $r5 = virtualinvoke $r11.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        if $r5 != class "Ljava/lang/String;" goto label9;

        $r24 = new org.codehaus.jackson.map.deser.impl.StringCollectionDeserializer;

        specialinvoke $r24.<org.codehaus.jackson.map.deser.impl.StringCollectionDeserializer: void <init>(org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.JsonDeserializer,java.lang.reflect.Constructor)>(r4, $r10, $r23);

        return $r24;

     label9:
        $r25 = new org.codehaus.jackson.map.deser.CollectionDeserializer;

        specialinvoke $r25.<org.codehaus.jackson.map.deser.CollectionDeserializer: void <init>(org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.JsonDeserializer,org.codehaus.jackson.map.TypeDeserializer,java.lang.reflect.Constructor)>(r4, $r10, r13, $r23);

        return $r25;
    }

    public org.codehaus.jackson.map.JsonDeserializer createEnumDeserializer(org.codehaus.jackson.map.DeserializationConfig, org.codehaus.jackson.map.DeserializerProvider, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.BeanProperty) throws org.codehaus.jackson.map.JsonMappingException
    {
        org.codehaus.jackson.map.deser.BasicDeserializerFactory r0;
        org.codehaus.jackson.map.DeserializationConfig $r1;
        org.codehaus.jackson.map.DeserializerProvider $r2;
        org.codehaus.jackson.type.JavaType $r3;
        org.codehaus.jackson.map.BeanProperty $r4;
        org.codehaus.jackson.map.BeanDescription $r5;
        org.codehaus.jackson.map.introspect.BasicBeanDescription r6;
        org.codehaus.jackson.map.introspect.AnnotatedClass $r7;
        org.codehaus.jackson.map.JsonDeserializer $r8;
        java.lang.Class $r9, $r15;
        java.util.List $r10;
        java.util.Iterator $r11;
        boolean $z0;
        java.lang.Object $r12;
        org.codehaus.jackson.map.introspect.AnnotatedMethod r13;
        org.codehaus.jackson.map.AnnotationIntrospector $r14;
        int $i0;
        java.lang.IllegalArgumentException $r16;
        java.lang.StringBuilder $r17;
        java.lang.String $r18;
        org.codehaus.jackson.map.deser.EnumDeserializer $r19;
        org.codehaus.jackson.map.deser.EnumResolver $r20;

        r0 := @this: org.codehaus.jackson.map.deser.BasicDeserializerFactory;

        $r1 := @parameter0: org.codehaus.jackson.map.DeserializationConfig;

        $r2 := @parameter1: org.codehaus.jackson.map.DeserializerProvider;

        $r3 := @parameter2: org.codehaus.jackson.type.JavaType;

        $r4 := @parameter3: org.codehaus.jackson.map.BeanProperty;

        $r5 = virtualinvoke $r1.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.map.BeanDescription introspectForCreation(org.codehaus.jackson.type.JavaType)>($r3);

        r6 = (org.codehaus.jackson.map.introspect.BasicBeanDescription) $r5;

        $r7 = virtualinvoke r6.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.AnnotatedClass getClassInfo()>();

        $r8 = virtualinvoke r0.<org.codehaus.jackson.map.deser.BasicDeserializerFactory: org.codehaus.jackson.map.JsonDeserializer findDeserializerFromAnnotation(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.map.introspect.Annotated,org.codehaus.jackson.map.BeanProperty)>($r1, $r7, $r4);

        if $r8 == null goto label1;

        return $r8;

     label1:
        $r9 = virtualinvoke $r3.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        $r8 = virtualinvoke r0.<org.codehaus.jackson.map.deser.BasicDeserializerFactory: org.codehaus.jackson.map.JsonDeserializer _findCustomEnumDeserializer(java.lang.Class,org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.map.introspect.BasicBeanDescription,org.codehaus.jackson.map.BeanProperty)>($r9, $r1, r6, $r4);

        if $r8 == null goto label2;

        return $r8;

     label2:
        $r10 = virtualinvoke r6.<org.codehaus.jackson.map.introspect.BasicBeanDescription: java.util.List getFactoryMethods()>();

        $r11 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r12 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        r13 = (org.codehaus.jackson.map.introspect.AnnotatedMethod) $r12;

        $r14 = virtualinvoke $r1.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.map.AnnotationIntrospector getAnnotationIntrospector()>();

        $z0 = virtualinvoke $r14.<org.codehaus.jackson.map.AnnotationIntrospector: boolean hasCreatorAnnotation(org.codehaus.jackson.map.introspect.Annotated)>(r13);

        if $z0 == 0 goto label3;

        $i0 = virtualinvoke r13.<org.codehaus.jackson.map.introspect.AnnotatedMethod: int getParameterCount()>();

        if $i0 != 1 goto label4;

        $r15 = virtualinvoke r13.<org.codehaus.jackson.map.introspect.AnnotatedMethod: java.lang.Class getRawType()>();

        $z0 = virtualinvoke $r15.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r9);

        if $z0 == 0 goto label4;

        $r8 = staticinvoke <org.codehaus.jackson.map.deser.EnumDeserializer: org.codehaus.jackson.map.JsonDeserializer deserializerForCreator(org.codehaus.jackson.map.DeserializationConfig,java.lang.Class,org.codehaus.jackson.map.introspect.AnnotatedMethod)>($r1, $r9, r13);

        return $r8;

     label4:
        $r16 = new java.lang.IllegalArgumentException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsuitable method (");

        $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r13);

        $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") decorated with @JsonCreator (for Enum type ");

        $r18 = virtualinvoke $r9.<java.lang.Class: java.lang.String getName()>();

        $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r18);

        throw $r16;

     label5:
        $r19 = new org.codehaus.jackson.map.deser.EnumDeserializer;

        $r20 = virtualinvoke r0.<org.codehaus.jackson.map.deser.BasicDeserializerFactory: org.codehaus.jackson.map.deser.EnumResolver constructEnumResolver(java.lang.Class,org.codehaus.jackson.map.DeserializationConfig)>($r9, $r1);

        specialinvoke $r19.<org.codehaus.jackson.map.deser.EnumDeserializer: void <init>(org.codehaus.jackson.map.deser.EnumResolver)>($r20);

        return $r19;
    }

    public org.codehaus.jackson.map.JsonDeserializer createMapDeserializer(org.codehaus.jackson.map.DeserializationConfig, org.codehaus.jackson.map.DeserializerProvider, org.codehaus.jackson.map.type.MapType, org.codehaus.jackson.map.BeanProperty) throws org.codehaus.jackson.map.JsonMappingException
    {
        org.codehaus.jackson.map.deser.BasicDeserializerFactory r0;
        org.codehaus.jackson.map.DeserializationConfig $r1;
        org.codehaus.jackson.map.DeserializerProvider $r2;
        org.codehaus.jackson.map.BeanProperty $r3;
        org.codehaus.jackson.map.deser.MapDeserializer r4;
        org.codehaus.jackson.map.type.MapType r5;
        java.lang.Class $r6, $r18;
        org.codehaus.jackson.map.BeanDescription $r7;
        org.codehaus.jackson.map.introspect.BasicBeanDescription r8;
        org.codehaus.jackson.map.introspect.AnnotatedClass $r9;
        org.codehaus.jackson.map.JsonDeserializer $r10, $r17;
        org.codehaus.jackson.type.JavaType $r11, $r12, $r15;
        java.lang.Object $r13;
        org.codehaus.jackson.map.KeyDeserializer r14;
        boolean $z0;
        org.codehaus.jackson.map.TypeDeserializer r16;
        java.lang.IllegalArgumentException $r19;
        org.codehaus.jackson.map.deser.EnumMapDeserializer $r20;
        org.codehaus.jackson.map.deser.EnumResolver $r21;
        java.util.HashMap $r22;
        java.lang.String $r23;
        java.lang.StringBuilder $r24;
        org.codehaus.jackson.map.DeserializationConfig$Feature $r25;
        java.lang.reflect.Constructor $r26;
        org.codehaus.jackson.map.AnnotationIntrospector $r27;
        java.lang.String[] $r28;
        org.codehaus.jackson.map.deser.CreatorContainer $r29;

        r0 := @this: org.codehaus.jackson.map.deser.BasicDeserializerFactory;

        $r1 := @parameter0: org.codehaus.jackson.map.DeserializationConfig;

        $r2 := @parameter1: org.codehaus.jackson.map.DeserializerProvider;

        r5 := @parameter2: org.codehaus.jackson.map.type.MapType;

        $r3 := @parameter3: org.codehaus.jackson.map.BeanProperty;

        $r6 = virtualinvoke r5.<org.codehaus.jackson.map.type.MapType: java.lang.Class getRawClass()>();

        $r7 = virtualinvoke $r1.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.map.BeanDescription introspectForCreation(org.codehaus.jackson.type.JavaType)>(r5);

        r8 = (org.codehaus.jackson.map.introspect.BasicBeanDescription) $r7;

        $r9 = virtualinvoke r8.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.AnnotatedClass getClassInfo()>();

        $r10 = virtualinvoke r0.<org.codehaus.jackson.map.deser.BasicDeserializerFactory: org.codehaus.jackson.map.JsonDeserializer findDeserializerFromAnnotation(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.map.introspect.Annotated,org.codehaus.jackson.map.BeanProperty)>($r1, $r9, $r3);

        if $r10 == null goto label01;

        return $r10;

     label01:
        $r9 = virtualinvoke r8.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.AnnotatedClass getClassInfo()>();

        $r11 = virtualinvoke r0.<org.codehaus.jackson.map.deser.BasicDeserializerFactory: org.codehaus.jackson.type.JavaType modifyTypeByAnnotation(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.map.introspect.Annotated,org.codehaus.jackson.type.JavaType,java.lang.String)>($r1, $r9, r5, null);

        r5 = (org.codehaus.jackson.map.type.MapType) $r11;

        $r11 = virtualinvoke r5.<org.codehaus.jackson.map.type.MapType: org.codehaus.jackson.type.JavaType getKeyType()>();

        $r12 = virtualinvoke r5.<org.codehaus.jackson.map.type.MapType: org.codehaus.jackson.type.JavaType getContentType()>();

        $r13 = virtualinvoke $r12.<org.codehaus.jackson.type.JavaType: java.lang.Object getValueHandler()>();

        $r10 = (org.codehaus.jackson.map.JsonDeserializer) $r13;

        $r13 = virtualinvoke $r11.<org.codehaus.jackson.type.JavaType: java.lang.Object getValueHandler()>();

        r14 = (org.codehaus.jackson.map.KeyDeserializer) $r13;

        if r14 != null goto label02;

        $r15 = <org.codehaus.jackson.map.deser.BasicDeserializerFactory: org.codehaus.jackson.type.JavaType TYPE_STRING>;

        $z0 = virtualinvoke $r15.<org.codehaus.jackson.type.JavaType: boolean equals(java.lang.Object)>($r11);

        if $z0 == 0 goto label04;

        r14 = null;

     label02:
        $r13 = virtualinvoke $r12.<org.codehaus.jackson.type.JavaType: java.lang.Object getTypeHandler()>();

        r16 = (org.codehaus.jackson.map.TypeDeserializer) $r13;

        if r16 != null goto label03;

        r16 = virtualinvoke r0.<org.codehaus.jackson.map.deser.BasicDeserializerFactory: org.codehaus.jackson.map.TypeDeserializer findTypeDeserializer(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanProperty)>($r1, $r12, $r3);

     label03:
        $r17 = virtualinvoke r0.<org.codehaus.jackson.map.deser.BasicDeserializerFactory: org.codehaus.jackson.map.JsonDeserializer _findCustomMapDeserializer(org.codehaus.jackson.map.type.MapType,org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.map.DeserializerProvider,org.codehaus.jackson.map.introspect.BasicBeanDescription,org.codehaus.jackson.map.BeanProperty,org.codehaus.jackson.map.KeyDeserializer,org.codehaus.jackson.map.TypeDeserializer,org.codehaus.jackson.map.JsonDeserializer)>(r5, $r1, $r2, r8, $r3, r14, r16, $r10);

        if $r17 == null goto label05;

        return $r17;

     label04:
        r14 = virtualinvoke $r2.<org.codehaus.jackson.map.DeserializerProvider: org.codehaus.jackson.map.KeyDeserializer findKeyDeserializer(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanProperty)>($r1, $r11, $r3);

        goto label02;

     label05:
        if $r10 != null goto label06;

        $r10 = virtualinvoke $r2.<org.codehaus.jackson.map.DeserializerProvider: org.codehaus.jackson.map.JsonDeserializer findValueDeserializer(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanProperty)>($r1, $r12, $r3);

     label06:
        $r18 = class "Ljava/util/EnumMap;";

        $z0 = virtualinvoke $r18.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r6);

        if $z0 == 0 goto label09;

        $r6 = virtualinvoke $r11.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        if $r6 == null goto label07;

        $z0 = virtualinvoke $r6.<java.lang.Class: boolean isEnum()>();

        if $z0 != 0 goto label08;

     label07:
        $r19 = new java.lang.IllegalArgumentException;

        specialinvoke $r19.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Can not construct EnumMap; generic (key) type not available");

        throw $r19;

     label08:
        $r20 = new org.codehaus.jackson.map.deser.EnumMapDeserializer;

        $r21 = virtualinvoke r0.<org.codehaus.jackson.map.deser.BasicDeserializerFactory: org.codehaus.jackson.map.deser.EnumResolver constructEnumResolver(java.lang.Class,org.codehaus.jackson.map.DeserializationConfig)>($r6, $r1);

        specialinvoke $r20.<org.codehaus.jackson.map.deser.EnumMapDeserializer: void <init>(org.codehaus.jackson.map.deser.EnumResolver,org.codehaus.jackson.map.JsonDeserializer)>($r21, $r10);

        return $r20;

     label09:
        $z0 = virtualinvoke r5.<org.codehaus.jackson.map.type.MapType: boolean isInterface()>();

        if $z0 != 0 goto label10;

        $z0 = virtualinvoke r5.<org.codehaus.jackson.map.type.MapType: boolean isAbstract()>();

        if $z0 == 0 goto label12;

     label10:
        $r22 = <org.codehaus.jackson.map.deser.BasicDeserializerFactory: java.util.HashMap _mapFallbacks>;

        $r23 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        $r13 = virtualinvoke $r22.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r23);

        $r6 = (java.lang.Class) $r13;

        if $r6 != null goto label11;

        $r19 = new java.lang.IllegalArgumentException;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can not find a deserializer for non-concrete Map type ");

        $r24 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r23 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r23);

        throw $r19;

     label11:
        $r11 = virtualinvoke r5.<org.codehaus.jackson.map.type.MapType: org.codehaus.jackson.type.JavaType forcedNarrowBy(java.lang.Class)>($r6);

        r5 = (org.codehaus.jackson.map.type.MapType) $r11;

        $r7 = virtualinvoke $r1.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.map.BeanDescription introspectForCreation(org.codehaus.jackson.type.JavaType)>(r5);

        r8 = (org.codehaus.jackson.map.introspect.BasicBeanDescription) $r7;

     label12:
        $r25 = <org.codehaus.jackson.map.DeserializationConfig$Feature: org.codehaus.jackson.map.DeserializationConfig$Feature CAN_OVERRIDE_ACCESS_MODIFIERS>;

        $z0 = virtualinvoke $r1.<org.codehaus.jackson.map.DeserializationConfig: boolean isEnabled(org.codehaus.jackson.map.DeserializationConfig$Feature)>($r25);

        $r26 = virtualinvoke r8.<org.codehaus.jackson.map.introspect.BasicBeanDescription: java.lang.reflect.Constructor findDefaultConstructor()>();

        if $r26 == null goto label13;

        if $z0 == 0 goto label13;

        staticinvoke <org.codehaus.jackson.map.util.ClassUtil: void checkAndFixAccess(java.lang.reflect.Member)>($r26);

     label13:
        r4 = new org.codehaus.jackson.map.deser.MapDeserializer;

        specialinvoke r4.<org.codehaus.jackson.map.deser.MapDeserializer: void <init>(org.codehaus.jackson.type.JavaType,java.lang.reflect.Constructor,org.codehaus.jackson.map.KeyDeserializer,org.codehaus.jackson.map.JsonDeserializer,org.codehaus.jackson.map.TypeDeserializer)>(r5, $r26, r14, $r10, r16);

        $r27 = virtualinvoke $r1.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.map.AnnotationIntrospector getAnnotationIntrospector()>();

        $r9 = virtualinvoke r8.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.AnnotatedClass getClassInfo()>();

        $r28 = virtualinvoke $r27.<org.codehaus.jackson.map.AnnotationIntrospector: java.lang.String[] findPropertiesToIgnore(org.codehaus.jackson.map.introspect.AnnotatedClass)>($r9);

        virtualinvoke r4.<org.codehaus.jackson.map.deser.MapDeserializer: void setIgnorableProperties(java.lang.String[])>($r28);

        $r29 = virtualinvoke r0.<org.codehaus.jackson.map.deser.BasicDeserializerFactory: org.codehaus.jackson.map.deser.CreatorContainer findMapCreators(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.map.introspect.BasicBeanDescription)>($r1, r8);

        virtualinvoke r4.<org.codehaus.jackson.map.deser.MapDeserializer: void setCreators(org.codehaus.jackson.map.deser.CreatorContainer)>($r29);

        return r4;
    }

    public org.codehaus.jackson.map.JsonDeserializer createTreeDeserializer(org.codehaus.jackson.map.DeserializationConfig, org.codehaus.jackson.map.DeserializerProvider, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.BeanProperty) throws org.codehaus.jackson.map.JsonMappingException
    {
        org.codehaus.jackson.map.deser.BasicDeserializerFactory r0;
        org.codehaus.jackson.map.DeserializationConfig $r1;
        org.codehaus.jackson.map.DeserializerProvider $r2;
        org.codehaus.jackson.type.JavaType $r3;
        org.codehaus.jackson.map.BeanProperty $r4;
        java.lang.Class $r5;
        org.codehaus.jackson.map.JsonDeserializer $r6;

        r0 := @this: org.codehaus.jackson.map.deser.BasicDeserializerFactory;

        $r1 := @parameter0: org.codehaus.jackson.map.DeserializationConfig;

        $r2 := @parameter1: org.codehaus.jackson.map.DeserializerProvider;

        $r3 := @parameter2: org.codehaus.jackson.type.JavaType;

        $r4 := @parameter3: org.codehaus.jackson.map.BeanProperty;

        $r5 = virtualinvoke $r3.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        $r6 = virtualinvoke r0.<org.codehaus.jackson.map.deser.BasicDeserializerFactory: org.codehaus.jackson.map.JsonDeserializer _findCustomTreeNodeDeserializer(java.lang.Class,org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.map.BeanProperty)>($r5, $r1, $r4);

        if $r6 == null goto label1;

        return $r6;

     label1:
        $r6 = staticinvoke <org.codehaus.jackson.map.deser.JsonNodeDeserializer: org.codehaus.jackson.map.JsonDeserializer getDeserializer(java.lang.Class)>($r5);

        return $r6;
    }

    protected org.codehaus.jackson.map.JsonDeserializer findDeserializerFromAnnotation(org.codehaus.jackson.map.DeserializationConfig, org.codehaus.jackson.map.introspect.Annotated, org.codehaus.jackson.map.BeanProperty)
    {
        org.codehaus.jackson.map.deser.BasicDeserializerFactory r0;
        org.codehaus.jackson.map.DeserializationConfig $r1;
        org.codehaus.jackson.map.introspect.Annotated $r2;
        org.codehaus.jackson.map.BeanProperty $r3;
        org.codehaus.jackson.map.AnnotationIntrospector $r4;
        java.lang.Object $r5;
        org.codehaus.jackson.map.JsonDeserializer $r6;

        r0 := @this: org.codehaus.jackson.map.deser.BasicDeserializerFactory;

        $r1 := @parameter0: org.codehaus.jackson.map.DeserializationConfig;

        $r2 := @parameter1: org.codehaus.jackson.map.introspect.Annotated;

        $r3 := @parameter2: org.codehaus.jackson.map.BeanProperty;

        $r4 = virtualinvoke $r1.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.map.AnnotationIntrospector getAnnotationIntrospector()>();

        $r5 = virtualinvoke $r4.<org.codehaus.jackson.map.AnnotationIntrospector: java.lang.Object findDeserializer(org.codehaus.jackson.map.introspect.Annotated,org.codehaus.jackson.map.BeanProperty)>($r2, $r3);

        if $r5 == null goto label1;

        $r6 = virtualinvoke r0.<org.codehaus.jackson.map.deser.BasicDeserializerFactory: org.codehaus.jackson.map.JsonDeserializer _constructDeserializer(org.codehaus.jackson.map.DeserializationConfig,java.lang.Object)>($r1, $r5);

        return $r6;

     label1:
        return null;
    }

    protected org.codehaus.jackson.map.deser.CreatorContainer findMapCreators(org.codehaus.jackson.map.DeserializationConfig, org.codehaus.jackson.map.introspect.BasicBeanDescription) throws org.codehaus.jackson.map.JsonMappingException
    {
        org.codehaus.jackson.map.deser.BasicDeserializerFactory r0;
        org.codehaus.jackson.map.DeserializationConfig $r1;
        org.codehaus.jackson.map.introspect.BasicBeanDescription $r2;
        org.codehaus.jackson.map.deser.CreatorContainer r3;
        java.lang.Class $r4;
        org.codehaus.jackson.map.AnnotationIntrospector $r5;
        org.codehaus.jackson.map.DeserializationConfig$Feature $r6;
        boolean $z0;
        java.util.List $r7;
        java.util.Iterator $r8;
        java.lang.Object $r9;
        org.codehaus.jackson.map.introspect.AnnotatedConstructor r10;
        int $i0, i1, $i2;
        org.codehaus.jackson.map.deser.SettableBeanProperty[] $r11;
        org.codehaus.jackson.map.introspect.AnnotatedParameter $r12;
        java.lang.String r13;
        java.lang.IllegalArgumentException $r14;
        java.lang.StringBuilder $r15;
        org.codehaus.jackson.map.deser.SettableBeanProperty $r16;
        org.codehaus.jackson.map.introspect.AnnotatedMethod r17;

        r0 := @this: org.codehaus.jackson.map.deser.BasicDeserializerFactory;

        $r1 := @parameter0: org.codehaus.jackson.map.DeserializationConfig;

        $r2 := @parameter1: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        $r4 = virtualinvoke $r2.<org.codehaus.jackson.map.introspect.BasicBeanDescription: java.lang.Class getBeanClass()>();

        $r5 = virtualinvoke $r1.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.map.AnnotationIntrospector getAnnotationIntrospector()>();

        $r6 = <org.codehaus.jackson.map.DeserializationConfig$Feature: org.codehaus.jackson.map.DeserializationConfig$Feature CAN_OVERRIDE_ACCESS_MODIFIERS>;

        $z0 = virtualinvoke $r1.<org.codehaus.jackson.map.DeserializationConfig: boolean isEnabled(org.codehaus.jackson.map.DeserializationConfig$Feature)>($r6);

        r3 = new org.codehaus.jackson.map.deser.CreatorContainer;

        specialinvoke r3.<org.codehaus.jackson.map.deser.CreatorContainer: void <init>(java.lang.Class,boolean)>($r4, $z0);

        $r7 = virtualinvoke $r2.<org.codehaus.jackson.map.introspect.BasicBeanDescription: java.util.List getConstructors()>();

        $r8 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label08;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r10 = (org.codehaus.jackson.map.introspect.AnnotatedConstructor) $r9;

        $i0 = virtualinvoke r10.<org.codehaus.jackson.map.introspect.AnnotatedConstructor: int getParameterCount()>();

        if $i0 < 1 goto label01;

        $z0 = virtualinvoke $r5.<org.codehaus.jackson.map.AnnotationIntrospector: boolean hasCreatorAnnotation(org.codehaus.jackson.map.introspect.Annotated)>(r10);

        if $z0 == 0 goto label01;

        $r11 = newarray (org.codehaus.jackson.map.deser.SettableBeanProperty)[$i0];

        i1 = 0;

     label02:
        if i1 >= $i0 goto label07;

        $r12 = virtualinvoke r10.<org.codehaus.jackson.map.introspect.AnnotatedConstructor: org.codehaus.jackson.map.introspect.AnnotatedParameter getParameter(int)>(i1);

        if $r12 != null goto label05;

        r13 = null;

     label03:
        if r13 == null goto label04;

        $i2 = virtualinvoke r13.<java.lang.String: int length()>();

        if $i2 != 0 goto label06;

     label04:
        $r14 = new java.lang.IllegalArgumentException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Parameter #");

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" of constructor ");

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r10);

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has no property name annotation: must have for @JsonCreator for a Map type");

        r13 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r13);

        throw $r14;

     label05:
        r13 = virtualinvoke $r5.<org.codehaus.jackson.map.AnnotationIntrospector: java.lang.String findPropertyNameForParam(org.codehaus.jackson.map.introspect.AnnotatedParameter)>($r12);

        goto label03;

     label06:
        $r16 = virtualinvoke r0.<org.codehaus.jackson.map.deser.BasicDeserializerFactory: org.codehaus.jackson.map.deser.SettableBeanProperty constructCreatorProperty(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.map.introspect.BasicBeanDescription,java.lang.String,int,org.codehaus.jackson.map.introspect.AnnotatedParameter)>($r1, $r2, r13, i1, $r12);

        $r11[i1] = $r16;

        i1 = i1 + 1;

        goto label02;

     label07:
        virtualinvoke r3.<org.codehaus.jackson.map.deser.CreatorContainer: void addPropertyConstructor(org.codehaus.jackson.map.introspect.AnnotatedConstructor,org.codehaus.jackson.map.deser.SettableBeanProperty[])>(r10, $r11);

        goto label01;

     label08:
        $r7 = virtualinvoke $r2.<org.codehaus.jackson.map.introspect.BasicBeanDescription: java.util.List getFactoryMethods()>();

        $r8 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label09:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label16;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r17 = (org.codehaus.jackson.map.introspect.AnnotatedMethod) $r9;

        $i0 = virtualinvoke r17.<org.codehaus.jackson.map.introspect.AnnotatedMethod: int getParameterCount()>();

        if $i0 < 1 goto label09;

        $z0 = virtualinvoke $r5.<org.codehaus.jackson.map.AnnotationIntrospector: boolean hasCreatorAnnotation(org.codehaus.jackson.map.introspect.Annotated)>(r17);

        if $z0 == 0 goto label09;

        $r11 = newarray (org.codehaus.jackson.map.deser.SettableBeanProperty)[$i0];

        i1 = 0;

     label10:
        if i1 >= $i0 goto label15;

        $r12 = virtualinvoke r17.<org.codehaus.jackson.map.introspect.AnnotatedMethod: org.codehaus.jackson.map.introspect.AnnotatedParameter getParameter(int)>(i1);

        if $r12 != null goto label13;

        r13 = null;

     label11:
        if r13 == null goto label12;

        $i2 = virtualinvoke r13.<java.lang.String: int length()>();

        if $i2 != 0 goto label14;

     label12:
        $r14 = new java.lang.IllegalArgumentException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Parameter #");

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" of factory method ");

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r17);

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has no property name annotation: must have for @JsonCreator for a Map type");

        r13 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r13);

        throw $r14;

     label13:
        r13 = virtualinvoke $r5.<org.codehaus.jackson.map.AnnotationIntrospector: java.lang.String findPropertyNameForParam(org.codehaus.jackson.map.introspect.AnnotatedParameter)>($r12);

        goto label11;

     label14:
        $r16 = virtualinvoke r0.<org.codehaus.jackson.map.deser.BasicDeserializerFactory: org.codehaus.jackson.map.deser.SettableBeanProperty constructCreatorProperty(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.map.introspect.BasicBeanDescription,java.lang.String,int,org.codehaus.jackson.map.introspect.AnnotatedParameter)>($r1, $r2, r13, i1, $r12);

        $r11[i1] = $r16;

        i1 = i1 + 1;

        goto label10;

     label15:
        virtualinvoke r3.<org.codehaus.jackson.map.deser.CreatorContainer: void addPropertyFactory(org.codehaus.jackson.map.introspect.AnnotatedMethod,org.codehaus.jackson.map.deser.SettableBeanProperty[])>(r17, $r11);

        goto label09;

     label16:
        return r3;
    }

    public org.codehaus.jackson.map.TypeDeserializer findPropertyContentTypeDeserializer(org.codehaus.jackson.map.DeserializationConfig, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.introspect.AnnotatedMember, org.codehaus.jackson.map.BeanProperty)
    {
        org.codehaus.jackson.map.deser.BasicDeserializerFactory r0;
        org.codehaus.jackson.map.DeserializationConfig $r1;
        org.codehaus.jackson.type.JavaType $r2;
        org.codehaus.jackson.map.introspect.AnnotatedMember $r3;
        org.codehaus.jackson.map.BeanProperty $r4;
        org.codehaus.jackson.map.AnnotationIntrospector $r5;
        org.codehaus.jackson.map.jsontype.TypeResolverBuilder $r6;
        org.codehaus.jackson.map.TypeDeserializer $r7;
        org.codehaus.jackson.map.jsontype.SubtypeResolver $r8;
        java.util.Collection $r9;

        r0 := @this: org.codehaus.jackson.map.deser.BasicDeserializerFactory;

        $r1 := @parameter0: org.codehaus.jackson.map.DeserializationConfig;

        $r2 := @parameter1: org.codehaus.jackson.type.JavaType;

        $r3 := @parameter2: org.codehaus.jackson.map.introspect.AnnotatedMember;

        $r4 := @parameter3: org.codehaus.jackson.map.BeanProperty;

        $r5 = virtualinvoke $r1.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.map.AnnotationIntrospector getAnnotationIntrospector()>();

        $r6 = virtualinvoke $r5.<org.codehaus.jackson.map.AnnotationIntrospector: org.codehaus.jackson.map.jsontype.TypeResolverBuilder findPropertyContentTypeResolver(org.codehaus.jackson.map.introspect.AnnotatedMember,org.codehaus.jackson.type.JavaType)>($r3, $r2);

        $r2 = virtualinvoke $r2.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType getContentType()>();

        if $r6 != null goto label1;

        $r7 = virtualinvoke r0.<org.codehaus.jackson.map.deser.BasicDeserializerFactory: org.codehaus.jackson.map.TypeDeserializer findTypeDeserializer(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanProperty)>($r1, $r2, $r4);

        return $r7;

     label1:
        $r8 = virtualinvoke $r1.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.map.jsontype.SubtypeResolver getSubtypeResolver()>();

        $r9 = virtualinvoke $r8.<org.codehaus.jackson.map.jsontype.SubtypeResolver: java.util.Collection collectAndResolveSubtypes(org.codehaus.jackson.map.introspect.AnnotatedMember,org.codehaus.jackson.map.MapperConfig,org.codehaus.jackson.map.AnnotationIntrospector)>($r3, $r1, $r5);

        $r7 = interfaceinvoke $r6.<org.codehaus.jackson.map.jsontype.TypeResolverBuilder: org.codehaus.jackson.map.TypeDeserializer buildTypeDeserializer(org.codehaus.jackson.type.JavaType,java.util.Collection,org.codehaus.jackson.map.BeanProperty)>($r2, $r9, $r4);

        return $r7;
    }

    public org.codehaus.jackson.map.TypeDeserializer findPropertyTypeDeserializer(org.codehaus.jackson.map.DeserializationConfig, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.introspect.AnnotatedMember, org.codehaus.jackson.map.BeanProperty)
    {
        org.codehaus.jackson.map.deser.BasicDeserializerFactory r0;
        org.codehaus.jackson.map.DeserializationConfig $r1;
        org.codehaus.jackson.type.JavaType $r2;
        org.codehaus.jackson.map.introspect.AnnotatedMember $r3;
        org.codehaus.jackson.map.BeanProperty $r4;
        org.codehaus.jackson.map.AnnotationIntrospector $r5;
        org.codehaus.jackson.map.jsontype.TypeResolverBuilder $r6;
        org.codehaus.jackson.map.TypeDeserializer $r7;
        org.codehaus.jackson.map.jsontype.SubtypeResolver $r8;
        java.util.Collection $r9;

        r0 := @this: org.codehaus.jackson.map.deser.BasicDeserializerFactory;

        $r1 := @parameter0: org.codehaus.jackson.map.DeserializationConfig;

        $r2 := @parameter1: org.codehaus.jackson.type.JavaType;

        $r3 := @parameter2: org.codehaus.jackson.map.introspect.AnnotatedMember;

        $r4 := @parameter3: org.codehaus.jackson.map.BeanProperty;

        $r5 = virtualinvoke $r1.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.map.AnnotationIntrospector getAnnotationIntrospector()>();

        $r6 = virtualinvoke $r5.<org.codehaus.jackson.map.AnnotationIntrospector: org.codehaus.jackson.map.jsontype.TypeResolverBuilder findPropertyTypeResolver(org.codehaus.jackson.map.introspect.AnnotatedMember,org.codehaus.jackson.type.JavaType)>($r3, $r2);

        if $r6 != null goto label1;

        $r7 = virtualinvoke r0.<org.codehaus.jackson.map.deser.BasicDeserializerFactory: org.codehaus.jackson.map.TypeDeserializer findTypeDeserializer(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanProperty)>($r1, $r2, $r4);

        return $r7;

     label1:
        $r8 = virtualinvoke $r1.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.map.jsontype.SubtypeResolver getSubtypeResolver()>();

        $r9 = virtualinvoke $r8.<org.codehaus.jackson.map.jsontype.SubtypeResolver: java.util.Collection collectAndResolveSubtypes(org.codehaus.jackson.map.introspect.AnnotatedMember,org.codehaus.jackson.map.MapperConfig,org.codehaus.jackson.map.AnnotationIntrospector)>($r3, $r1, $r5);

        $r7 = interfaceinvoke $r6.<org.codehaus.jackson.map.jsontype.TypeResolverBuilder: org.codehaus.jackson.map.TypeDeserializer buildTypeDeserializer(org.codehaus.jackson.type.JavaType,java.util.Collection,org.codehaus.jackson.map.BeanProperty)>($r2, $r9, $r4);

        return $r7;
    }

    public org.codehaus.jackson.map.TypeDeserializer findTypeDeserializer(org.codehaus.jackson.map.DeserializationConfig, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.BeanProperty)
    {
        org.codehaus.jackson.map.deser.BasicDeserializerFactory r0;
        org.codehaus.jackson.map.DeserializationConfig $r1;
        org.codehaus.jackson.type.JavaType $r2;
        org.codehaus.jackson.map.BeanProperty $r3;
        java.lang.Class $r4;
        org.codehaus.jackson.map.BeanDescription $r5;
        org.codehaus.jackson.map.introspect.BasicBeanDescription r6;
        org.codehaus.jackson.map.introspect.AnnotatedClass $r7;
        org.codehaus.jackson.map.AnnotationIntrospector $r8;
        org.codehaus.jackson.map.jsontype.TypeResolverBuilder $r9, r10;
        java.util.Collection r11;
        org.codehaus.jackson.map.jsontype.SubtypeResolver $r12;
        org.codehaus.jackson.map.TypeDeserializer $r13;

        r0 := @this: org.codehaus.jackson.map.deser.BasicDeserializerFactory;

        $r1 := @parameter0: org.codehaus.jackson.map.DeserializationConfig;

        $r2 := @parameter1: org.codehaus.jackson.type.JavaType;

        $r3 := @parameter2: org.codehaus.jackson.map.BeanProperty;

        $r4 = virtualinvoke $r2.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        $r5 = virtualinvoke $r1.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.map.BeanDescription introspectClassAnnotations(java.lang.Class)>($r4);

        r6 = (org.codehaus.jackson.map.introspect.BasicBeanDescription) $r5;

        $r7 = virtualinvoke r6.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.AnnotatedClass getClassInfo()>();

        $r8 = virtualinvoke $r1.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.map.AnnotationIntrospector getAnnotationIntrospector()>();

        $r9 = virtualinvoke $r8.<org.codehaus.jackson.map.AnnotationIntrospector: org.codehaus.jackson.map.jsontype.TypeResolverBuilder findTypeResolver(org.codehaus.jackson.map.introspect.AnnotatedClass,org.codehaus.jackson.type.JavaType)>($r7, $r2);

        r10 = $r9;

        r11 = null;

        if $r9 != null goto label1;

        $r9 = virtualinvoke $r1.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.map.jsontype.TypeResolverBuilder getDefaultTyper(org.codehaus.jackson.type.JavaType)>($r2);

        r10 = $r9;

        if $r9 != null goto label2;

        return null;

     label1:
        $r12 = virtualinvoke $r1.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.map.jsontype.SubtypeResolver getSubtypeResolver()>();

        r11 = virtualinvoke $r12.<org.codehaus.jackson.map.jsontype.SubtypeResolver: java.util.Collection collectAndResolveSubtypes(org.codehaus.jackson.map.introspect.AnnotatedClass,org.codehaus.jackson.map.MapperConfig,org.codehaus.jackson.map.AnnotationIntrospector)>($r7, $r1, $r8);

     label2:
        $r13 = interfaceinvoke r10.<org.codehaus.jackson.map.jsontype.TypeResolverBuilder: org.codehaus.jackson.map.TypeDeserializer buildTypeDeserializer(org.codehaus.jackson.type.JavaType,java.util.Collection,org.codehaus.jackson.map.BeanProperty)>($r2, r11, $r3);

        return $r13;
    }

    protected org.codehaus.jackson.type.JavaType modifyTypeByAnnotation(org.codehaus.jackson.map.DeserializationConfig, org.codehaus.jackson.map.introspect.Annotated, org.codehaus.jackson.type.JavaType, java.lang.String) throws org.codehaus.jackson.map.JsonMappingException
    {
        org.codehaus.jackson.map.deser.BasicDeserializerFactory r0;
        org.codehaus.jackson.map.DeserializationConfig $r1;
        org.codehaus.jackson.map.introspect.Annotated $r2;
        java.lang.String $r3;
        org.codehaus.jackson.type.JavaType r4, $r7;
        org.codehaus.jackson.map.AnnotationIntrospector $r5;
        java.lang.Class $r6;
        boolean $z0;
        java.lang.StringBuilder $r8, $r13;
        java.lang.Throwable r9, $r11, r12;
        org.codehaus.jackson.map.type.MapType $r10;
        org.codehaus.jackson.map.JsonMappingException $r14;
        java.lang.IllegalArgumentException $r15;

        r0 := @this: org.codehaus.jackson.map.deser.BasicDeserializerFactory;

        $r1 := @parameter0: org.codehaus.jackson.map.DeserializationConfig;

        $r2 := @parameter1: org.codehaus.jackson.map.introspect.Annotated;

        r4 := @parameter2: org.codehaus.jackson.type.JavaType;

        $r3 := @parameter3: java.lang.String;

        $r5 = virtualinvoke $r1.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.map.AnnotationIntrospector getAnnotationIntrospector()>();

        $r6 = virtualinvoke $r5.<org.codehaus.jackson.map.AnnotationIntrospector: java.lang.Class findDeserializationType(org.codehaus.jackson.map.introspect.Annotated,org.codehaus.jackson.type.JavaType,java.lang.String)>($r2, r4, $r3);

        if $r6 == null goto label03;

     label01:
        $r7 = virtualinvoke r4.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType narrowBy(java.lang.Class)>($r6);

     label02:
        r4 = $r7;

     label03:
        $z0 = virtualinvoke r4.<org.codehaus.jackson.type.JavaType: boolean isContainerType()>();

        if $z0 == 0 goto label13;

        $r7 = virtualinvoke r4.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType getKeyType()>();

        $r6 = virtualinvoke $r5.<org.codehaus.jackson.map.AnnotationIntrospector: java.lang.Class findDeserializationKeyType(org.codehaus.jackson.map.introspect.Annotated,org.codehaus.jackson.type.JavaType,java.lang.String)>($r2, $r7, $r3);

        if $r6 == null goto label08;

        $z0 = r4 instanceof org.codehaus.jackson.map.type.MapType;

        if $z0 != 0 goto label05;

        $r14 = new org.codehaus.jackson.map.JsonMappingException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal key-type annotation: type ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not a Map type");

        $r3 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<org.codehaus.jackson.map.JsonMappingException: void <init>(java.lang.String)>($r3);

        throw $r14;

     label04:
        r9 := @caughtexception;

        $r14 = new org.codehaus.jackson.map.JsonMappingException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to narrow type ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with concrete-type annotation (value ");

        $r3 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("), method \'");

        $r3 = virtualinvoke $r2.<org.codehaus.jackson.map.introspect.Annotated: java.lang.String getName()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\': ");

        $r15 = (java.lang.IllegalArgumentException) r9;

        $r3 = virtualinvoke $r15.<java.lang.IllegalArgumentException: java.lang.String getMessage()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<org.codehaus.jackson.map.JsonMappingException: void <init>(java.lang.String,org.codehaus.jackson.JsonLocation,java.lang.Throwable)>($r3, null, r9);

        throw $r14;

     label05:
        $r10 = (org.codehaus.jackson.map.type.MapType) r4;

     label06:
        $r7 = virtualinvoke $r10.<org.codehaus.jackson.map.type.MapType: org.codehaus.jackson.type.JavaType narrowKey(java.lang.Class)>($r6);

     label07:
        r4 = $r7;

     label08:
        $r7 = virtualinvoke r4.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType getContentType()>();

        $r6 = virtualinvoke $r5.<org.codehaus.jackson.map.AnnotationIntrospector: java.lang.Class findDeserializationContentType(org.codehaus.jackson.map.introspect.Annotated,org.codehaus.jackson.type.JavaType,java.lang.String)>($r2, $r7, $r3);

        if $r6 == null goto label13;

     label09:
        $r7 = virtualinvoke r4.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType narrowContentsBy(java.lang.Class)>($r6);

     label10:
        return $r7;

     label11:
        $r11 := @caughtexception;

        $r14 = new org.codehaus.jackson.map.JsonMappingException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to narrow key type ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with key-type annotation (");

        $r3 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): ");

        $r15 = (java.lang.IllegalArgumentException) $r11;

        $r3 = virtualinvoke $r15.<java.lang.IllegalArgumentException: java.lang.String getMessage()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<org.codehaus.jackson.map.JsonMappingException: void <init>(java.lang.String,org.codehaus.jackson.JsonLocation,java.lang.Throwable)>($r3, null, $r11);

        throw $r14;

     label12:
        r12 := @caughtexception;

        $r14 = new org.codehaus.jackson.map.JsonMappingException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to narrow content type ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with content-type annotation (");

        $r3 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): ");

        $r15 = (java.lang.IllegalArgumentException) r12;

        $r3 = virtualinvoke $r15.<java.lang.IllegalArgumentException: java.lang.String getMessage()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<org.codehaus.jackson.map.JsonMappingException: void <init>(java.lang.String,org.codehaus.jackson.JsonLocation,java.lang.Throwable)>($r3, null, r12);

        throw $r14;

     label13:
        return r4;

        catch java.lang.IllegalArgumentException from label01 to label02 with label04;
        catch java.lang.IllegalArgumentException from label06 to label07 with label11;
        catch java.lang.IllegalArgumentException from label09 to label10 with label12;
    }

    protected org.codehaus.jackson.type.JavaType resolveType(org.codehaus.jackson.map.DeserializationConfig, org.codehaus.jackson.map.introspect.BasicBeanDescription, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.introspect.AnnotatedMember, org.codehaus.jackson.map.BeanProperty)
    {
        org.codehaus.jackson.map.deser.BasicDeserializerFactory r0;
        org.codehaus.jackson.map.DeserializationConfig $r1;
        org.codehaus.jackson.map.introspect.BasicBeanDescription $r2;
        org.codehaus.jackson.map.introspect.AnnotatedMember $r3;
        org.codehaus.jackson.map.BeanProperty $r4;
        org.codehaus.jackson.type.JavaType $r5, $r8;
        boolean $z0;
        org.codehaus.jackson.map.AnnotationIntrospector $r6;
        org.codehaus.jackson.map.DeserializationConfig$Feature $r7;
        java.lang.Class $r9;
        java.lang.Object $r10;
        org.codehaus.jackson.map.KeyDeserializer r11;
        org.codehaus.jackson.map.JsonDeserializer r12;
        org.codehaus.jackson.map.TypeDeserializer $r13;

        r0 := @this: org.codehaus.jackson.map.deser.BasicDeserializerFactory;

        $r1 := @parameter0: org.codehaus.jackson.map.DeserializationConfig;

        $r2 := @parameter1: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        $r5 := @parameter2: org.codehaus.jackson.type.JavaType;

        $r3 := @parameter3: org.codehaus.jackson.map.introspect.AnnotatedMember;

        $r4 := @parameter4: org.codehaus.jackson.map.BeanProperty;

        $z0 = virtualinvoke $r5.<org.codehaus.jackson.type.JavaType: boolean isContainerType()>();

        if $z0 == 0 goto label3;

        $r6 = virtualinvoke $r1.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.map.AnnotationIntrospector getAnnotationIntrospector()>();

        $r7 = <org.codehaus.jackson.map.DeserializationConfig$Feature: org.codehaus.jackson.map.DeserializationConfig$Feature CAN_OVERRIDE_ACCESS_MODIFIERS>;

        $z0 = virtualinvoke $r1.<org.codehaus.jackson.map.DeserializationConfig: boolean isEnabled(org.codehaus.jackson.map.DeserializationConfig$Feature)>($r7);

        $r8 = virtualinvoke $r5.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType getKeyType()>();

        if $r8 == null goto label1;

        $r9 = virtualinvoke $r6.<org.codehaus.jackson.map.AnnotationIntrospector: java.lang.Class findKeyDeserializer(org.codehaus.jackson.map.introspect.Annotated)>($r3);

        if $r9 == null goto label1;

        if $r9 == class "Lorg/codehaus/jackson/map/KeyDeserializer$None;" goto label1;

        $r10 = staticinvoke <org.codehaus.jackson.map.util.ClassUtil: java.lang.Object createInstance(java.lang.Class,boolean)>($r9, $z0);

        r11 = (org.codehaus.jackson.map.KeyDeserializer) $r10;

        virtualinvoke $r8.<org.codehaus.jackson.type.JavaType: void setValueHandler(java.lang.Object)>(r11);

     label1:
        $r9 = virtualinvoke $r6.<org.codehaus.jackson.map.AnnotationIntrospector: java.lang.Class findContentDeserializer(org.codehaus.jackson.map.introspect.Annotated)>($r3);

        if $r9 == null goto label2;

        if $r9 == class "Lorg/codehaus/jackson/map/JsonDeserializer$None;" goto label2;

        $r10 = staticinvoke <org.codehaus.jackson.map.util.ClassUtil: java.lang.Object createInstance(java.lang.Class,boolean)>($r9, $z0);

        r12 = (org.codehaus.jackson.map.JsonDeserializer) $r10;

        $r8 = virtualinvoke $r5.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType getContentType()>();

        virtualinvoke $r8.<org.codehaus.jackson.type.JavaType: void setValueHandler(java.lang.Object)>(r12);

     label2:
        $z0 = $r3 instanceof org.codehaus.jackson.map.introspect.AnnotatedMember;

        if $z0 == 0 goto label3;

        $r13 = virtualinvoke r0.<org.codehaus.jackson.map.deser.BasicDeserializerFactory: org.codehaus.jackson.map.TypeDeserializer findPropertyContentTypeDeserializer(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.introspect.AnnotatedMember,org.codehaus.jackson.map.BeanProperty)>($r1, $r5, $r3, $r4);

        if $r13 == null goto label3;

        $r5 = virtualinvoke $r5.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType withContentTypeHandler(java.lang.Object)>($r13);

     label3:
        $z0 = $r3 instanceof org.codehaus.jackson.map.introspect.AnnotatedMember;

        if $z0 == 0 goto label5;

        $r13 = virtualinvoke r0.<org.codehaus.jackson.map.deser.BasicDeserializerFactory: org.codehaus.jackson.map.TypeDeserializer findPropertyTypeDeserializer(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.introspect.AnnotatedMember,org.codehaus.jackson.map.BeanProperty)>($r1, $r5, $r3, $r4);

     label4:
        if $r13 == null goto label6;

        $r5 = virtualinvoke $r5.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType withTypeHandler(java.lang.Object)>($r13);

        return $r5;

     label5:
        $r13 = virtualinvoke r0.<org.codehaus.jackson.map.deser.BasicDeserializerFactory: org.codehaus.jackson.map.TypeDeserializer findTypeDeserializer(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanProperty)>($r1, $r5, null);

        goto label4;

     label6:
        return $r5;
    }

    public abstract org.codehaus.jackson.map.DeserializerFactory withConfig(org.codehaus.jackson.map.DeserializerFactory$Config);
}
