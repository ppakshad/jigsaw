public final class org.codehaus.jackson.io.NumberOutput extends java.lang.Object
{
    private static int BILLION;
    static final char[] FULL_TRIPLETS;
    static final byte[] FULL_TRIPLETS_B;
    static final char[] LEADING_TRIPLETS;
    private static long MAX_INT_AS_LONG;
    private static int MILLION;
    private static long MIN_INT_AS_LONG;
    private static final char NULL_CHAR;
    static final java.lang.String SMALLEST_LONG;
    private static long TEN_BILLION_L;
    private static long THOUSAND_L;
    static final java.lang.String[] sSmallIntStrs;
    static final java.lang.String[] sSmallIntStrs2;

    static void <clinit>()
    {
        java.lang.String $r0;
        char[] r1;
        int i0, i1, i2, i5, i8;
        char c3, c4, c6, c7, c9;
        byte[] r2;
        byte b10;
        java.lang.String[] r3;

        <org.codehaus.jackson.io.NumberOutput: int MILLION> = 1000000;

        <org.codehaus.jackson.io.NumberOutput: int BILLION> = 1000000000;

        <org.codehaus.jackson.io.NumberOutput: long TEN_BILLION_L> = 10000000000L;

        <org.codehaus.jackson.io.NumberOutput: long THOUSAND_L> = 1000L;

        <org.codehaus.jackson.io.NumberOutput: long MIN_INT_AS_LONG> = -2147483648L;

        <org.codehaus.jackson.io.NumberOutput: long MAX_INT_AS_LONG> = 2147483647L;

        $r0 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(-9223372036854775808L);

        <org.codehaus.jackson.io.NumberOutput: java.lang.String SMALLEST_LONG> = $r0;

        r1 = newarray (char)[4000];

        <org.codehaus.jackson.io.NumberOutput: char[] LEADING_TRIPLETS> = r1;

        r1 = newarray (char)[4000];

        <org.codehaus.jackson.io.NumberOutput: char[] FULL_TRIPLETS> = r1;

        i0 = 0;

        i1 = 0;

     label01:
        if i0 >= 10 goto label10;

        i2 = i0 + 48;

        c3 = (char) i2;

        if i0 != 0 goto label06;

        c4 = 0;

     label02:
        i2 = 0;

     label03:
        if i2 >= 10 goto label09;

        i5 = i2 + 48;

        c6 = (char) i5;

        if i0 != 0 goto label07;

        if i2 != 0 goto label07;

        c7 = 0;

     label04:
        i5 = 0;

     label05:
        if i5 >= 10 goto label08;

        i8 = i5 + 48;

        c9 = (char) i8;

        r1 = <org.codehaus.jackson.io.NumberOutput: char[] LEADING_TRIPLETS>;

        r1[i1] = c4;

        r1 = <org.codehaus.jackson.io.NumberOutput: char[] LEADING_TRIPLETS>;

        i8 = i1 + 1;

        r1[i8] = c7;

        r1 = <org.codehaus.jackson.io.NumberOutput: char[] LEADING_TRIPLETS>;

        i8 = i1 + 2;

        r1[i8] = c9;

        r1 = <org.codehaus.jackson.io.NumberOutput: char[] FULL_TRIPLETS>;

        r1[i1] = c3;

        r1 = <org.codehaus.jackson.io.NumberOutput: char[] FULL_TRIPLETS>;

        i8 = i1 + 1;

        r1[i8] = c6;

        r1 = <org.codehaus.jackson.io.NumberOutput: char[] FULL_TRIPLETS>;

        i8 = i1 + 2;

        r1[i8] = c9;

        i1 = i1 + 4;

        i5 = i5 + 1;

        goto label05;

     label06:
        c4 = c3;

        goto label02;

     label07:
        c7 = c6;

        goto label04;

     label08:
        i2 = i2 + 1;

        goto label03;

     label09:
        i0 = i0 + 1;

        goto label01;

     label10:
        r2 = newarray (byte)[4000];

        <org.codehaus.jackson.io.NumberOutput: byte[] FULL_TRIPLETS_B> = r2;

        i0 = 0;

     label11:
        if i0 >= 4000 goto label12;

        r2 = <org.codehaus.jackson.io.NumberOutput: byte[] FULL_TRIPLETS_B>;

        r1 = <org.codehaus.jackson.io.NumberOutput: char[] FULL_TRIPLETS>;

        c3 = r1[i0];

        b10 = (byte) c3;

        r2[i0] = b10;

        i0 = i0 + 1;

        goto label11;

     label12:
        r3 = newarray (java.lang.String)[11];

        r3[0] = "0";

        r3[1] = "1";

        r3[2] = "2";

        r3[3] = "3";

        r3[4] = "4";

        r3[5] = "5";

        r3[6] = "6";

        r3[7] = "7";

        r3[8] = "8";

        r3[9] = "9";

        r3[10] = "10";

        <org.codehaus.jackson.io.NumberOutput: java.lang.String[] sSmallIntStrs> = r3;

        r3 = newarray (java.lang.String)[10];

        r3[0] = "-1";

        r3[1] = "-2";

        r3[2] = "-3";

        r3[3] = "-4";

        r3[4] = "-5";

        r3[5] = "-6";

        r3[6] = "-7";

        r3[7] = "-8";

        r3[8] = "-9";

        r3[9] = "-10";

        <org.codehaus.jackson.io.NumberOutput: java.lang.String[] sSmallIntStrs2> = r3;

        return;
    }

    public void <init>()
    {
        org.codehaus.jackson.io.NumberOutput r0;

        r0 := @this: org.codehaus.jackson.io.NumberOutput;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static int calcLongStrLength(long)
    {
        long $l0, l2, $l4;
        int i1;
        byte $b3;

        $l0 := @parameter0: long;

        i1 = 10;

        l2 = <org.codehaus.jackson.io.NumberOutput: long TEN_BILLION_L>;

     label1:
        $b3 = $l0 cmp l2;

        if $b3 < 0 goto label3;

        if i1 != 19 goto label2;

        return i1;

     label2:
        i1 = i1 + 1;

        $l4 = l2 << 3;

        l2 = l2 << 1;

        l2 = $l4 + l2;

        goto label1;

     label3:
        return i1;
    }

    private static int outputFullTriplet(int, byte[], int)
    {
        int $i0, i1, i2, i3;
        byte[] $r0, $r1;
        byte $b4;

        $i0 := @parameter0: int;

        $r0 := @parameter1: byte[];

        i1 := @parameter2: int;

        i2 = $i0 << 2;

        i3 = i1 + 1;

        $r1 = <org.codehaus.jackson.io.NumberOutput: byte[] FULL_TRIPLETS_B>;

        $i0 = i2 + 1;

        $b4 = $r1[i2];

        $r0[i1] = $b4;

        i1 = i3 + 1;

        $r1 = <org.codehaus.jackson.io.NumberOutput: byte[] FULL_TRIPLETS_B>;

        i2 = $i0 + 1;

        $b4 = $r1[$i0];

        $r0[i3] = $b4;

        $i0 = i1 + 1;

        $r1 = <org.codehaus.jackson.io.NumberOutput: byte[] FULL_TRIPLETS_B>;

        $b4 = $r1[i2];

        $r0[i1] = $b4;

        return $i0;
    }

    private static int outputFullTriplet(int, char[], int)
    {
        int $i0, i1, i2, i3;
        char[] $r0, $r1;
        char $c4;

        $i0 := @parameter0: int;

        $r0 := @parameter1: char[];

        i1 := @parameter2: int;

        i2 = $i0 << 2;

        i3 = i1 + 1;

        $r1 = <org.codehaus.jackson.io.NumberOutput: char[] FULL_TRIPLETS>;

        $i0 = i2 + 1;

        $c4 = $r1[i2];

        $r0[i1] = $c4;

        i1 = i3 + 1;

        $r1 = <org.codehaus.jackson.io.NumberOutput: char[] FULL_TRIPLETS>;

        i2 = $i0 + 1;

        $c4 = $r1[$i0];

        $r0[i3] = $c4;

        $i0 = i1 + 1;

        $r1 = <org.codehaus.jackson.io.NumberOutput: char[] FULL_TRIPLETS>;

        $c4 = $r1[i2];

        $r0[i1] = $c4;

        return $i0;
    }

    public static int outputInt(int, byte[], int)
    {
        byte[] $r0;
        int i0, i1, i3, $i5, $i6;
        long $l2;
        byte $b4;
        boolean z0;

        i0 := @parameter0: int;

        $r0 := @parameter1: byte[];

        i1 := @parameter2: int;

        if i0 >= 0 goto label02;

        if i0 != -2147483648 goto label01;

        $l2 = (long) i0;

        i0 = staticinvoke <org.codehaus.jackson.io.NumberOutput: int outputLong(long,byte[],int)>($l2, $r0, i1);

        return i0;

     label01:
        $r0[i1] = 45;

        i0 = neg i0;

        i1 = i1 + 1;

     label02:
        i3 = <org.codehaus.jackson.io.NumberOutput: int MILLION>;

        if i0 >= i3 goto label06;

        if i0 >= 1000 goto label05;

        if i0 >= 10 goto label04;

        i0 = i0 + 48;

        $b4 = (byte) i0;

        $r0[i1] = $b4;

        i0 = i1 + 1;

     label03:
        return i0;

     label04:
        i0 = staticinvoke <org.codehaus.jackson.io.NumberOutput: int outputLeadingTriplet(int,byte[],int)>(i0, $r0, i1);

        goto label03;

     label05:
        i3 = i0 / 1000;

        $i5 = i3 * 1000;

        i0 = i0 - $i5;

        i1 = staticinvoke <org.codehaus.jackson.io.NumberOutput: int outputLeadingTriplet(int,byte[],int)>(i3, $r0, i1);

        i0 = staticinvoke <org.codehaus.jackson.io.NumberOutput: int outputFullTriplet(int,byte[],int)>(i0, $r0, i1);

        goto label03;

     label06:
        i3 = <org.codehaus.jackson.io.NumberOutput: int BILLION>;

        if i0 < i3 goto label10;

        z0 = 1;

     label07:
        if z0 == 0 goto label08;

        i3 = <org.codehaus.jackson.io.NumberOutput: int BILLION>;

        i0 = i0 - i3;

        i3 = <org.codehaus.jackson.io.NumberOutput: int BILLION>;

        if i0 < i3 goto label11;

        i3 = <org.codehaus.jackson.io.NumberOutput: int BILLION>;

        i0 = i0 - i3;

        $r0[i1] = 50;

        i1 = i1 + 1;

     label08:
        i3 = i0 / 1000;

        $i5 = i3 * 1000;

        i0 = i0 - $i5;

        $i5 = i3 / 1000;

        $i6 = $i5 * 1000;

        i3 = i3 - $i6;

        if z0 == 0 goto label12;

        i1 = staticinvoke <org.codehaus.jackson.io.NumberOutput: int outputFullTriplet(int,byte[],int)>($i5, $r0, i1);

     label09:
        i1 = staticinvoke <org.codehaus.jackson.io.NumberOutput: int outputFullTriplet(int,byte[],int)>(i3, $r0, i1);

        i0 = staticinvoke <org.codehaus.jackson.io.NumberOutput: int outputFullTriplet(int,byte[],int)>(i0, $r0, i1);

        return i0;

     label10:
        z0 = 0;

        goto label07;

     label11:
        $r0[i1] = 49;

        i1 = i1 + 1;

        goto label08;

     label12:
        i1 = staticinvoke <org.codehaus.jackson.io.NumberOutput: int outputLeadingTriplet(int,byte[],int)>($i5, $r0, i1);

        goto label09;
    }

    public static int outputInt(int, char[], int)
    {
        char[] $r0;
        int i0, i1, i3, $i5, $i6;
        long $l2;
        char $c4;
        boolean z0;

        i0 := @parameter0: int;

        $r0 := @parameter1: char[];

        i1 := @parameter2: int;

        if i0 >= 0 goto label02;

        if i0 != -2147483648 goto label01;

        $l2 = (long) i0;

        i0 = staticinvoke <org.codehaus.jackson.io.NumberOutput: int outputLong(long,char[],int)>($l2, $r0, i1);

        return i0;

     label01:
        $r0[i1] = 45;

        i0 = neg i0;

        i1 = i1 + 1;

     label02:
        i3 = <org.codehaus.jackson.io.NumberOutput: int MILLION>;

        if i0 >= i3 goto label06;

        if i0 >= 1000 goto label05;

        if i0 >= 10 goto label04;

        i0 = i0 + 48;

        $c4 = (char) i0;

        $r0[i1] = $c4;

        i0 = i1 + 1;

     label03:
        return i0;

     label04:
        i0 = staticinvoke <org.codehaus.jackson.io.NumberOutput: int outputLeadingTriplet(int,char[],int)>(i0, $r0, i1);

        goto label03;

     label05:
        i3 = i0 / 1000;

        $i5 = i3 * 1000;

        i0 = i0 - $i5;

        i1 = staticinvoke <org.codehaus.jackson.io.NumberOutput: int outputLeadingTriplet(int,char[],int)>(i3, $r0, i1);

        i0 = staticinvoke <org.codehaus.jackson.io.NumberOutput: int outputFullTriplet(int,char[],int)>(i0, $r0, i1);

        goto label03;

     label06:
        i3 = <org.codehaus.jackson.io.NumberOutput: int BILLION>;

        if i0 < i3 goto label10;

        z0 = 1;

     label07:
        if z0 == 0 goto label08;

        i3 = <org.codehaus.jackson.io.NumberOutput: int BILLION>;

        i0 = i0 - i3;

        i3 = <org.codehaus.jackson.io.NumberOutput: int BILLION>;

        if i0 < i3 goto label11;

        i3 = <org.codehaus.jackson.io.NumberOutput: int BILLION>;

        i0 = i0 - i3;

        $r0[i1] = 50;

        i1 = i1 + 1;

     label08:
        i3 = i0 / 1000;

        $i5 = i3 * 1000;

        i0 = i0 - $i5;

        $i5 = i3 / 1000;

        $i6 = $i5 * 1000;

        i3 = i3 - $i6;

        if z0 == 0 goto label12;

        i1 = staticinvoke <org.codehaus.jackson.io.NumberOutput: int outputFullTriplet(int,char[],int)>($i5, $r0, i1);

     label09:
        i1 = staticinvoke <org.codehaus.jackson.io.NumberOutput: int outputFullTriplet(int,char[],int)>(i3, $r0, i1);

        i0 = staticinvoke <org.codehaus.jackson.io.NumberOutput: int outputFullTriplet(int,char[],int)>(i0, $r0, i1);

        return i0;

     label10:
        z0 = 0;

        goto label07;

     label11:
        $r0[i1] = 49;

        i1 = i1 + 1;

        goto label08;

     label12:
        i1 = staticinvoke <org.codehaus.jackson.io.NumberOutput: int outputLeadingTriplet(int,char[],int)>($i5, $r0, i1);

        goto label09;
    }

    private static int outputLeadingTriplet(int, byte[], int)
    {
        int $i0, i1, i2;
        byte[] $r0;
        char[] $r1;
        char c3;
        byte $b4;

        $i0 := @parameter0: int;

        $r0 := @parameter1: byte[];

        i1 := @parameter2: int;

        i2 = $i0 << 2;

        $r1 = <org.codehaus.jackson.io.NumberOutput: char[] LEADING_TRIPLETS>;

        $i0 = i2 + 1;

        c3 = $r1[i2];

        if c3 == 0 goto label1;

        $b4 = (byte) c3;

        $r0[i1] = $b4;

        i1 = i1 + 1;

     label1:
        $r1 = <org.codehaus.jackson.io.NumberOutput: char[] LEADING_TRIPLETS>;

        i2 = $i0 + 1;

        c3 = $r1[$i0];

        if c3 == 0 goto label2;

        $b4 = (byte) c3;

        $r0[i1] = $b4;

        i1 = i1 + 1;

     label2:
        $i0 = i1 + 1;

        $r1 = <org.codehaus.jackson.io.NumberOutput: char[] LEADING_TRIPLETS>;

        c3 = $r1[i2];

        $b4 = (byte) c3;

        $r0[i1] = $b4;

        return $i0;
    }

    private static int outputLeadingTriplet(int, char[], int)
    {
        int $i0, i1, i2;
        char[] $r0, $r1;
        char c3;

        $i0 := @parameter0: int;

        $r0 := @parameter1: char[];

        i1 := @parameter2: int;

        i2 = $i0 << 2;

        $r1 = <org.codehaus.jackson.io.NumberOutput: char[] LEADING_TRIPLETS>;

        $i0 = i2 + 1;

        c3 = $r1[i2];

        if c3 == 0 goto label1;

        $r0[i1] = c3;

        i1 = i1 + 1;

     label1:
        $r1 = <org.codehaus.jackson.io.NumberOutput: char[] LEADING_TRIPLETS>;

        i2 = $i0 + 1;

        c3 = $r1[$i0];

        if c3 == 0 goto label2;

        $r0[i1] = c3;

        i1 = i1 + 1;

     label2:
        $i0 = i1 + 1;

        $r1 = <org.codehaus.jackson.io.NumberOutput: char[] LEADING_TRIPLETS>;

        c3 = $r1[i2];

        $r0[i1] = c3;

        return $i0;
    }

    public static int outputLong(long, byte[], int)
    {
        byte[] $r0;
        int i0, i2, i5, i6, i9, $i10;
        long $l1, $l4, $l8;
        byte $b3;
        java.lang.String $r1;
        char $c7;

        $l1 := @parameter0: long;

        $r0 := @parameter1: byte[];

        i2 := @parameter2: int;

        $b3 = $l1 cmp 0L;

        if $b3 >= 0 goto label07;

        $l4 = <org.codehaus.jackson.io.NumberOutput: long MIN_INT_AS_LONG>;

        $b3 = $l1 cmp $l4;

        if $b3 <= 0 goto label01;

        i0 = (int) $l1;

        i2 = staticinvoke <org.codehaus.jackson.io.NumberOutput: int outputInt(int,byte[],int)>(i0, $r0, i2);

        return i2;

     label01:
        $b3 = $l1 cmp -9223372036854775808L;

        if $b3 != 0 goto label04;

        $r1 = <org.codehaus.jackson.io.NumberOutput: java.lang.String SMALLEST_LONG>;

        i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        i5 = 0;

     label02:
        if i5 >= i0 goto label03;

        $r1 = <org.codehaus.jackson.io.NumberOutput: java.lang.String SMALLEST_LONG>;

        $c7 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(i5);

        $b3 = (byte) $c7;

        $r0[i2] = $b3;

        i5 = i5 + 1;

        i2 = i2 + 1;

        goto label02;

     label03:
        return i2;

     label04:
        $r0[i2] = 45;

        $l1 = neg $l1;

        i2 = i2 + 1;

     label05:
        i0 = i2;

        i5 = staticinvoke <org.codehaus.jackson.io.NumberOutput: int calcLongStrLength(long)>($l1);

        i2 = i2 + i5;

        i5 = i2;

     label06:
        $l4 = <org.codehaus.jackson.io.NumberOutput: long MAX_INT_AS_LONG>;

        $b3 = $l1 cmp $l4;

        if $b3 <= 0 goto label08;

        i5 = i5 + -3;

        $l4 = <org.codehaus.jackson.io.NumberOutput: long THOUSAND_L>;

        $l4 = $l1 / $l4;

        $l8 = <org.codehaus.jackson.io.NumberOutput: long THOUSAND_L>;

        $l8 = $l8 * $l4;

        $l1 = $l1 - $l8;

        i6 = (int) $l1;

        staticinvoke <org.codehaus.jackson.io.NumberOutput: int outputFullTriplet(int,byte[],int)>(i6, $r0, i5);

        $l1 = $l4;

        goto label06;

     label07:
        $l4 = <org.codehaus.jackson.io.NumberOutput: long MAX_INT_AS_LONG>;

        $b3 = $l1 cmp $l4;

        if $b3 > 0 goto label05;

        i0 = (int) $l1;

        i2 = staticinvoke <org.codehaus.jackson.io.NumberOutput: int outputInt(int,byte[],int)>(i0, $r0, i2);

        return i2;

     label08:
        i9 = (int) $l1;

     label09:
        if i9 < 1000 goto label10;

        i5 = i5 + -3;

        i6 = i9 / 1000;

        $i10 = i6 * 1000;

        i9 = i9 - $i10;

        staticinvoke <org.codehaus.jackson.io.NumberOutput: int outputFullTriplet(int,byte[],int)>(i9, $r0, i5);

        i9 = i6;

        goto label09;

     label10:
        staticinvoke <org.codehaus.jackson.io.NumberOutput: int outputLeadingTriplet(int,byte[],int)>(i9, $r0, i0);

        return i2;
    }

    public static int outputLong(long, char[], int)
    {
        char[] $r0;
        int i0, i2, $i5, i7, i8, $i9;
        long $l1, $l4, $l6;
        byte $b3;
        java.lang.String $r1;

        $l1 := @parameter0: long;

        $r0 := @parameter1: char[];

        i2 := @parameter2: int;

        $b3 = $l1 cmp 0L;

        if $b3 >= 0 goto label5;

        $l4 = <org.codehaus.jackson.io.NumberOutput: long MIN_INT_AS_LONG>;

        $b3 = $l1 cmp $l4;

        if $b3 <= 0 goto label1;

        i0 = (int) $l1;

        i2 = staticinvoke <org.codehaus.jackson.io.NumberOutput: int outputInt(int,char[],int)>(i0, $r0, i2);

        return i2;

     label1:
        $b3 = $l1 cmp -9223372036854775808L;

        if $b3 != 0 goto label2;

        $r1 = <org.codehaus.jackson.io.NumberOutput: java.lang.String SMALLEST_LONG>;

        i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        $r1 = <org.codehaus.jackson.io.NumberOutput: java.lang.String SMALLEST_LONG>;

        virtualinvoke $r1.<java.lang.String: void getChars(int,int,char[],int)>(0, i0, $r0, i2);

        i2 = i2 + i0;

        return i2;

     label2:
        $r0[i2] = 45;

        $l1 = neg $l1;

        i2 = i2 + 1;

     label3:
        i0 = i2;

        $i5 = staticinvoke <org.codehaus.jackson.io.NumberOutput: int calcLongStrLength(long)>($l1);

        i2 = i2 + $i5;

        $i5 = i2;

     label4:
        $l4 = <org.codehaus.jackson.io.NumberOutput: long MAX_INT_AS_LONG>;

        $b3 = $l1 cmp $l4;

        if $b3 <= 0 goto label6;

        $i5 = $i5 + -3;

        $l4 = <org.codehaus.jackson.io.NumberOutput: long THOUSAND_L>;

        $l4 = $l1 / $l4;

        $l6 = <org.codehaus.jackson.io.NumberOutput: long THOUSAND_L>;

        $l6 = $l6 * $l4;

        $l1 = $l1 - $l6;

        i7 = (int) $l1;

        staticinvoke <org.codehaus.jackson.io.NumberOutput: int outputFullTriplet(int,char[],int)>(i7, $r0, $i5);

        $l1 = $l4;

        goto label4;

     label5:
        $l4 = <org.codehaus.jackson.io.NumberOutput: long MAX_INT_AS_LONG>;

        $b3 = $l1 cmp $l4;

        if $b3 > 0 goto label3;

        i0 = (int) $l1;

        i2 = staticinvoke <org.codehaus.jackson.io.NumberOutput: int outputInt(int,char[],int)>(i0, $r0, i2);

        return i2;

     label6:
        i8 = (int) $l1;

     label7:
        if i8 < 1000 goto label8;

        $i5 = $i5 + -3;

        i7 = i8 / 1000;

        $i9 = i7 * 1000;

        i8 = i8 - $i9;

        staticinvoke <org.codehaus.jackson.io.NumberOutput: int outputFullTriplet(int,char[],int)>(i8, $r0, $i5);

        i8 = i7;

        goto label7;

     label8:
        staticinvoke <org.codehaus.jackson.io.NumberOutput: int outputLeadingTriplet(int,char[],int)>(i8, $r0, i0);

        return i2;
    }

    public static java.lang.String toString(double)
    {
        double $d0;
        java.lang.String $r0;

        $d0 := @parameter0: double;

        $r0 = staticinvoke <java.lang.Double: java.lang.String toString(double)>($d0);

        return $r0;
    }

    public static java.lang.String toString(int)
    {
        int $i0, i1, $i2;
        java.lang.String $r0;
        java.lang.String[] $r1;

        $i0 := @parameter0: int;

        $r1 = <org.codehaus.jackson.io.NumberOutput: java.lang.String[] sSmallIntStrs>;

        i1 = lengthof $r1;

        if $i0 >= i1 goto label2;

        if $i0 < 0 goto label1;

        $r1 = <org.codehaus.jackson.io.NumberOutput: java.lang.String[] sSmallIntStrs>;

        $r0 = $r1[$i0];

        return $r0;

     label1:
        i1 = neg $i0;

        i1 = i1 - 1;

        $r1 = <org.codehaus.jackson.io.NumberOutput: java.lang.String[] sSmallIntStrs2>;

        $i2 = lengthof $r1;

        if i1 >= $i2 goto label2;

        $r1 = <org.codehaus.jackson.io.NumberOutput: java.lang.String[] sSmallIntStrs2>;

        $r0 = $r1[i1];

        return $r0;

     label2:
        $r0 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i0);

        return $r0;
    }

    public static java.lang.String toString(long)
    {
        long $l0;
        byte $b1;
        int $i2;
        java.lang.String $r0;

        $l0 := @parameter0: long;

        $b1 = $l0 cmp 2147483647L;

        if $b1 > 0 goto label1;

        $b1 = $l0 cmp -2147483648L;

        if $b1 < 0 goto label1;

        $i2 = (int) $l0;

        $r0 = staticinvoke <org.codehaus.jackson.io.NumberOutput: java.lang.String toString(int)>($i2);

        return $r0;

     label1:
        $r0 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l0);

        return $r0;
    }
}
