public final class org.codehaus.jackson.util.TextBuffer extends java.lang.Object
{
    static final int MAX_SEGMENT_LEN;
    static final int MIN_SEGMENT_LEN;
    static final char[] NO_CHARS;
    private final org.codehaus.jackson.util.BufferRecycler _allocator;
    private char[] _currentSegment;
    private int _currentSize;
    private boolean _hasSegments;
    private char[] _inputBuffer;
    private int _inputLen;
    private int _inputStart;
    private char[] _resultArray;
    private java.lang.String _resultString;
    private int _segmentSize;
    private java.util.ArrayList _segments;

    static void <clinit>()
    {
        char[] $r0;

        <org.codehaus.jackson.util.TextBuffer: int MIN_SEGMENT_LEN> = 1000;

        <org.codehaus.jackson.util.TextBuffer: int MAX_SEGMENT_LEN> = 262144;

        $r0 = newarray (char)[0];

        <org.codehaus.jackson.util.TextBuffer: char[] NO_CHARS> = $r0;

        return;
    }

    public void <init>(org.codehaus.jackson.util.BufferRecycler)
    {
        org.codehaus.jackson.util.TextBuffer r0;
        org.codehaus.jackson.util.BufferRecycler $r1;

        r0 := @this: org.codehaus.jackson.util.TextBuffer;

        $r1 := @parameter0: org.codehaus.jackson.util.BufferRecycler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.codehaus.jackson.util.TextBuffer: boolean _hasSegments> = 0;

        r0.<org.codehaus.jackson.util.TextBuffer: org.codehaus.jackson.util.BufferRecycler _allocator> = $r1;

        return;
    }

    private final char[] _charArray(int)
    {
        org.codehaus.jackson.util.TextBuffer r0;
        int $i0;
        char[] $r1;

        r0 := @this: org.codehaus.jackson.util.TextBuffer;

        $i0 := @parameter0: int;

        $r1 = newarray (char)[$i0];

        return $r1;
    }

    private char[] buildResultArray()
    {
        org.codehaus.jackson.util.TextBuffer r0;
        int i0, $i1, i2, $i3;
        java.lang.String $r1;
        char[] $r2, $r3, $r4;
        java.util.ArrayList $r5;
        java.lang.Object $r6;

        r0 := @this: org.codehaus.jackson.util.TextBuffer;

        $r1 = r0.<org.codehaus.jackson.util.TextBuffer: java.lang.String _resultString>;

        if $r1 == null goto label1;

        $r1 = r0.<org.codehaus.jackson.util.TextBuffer: java.lang.String _resultString>;

        $r2 = virtualinvoke $r1.<java.lang.String: char[] toCharArray()>();

        return $r2;

     label1:
        $i1 = r0.<org.codehaus.jackson.util.TextBuffer: int _inputStart>;

        if $i1 < 0 goto label4;

        $i1 = r0.<org.codehaus.jackson.util.TextBuffer: int _inputLen>;

        if $i1 >= 1 goto label2;

        $r2 = <org.codehaus.jackson.util.TextBuffer: char[] NO_CHARS>;

        return $r2;

     label2:
        $i1 = r0.<org.codehaus.jackson.util.TextBuffer: int _inputLen>;

        $r3 = specialinvoke r0.<org.codehaus.jackson.util.TextBuffer: char[] _charArray(int)>($i1);

        $r2 = $r3;

        $r4 = r0.<org.codehaus.jackson.util.TextBuffer: char[] _inputBuffer>;

        i0 = r0.<org.codehaus.jackson.util.TextBuffer: int _inputStart>;

        $i1 = r0.<org.codehaus.jackson.util.TextBuffer: int _inputLen>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, i0, $r3, 0, $i1);

     label3:
        return $r2;

     label4:
        i0 = virtualinvoke r0.<org.codehaus.jackson.util.TextBuffer: int size()>();

        if i0 >= 1 goto label5;

        $r2 = <org.codehaus.jackson.util.TextBuffer: char[] NO_CHARS>;

        return $r2;

     label5:
        $i1 = 0;

        $r3 = specialinvoke r0.<org.codehaus.jackson.util.TextBuffer: char[] _charArray(int)>(i0);

        $r2 = $r3;

        $r5 = r0.<org.codehaus.jackson.util.TextBuffer: java.util.ArrayList _segments>;

        if $r5 == null goto label7;

        i2 = 0;

        $r5 = r0.<org.codehaus.jackson.util.TextBuffer: java.util.ArrayList _segments>;

        $i3 = virtualinvoke $r5.<java.util.ArrayList: int size()>();

     label6:
        if i2 >= $i3 goto label7;

        $r5 = r0.<org.codehaus.jackson.util.TextBuffer: java.util.ArrayList _segments>;

        $r6 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        $r4 = (char[]) $r6;

        i0 = lengthof $r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, $r3, $i1, i0);

        $i1 = $i1 + i0;

        i2 = i2 + 1;

        goto label6;

     label7:
        $r4 = r0.<org.codehaus.jackson.util.TextBuffer: char[] _currentSegment>;

        i0 = r0.<org.codehaus.jackson.util.TextBuffer: int _currentSize>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, $r3, $i1, i0);

        goto label3;
    }

    private final void clearSegments()
    {
        org.codehaus.jackson.util.TextBuffer r0;
        java.util.ArrayList $r1;

        r0 := @this: org.codehaus.jackson.util.TextBuffer;

        r0.<org.codehaus.jackson.util.TextBuffer: boolean _hasSegments> = 0;

        $r1 = r0.<org.codehaus.jackson.util.TextBuffer: java.util.ArrayList _segments>;

        virtualinvoke $r1.<java.util.ArrayList: void clear()>();

        r0.<org.codehaus.jackson.util.TextBuffer: int _segmentSize> = 0;

        r0.<org.codehaus.jackson.util.TextBuffer: int _currentSize> = 0;

        return;
    }

    private void expand(int)
    {
        org.codehaus.jackson.util.TextBuffer r0;
        int $i0, i1, $i2;
        java.util.ArrayList $r1;
        char[] r2;

        r0 := @this: org.codehaus.jackson.util.TextBuffer;

        $i0 := @parameter0: int;

        $r1 = r0.<org.codehaus.jackson.util.TextBuffer: java.util.ArrayList _segments>;

        if $r1 != null goto label1;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.codehaus.jackson.util.TextBuffer: java.util.ArrayList _segments> = $r1;

     label1:
        r2 = r0.<org.codehaus.jackson.util.TextBuffer: char[] _currentSegment>;

        r0.<org.codehaus.jackson.util.TextBuffer: boolean _hasSegments> = 1;

        $r1 = r0.<org.codehaus.jackson.util.TextBuffer: java.util.ArrayList _segments>;

        virtualinvoke $r1.<java.util.ArrayList: boolean add(java.lang.Object)>(r2);

        i1 = r0.<org.codehaus.jackson.util.TextBuffer: int _segmentSize>;

        $i2 = lengthof r2;

        i1 = i1 + $i2;

        r0.<org.codehaus.jackson.util.TextBuffer: int _segmentSize> = i1;

        i1 = lengthof r2;

        $i2 = i1 >> 1;

        if $i2 >= $i0 goto label2;

        $i2 = $i0;

     label2:
        $i0 = i1 + $i2;

        $i0 = staticinvoke <java.lang.Math: int min(int,int)>(262144, $i0);

        r2 = specialinvoke r0.<org.codehaus.jackson.util.TextBuffer: char[] _charArray(int)>($i0);

        r0.<org.codehaus.jackson.util.TextBuffer: int _currentSize> = 0;

        r0.<org.codehaus.jackson.util.TextBuffer: char[] _currentSegment> = r2;

        return;
    }

    private final char[] findBuffer(int)
    {
        org.codehaus.jackson.util.TextBuffer r0;
        int $i0;
        org.codehaus.jackson.util.BufferRecycler$CharBufferType $r1;
        org.codehaus.jackson.util.BufferRecycler $r2;
        char[] $r3;

        r0 := @this: org.codehaus.jackson.util.TextBuffer;

        $i0 := @parameter0: int;

        $r2 = r0.<org.codehaus.jackson.util.TextBuffer: org.codehaus.jackson.util.BufferRecycler _allocator>;

        if $r2 == null goto label1;

        $r2 = r0.<org.codehaus.jackson.util.TextBuffer: org.codehaus.jackson.util.BufferRecycler _allocator>;

        $r1 = <org.codehaus.jackson.util.BufferRecycler$CharBufferType: org.codehaus.jackson.util.BufferRecycler$CharBufferType TEXT_BUFFER>;

        $r3 = virtualinvoke $r2.<org.codehaus.jackson.util.BufferRecycler: char[] allocCharBuffer(org.codehaus.jackson.util.BufferRecycler$CharBufferType,int)>($r1, $i0);

        return $r3;

     label1:
        $i0 = staticinvoke <java.lang.Math: int max(int,int)>($i0, 1000);

        $r3 = newarray (char)[$i0];

        return $r3;
    }

    private void unshare(int)
    {
        org.codehaus.jackson.util.TextBuffer r0;
        int $i0, i1, i2, $i3;
        char[] r1, $r2;

        r0 := @this: org.codehaus.jackson.util.TextBuffer;

        $i0 := @parameter0: int;

        i1 = r0.<org.codehaus.jackson.util.TextBuffer: int _inputLen>;

        r0.<org.codehaus.jackson.util.TextBuffer: int _inputLen> = 0;

        r1 = r0.<org.codehaus.jackson.util.TextBuffer: char[] _inputBuffer>;

        r0.<org.codehaus.jackson.util.TextBuffer: char[] _inputBuffer> = null;

        i2 = r0.<org.codehaus.jackson.util.TextBuffer: int _inputStart>;

        r0.<org.codehaus.jackson.util.TextBuffer: int _inputStart> = -1;

        $i0 = i1 + $i0;

        $r2 = r0.<org.codehaus.jackson.util.TextBuffer: char[] _currentSegment>;

        if $r2 == null goto label1;

        $r2 = r0.<org.codehaus.jackson.util.TextBuffer: char[] _currentSegment>;

        $i3 = lengthof $r2;

        if $i0 <= $i3 goto label2;

     label1:
        $r2 = specialinvoke r0.<org.codehaus.jackson.util.TextBuffer: char[] findBuffer(int)>($i0);

        r0.<org.codehaus.jackson.util.TextBuffer: char[] _currentSegment> = $r2;

     label2:
        if i1 <= 0 goto label3;

        $r2 = r0.<org.codehaus.jackson.util.TextBuffer: char[] _currentSegment>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i2, $r2, 0, i1);

     label3:
        r0.<org.codehaus.jackson.util.TextBuffer: int _segmentSize> = 0;

        r0.<org.codehaus.jackson.util.TextBuffer: int _currentSize> = i1;

        return;
    }

    public void append(char)
    {
        org.codehaus.jackson.util.TextBuffer r0;
        char $c0;
        int $i1, $i2;
        char[] r1;

        r0 := @this: org.codehaus.jackson.util.TextBuffer;

        $c0 := @parameter0: char;

        $i1 = r0.<org.codehaus.jackson.util.TextBuffer: int _inputStart>;

        if $i1 < 0 goto label1;

        specialinvoke r0.<org.codehaus.jackson.util.TextBuffer: void unshare(int)>(16);

     label1:
        r0.<org.codehaus.jackson.util.TextBuffer: java.lang.String _resultString> = null;

        r0.<org.codehaus.jackson.util.TextBuffer: char[] _resultArray> = null;

        r1 = r0.<org.codehaus.jackson.util.TextBuffer: char[] _currentSegment>;

        $i1 = r0.<org.codehaus.jackson.util.TextBuffer: int _currentSize>;

        $i2 = lengthof r1;

        if $i1 < $i2 goto label2;

        specialinvoke r0.<org.codehaus.jackson.util.TextBuffer: void expand(int)>(1);

        r1 = r0.<org.codehaus.jackson.util.TextBuffer: char[] _currentSegment>;

     label2:
        $i1 = r0.<org.codehaus.jackson.util.TextBuffer: int _currentSize>;

        $i2 = $i1 + 1;

        r0.<org.codehaus.jackson.util.TextBuffer: int _currentSize> = $i2;

        r1[$i1] = $c0;

        return;
    }

    public void append(java.lang.String, int, int)
    {
        org.codehaus.jackson.util.TextBuffer r0;
        java.lang.String $r1;
        char[] r2;
        int i0, $i1, $i2, $i3, $i4;

        r0 := @this: org.codehaus.jackson.util.TextBuffer;

        $r1 := @parameter0: java.lang.String;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        i0 = r0.<org.codehaus.jackson.util.TextBuffer: int _inputStart>;

        if i0 < 0 goto label1;

        specialinvoke r0.<org.codehaus.jackson.util.TextBuffer: void unshare(int)>($i2);

     label1:
        r0.<org.codehaus.jackson.util.TextBuffer: java.lang.String _resultString> = null;

        r0.<org.codehaus.jackson.util.TextBuffer: char[] _resultArray> = null;

        r2 = r0.<org.codehaus.jackson.util.TextBuffer: char[] _currentSegment>;

        i0 = lengthof r2;

        $i3 = r0.<org.codehaus.jackson.util.TextBuffer: int _currentSize>;

        i0 = i0 - $i3;

        if i0 < $i2 goto label2;

        i0 = $i1 + $i2;

        $i3 = r0.<org.codehaus.jackson.util.TextBuffer: int _currentSize>;

        virtualinvoke $r1.<java.lang.String: void getChars(int,int,char[],int)>($i1, i0, r2, $i3);

        $i1 = r0.<org.codehaus.jackson.util.TextBuffer: int _currentSize>;

        $i1 = $i1 + $i2;

        r0.<org.codehaus.jackson.util.TextBuffer: int _currentSize> = $i1;

        return;

     label2:
        if i0 <= 0 goto label3;

        $i3 = $i1 + i0;

        $i4 = r0.<org.codehaus.jackson.util.TextBuffer: int _currentSize>;

        virtualinvoke $r1.<java.lang.String: void getChars(int,int,char[],int)>($i1, $i3, r2, $i4);

        $i2 = $i2 - i0;

        $i1 = $i1 + i0;

     label3:
        specialinvoke r0.<org.codehaus.jackson.util.TextBuffer: void expand(int)>($i2);

        i0 = $i1 + $i2;

        r2 = r0.<org.codehaus.jackson.util.TextBuffer: char[] _currentSegment>;

        virtualinvoke $r1.<java.lang.String: void getChars(int,int,char[],int)>($i1, i0, r2, 0);

        r0.<org.codehaus.jackson.util.TextBuffer: int _currentSize> = $i2;

        return;
    }

    public void append(char[], int, int)
    {
        org.codehaus.jackson.util.TextBuffer r0;
        char[] $r1, r2;
        int i0, $i1, $i2, $i3;

        r0 := @this: org.codehaus.jackson.util.TextBuffer;

        $r1 := @parameter0: char[];

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        i0 = r0.<org.codehaus.jackson.util.TextBuffer: int _inputStart>;

        if i0 < 0 goto label1;

        specialinvoke r0.<org.codehaus.jackson.util.TextBuffer: void unshare(int)>($i2);

     label1:
        r0.<org.codehaus.jackson.util.TextBuffer: java.lang.String _resultString> = null;

        r0.<org.codehaus.jackson.util.TextBuffer: char[] _resultArray> = null;

        r2 = r0.<org.codehaus.jackson.util.TextBuffer: char[] _currentSegment>;

        i0 = lengthof r2;

        $i3 = r0.<org.codehaus.jackson.util.TextBuffer: int _currentSize>;

        i0 = i0 - $i3;

        if i0 < $i2 goto label2;

        i0 = r0.<org.codehaus.jackson.util.TextBuffer: int _currentSize>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, $i1, r2, i0, $i2);

        $i1 = r0.<org.codehaus.jackson.util.TextBuffer: int _currentSize>;

        $i1 = $i1 + $i2;

        r0.<org.codehaus.jackson.util.TextBuffer: int _currentSize> = $i1;

        return;

     label2:
        if i0 <= 0 goto label3;

        $i3 = r0.<org.codehaus.jackson.util.TextBuffer: int _currentSize>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, $i1, r2, $i3, i0);

        $i1 = $i1 + i0;

        $i2 = $i2 - i0;

     label3:
        specialinvoke r0.<org.codehaus.jackson.util.TextBuffer: void expand(int)>($i2);

        r2 = r0.<org.codehaus.jackson.util.TextBuffer: char[] _currentSegment>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, $i1, r2, 0, $i2);

        r0.<org.codehaus.jackson.util.TextBuffer: int _currentSize> = $i2;

        return;
    }

    public char[] contentsAsArray()
    {
        org.codehaus.jackson.util.TextBuffer r0;
        char[] $r1;

        r0 := @this: org.codehaus.jackson.util.TextBuffer;

        $r1 = r0.<org.codehaus.jackson.util.TextBuffer: char[] _resultArray>;

        if $r1 != null goto label1;

        $r1 = specialinvoke r0.<org.codehaus.jackson.util.TextBuffer: char[] buildResultArray()>();

        r0.<org.codehaus.jackson.util.TextBuffer: char[] _resultArray> = $r1;

     label1:
        return $r1;
    }

    public java.math.BigDecimal contentsAsDecimal() throws java.lang.NumberFormatException
    {
        org.codehaus.jackson.util.TextBuffer r0;
        char[] $r1;
        java.math.BigDecimal $r2;
        int $i0, $i1;

        r0 := @this: org.codehaus.jackson.util.TextBuffer;

        $r1 = r0.<org.codehaus.jackson.util.TextBuffer: char[] _resultArray>;

        if $r1 == null goto label1;

        $r2 = new java.math.BigDecimal;

        $r1 = r0.<org.codehaus.jackson.util.TextBuffer: char[] _resultArray>;

        specialinvoke $r2.<java.math.BigDecimal: void <init>(char[])>($r1);

        return $r2;

     label1:
        $i0 = r0.<org.codehaus.jackson.util.TextBuffer: int _inputStart>;

        if $i0 < 0 goto label2;

        $r2 = new java.math.BigDecimal;

        $r1 = r0.<org.codehaus.jackson.util.TextBuffer: char[] _inputBuffer>;

        $i0 = r0.<org.codehaus.jackson.util.TextBuffer: int _inputStart>;

        $i1 = r0.<org.codehaus.jackson.util.TextBuffer: int _inputLen>;

        specialinvoke $r2.<java.math.BigDecimal: void <init>(char[],int,int)>($r1, $i0, $i1);

        return $r2;

     label2:
        $i0 = r0.<org.codehaus.jackson.util.TextBuffer: int _segmentSize>;

        if $i0 != 0 goto label3;

        $r2 = new java.math.BigDecimal;

        $r1 = r0.<org.codehaus.jackson.util.TextBuffer: char[] _currentSegment>;

        $i0 = r0.<org.codehaus.jackson.util.TextBuffer: int _currentSize>;

        specialinvoke $r2.<java.math.BigDecimal: void <init>(char[],int,int)>($r1, 0, $i0);

        return $r2;

     label3:
        $r2 = new java.math.BigDecimal;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.util.TextBuffer: char[] contentsAsArray()>();

        specialinvoke $r2.<java.math.BigDecimal: void <init>(char[])>($r1);

        return $r2;
    }

    public double contentsAsDouble() throws java.lang.NumberFormatException
    {
        org.codehaus.jackson.util.TextBuffer r0;
        java.lang.String $r1;
        double $d0;

        r0 := @this: org.codehaus.jackson.util.TextBuffer;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.util.TextBuffer: java.lang.String contentsAsString()>();

        $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r1);

        return $d0;
    }

    public java.lang.String contentsAsString()
    {
        org.codehaus.jackson.util.TextBuffer r0;
        int i0, i1, $i2;
        java.lang.StringBuilder r1;
        java.lang.String $r2;
        char[] $r3;
        java.util.ArrayList $r4;
        java.lang.Object $r5;

        r0 := @this: org.codehaus.jackson.util.TextBuffer;

        $r2 = r0.<org.codehaus.jackson.util.TextBuffer: java.lang.String _resultString>;

        if $r2 != null goto label1;

        $r3 = r0.<org.codehaus.jackson.util.TextBuffer: char[] _resultArray>;

        if $r3 == null goto label2;

        $r2 = new java.lang.String;

        $r3 = r0.<org.codehaus.jackson.util.TextBuffer: char[] _resultArray>;

        specialinvoke $r2.<java.lang.String: void <init>(char[])>($r3);

        r0.<org.codehaus.jackson.util.TextBuffer: java.lang.String _resultString> = $r2;

     label1:
        $r2 = r0.<org.codehaus.jackson.util.TextBuffer: java.lang.String _resultString>;

        return $r2;

     label2:
        i0 = r0.<org.codehaus.jackson.util.TextBuffer: int _inputStart>;

        if i0 < 0 goto label4;

        i0 = r0.<org.codehaus.jackson.util.TextBuffer: int _inputLen>;

        if i0 >= 1 goto label3;

        r0.<org.codehaus.jackson.util.TextBuffer: java.lang.String _resultString> = "";

        return "";

     label3:
        $r2 = new java.lang.String;

        $r3 = r0.<org.codehaus.jackson.util.TextBuffer: char[] _inputBuffer>;

        i0 = r0.<org.codehaus.jackson.util.TextBuffer: int _inputStart>;

        i1 = r0.<org.codehaus.jackson.util.TextBuffer: int _inputLen>;

        specialinvoke $r2.<java.lang.String: void <init>(char[],int,int)>($r3, i0, i1);

        r0.<org.codehaus.jackson.util.TextBuffer: java.lang.String _resultString> = $r2;

        goto label1;

     label4:
        i1 = r0.<org.codehaus.jackson.util.TextBuffer: int _segmentSize>;

        i0 = r0.<org.codehaus.jackson.util.TextBuffer: int _currentSize>;

        if i1 != 0 goto label7;

        if i0 != 0 goto label6;

        $r2 = "";

     label5:
        r0.<org.codehaus.jackson.util.TextBuffer: java.lang.String _resultString> = $r2;

        goto label1;

     label6:
        $r2 = new java.lang.String;

        $r3 = r0.<org.codehaus.jackson.util.TextBuffer: char[] _currentSegment>;

        specialinvoke $r2.<java.lang.String: void <init>(char[],int,int)>($r3, 0, i0);

        goto label5;

     label7:
        r1 = new java.lang.StringBuilder;

        i0 = i1 + i0;

        specialinvoke r1.<java.lang.StringBuilder: void <init>(int)>(i0);

        $r4 = r0.<org.codehaus.jackson.util.TextBuffer: java.util.ArrayList _segments>;

        if $r4 == null goto label9;

        i0 = 0;

        $r4 = r0.<org.codehaus.jackson.util.TextBuffer: java.util.ArrayList _segments>;

        i1 = virtualinvoke $r4.<java.util.ArrayList: int size()>();

     label8:
        if i0 >= i1 goto label9;

        $r4 = r0.<org.codehaus.jackson.util.TextBuffer: java.util.ArrayList _segments>;

        $r5 = virtualinvoke $r4.<java.util.ArrayList: java.lang.Object get(int)>(i0);

        $r3 = (char[]) $r5;

        $i2 = lengthof $r3;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>($r3, 0, $i2);

        i0 = i0 + 1;

        goto label8;

     label9:
        $r3 = r0.<org.codehaus.jackson.util.TextBuffer: char[] _currentSegment>;

        i0 = r0.<org.codehaus.jackson.util.TextBuffer: int _currentSize>;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>($r3, 0, i0);

        $r2 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<org.codehaus.jackson.util.TextBuffer: java.lang.String _resultString> = $r2;

        goto label1;
    }

    public final char[] emptyAndGetCurrentSegment()
    {
        org.codehaus.jackson.util.TextBuffer r0;
        char[] $r1;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.util.TextBuffer;

        r0.<org.codehaus.jackson.util.TextBuffer: int _inputStart> = -1;

        r0.<org.codehaus.jackson.util.TextBuffer: int _currentSize> = 0;

        r0.<org.codehaus.jackson.util.TextBuffer: int _inputLen> = 0;

        r0.<org.codehaus.jackson.util.TextBuffer: char[] _inputBuffer> = null;

        r0.<org.codehaus.jackson.util.TextBuffer: java.lang.String _resultString> = null;

        r0.<org.codehaus.jackson.util.TextBuffer: char[] _resultArray> = null;

        $z0 = r0.<org.codehaus.jackson.util.TextBuffer: boolean _hasSegments>;

        if $z0 == 0 goto label1;

        specialinvoke r0.<org.codehaus.jackson.util.TextBuffer: void clearSegments()>();

     label1:
        $r1 = r0.<org.codehaus.jackson.util.TextBuffer: char[] _currentSegment>;

        if $r1 != null goto label2;

        $r1 = specialinvoke r0.<org.codehaus.jackson.util.TextBuffer: char[] findBuffer(int)>(0);

        r0.<org.codehaus.jackson.util.TextBuffer: char[] _currentSegment> = $r1;

     label2:
        return $r1;
    }

    public void ensureNotShared()
    {
        org.codehaus.jackson.util.TextBuffer r0;
        int $i0;

        r0 := @this: org.codehaus.jackson.util.TextBuffer;

        $i0 = r0.<org.codehaus.jackson.util.TextBuffer: int _inputStart>;

        if $i0 < 0 goto label1;

        specialinvoke r0.<org.codehaus.jackson.util.TextBuffer: void unshare(int)>(16);

     label1:
        return;
    }

    public char[] expandCurrentSegment()
    {
        org.codehaus.jackson.util.TextBuffer r0;
        char[] r1, $r2;
        int i0, i1;

        r0 := @this: org.codehaus.jackson.util.TextBuffer;

        r1 = r0.<org.codehaus.jackson.util.TextBuffer: char[] _currentSegment>;

        i0 = lengthof r1;

        if i0 != 262144 goto label2;

        i1 = 262145;

     label1:
        $r2 = specialinvoke r0.<org.codehaus.jackson.util.TextBuffer: char[] _charArray(int)>(i1);

        r0.<org.codehaus.jackson.util.TextBuffer: char[] _currentSegment> = $r2;

        $r2 = r0.<org.codehaus.jackson.util.TextBuffer: char[] _currentSegment>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, $r2, 0, i0);

        r1 = r0.<org.codehaus.jackson.util.TextBuffer: char[] _currentSegment>;

        return r1;

     label2:
        i1 = i0 >> 1;

        i1 = i1 + i0;

        i1 = staticinvoke <java.lang.Math: int min(int,int)>(262144, i1);

        goto label1;
    }

    public char[] finishCurrentSegment()
    {
        org.codehaus.jackson.util.TextBuffer r0;
        int i0, $i1;
        java.util.ArrayList $r1;
        char[] $r2;

        r0 := @this: org.codehaus.jackson.util.TextBuffer;

        $r1 = r0.<org.codehaus.jackson.util.TextBuffer: java.util.ArrayList _segments>;

        if $r1 != null goto label1;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.codehaus.jackson.util.TextBuffer: java.util.ArrayList _segments> = $r1;

     label1:
        r0.<org.codehaus.jackson.util.TextBuffer: boolean _hasSegments> = 1;

        $r1 = r0.<org.codehaus.jackson.util.TextBuffer: java.util.ArrayList _segments>;

        $r2 = r0.<org.codehaus.jackson.util.TextBuffer: char[] _currentSegment>;

        virtualinvoke $r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r2);

        $r2 = r0.<org.codehaus.jackson.util.TextBuffer: char[] _currentSegment>;

        i0 = lengthof $r2;

        $i1 = r0.<org.codehaus.jackson.util.TextBuffer: int _segmentSize>;

        $i1 = $i1 + i0;

        r0.<org.codehaus.jackson.util.TextBuffer: int _segmentSize> = $i1;

        $i1 = i0 >> 1;

        i0 = $i1 + i0;

        i0 = staticinvoke <java.lang.Math: int min(int,int)>(i0, 262144);

        $r2 = specialinvoke r0.<org.codehaus.jackson.util.TextBuffer: char[] _charArray(int)>(i0);

        r0.<org.codehaus.jackson.util.TextBuffer: int _currentSize> = 0;

        r0.<org.codehaus.jackson.util.TextBuffer: char[] _currentSegment> = $r2;

        return $r2;
    }

    public char[] getCurrentSegment()
    {
        org.codehaus.jackson.util.TextBuffer r0;
        char[] r1;
        int $i0, $i1;

        r0 := @this: org.codehaus.jackson.util.TextBuffer;

        $i0 = r0.<org.codehaus.jackson.util.TextBuffer: int _inputStart>;

        if $i0 < 0 goto label2;

        specialinvoke r0.<org.codehaus.jackson.util.TextBuffer: void unshare(int)>(1);

     label1:
        r1 = r0.<org.codehaus.jackson.util.TextBuffer: char[] _currentSegment>;

        return r1;

     label2:
        r1 = r0.<org.codehaus.jackson.util.TextBuffer: char[] _currentSegment>;

        if r1 != null goto label3;

        r1 = specialinvoke r0.<org.codehaus.jackson.util.TextBuffer: char[] findBuffer(int)>(0);

        r0.<org.codehaus.jackson.util.TextBuffer: char[] _currentSegment> = r1;

        goto label1;

     label3:
        $i1 = r0.<org.codehaus.jackson.util.TextBuffer: int _currentSize>;

        $i0 = lengthof r1;

        if $i1 < $i0 goto label1;

        specialinvoke r0.<org.codehaus.jackson.util.TextBuffer: void expand(int)>(1);

        goto label1;
    }

    public int getCurrentSegmentSize()
    {
        org.codehaus.jackson.util.TextBuffer r0;
        int i0;

        r0 := @this: org.codehaus.jackson.util.TextBuffer;

        i0 = r0.<org.codehaus.jackson.util.TextBuffer: int _currentSize>;

        return i0;
    }

    public char[] getTextBuffer()
    {
        org.codehaus.jackson.util.TextBuffer r0;
        char[] $r1;
        int $i0;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.util.TextBuffer;

        $i0 = r0.<org.codehaus.jackson.util.TextBuffer: int _inputStart>;

        if $i0 < 0 goto label1;

        $r1 = r0.<org.codehaus.jackson.util.TextBuffer: char[] _inputBuffer>;

        return $r1;

     label1:
        $z0 = r0.<org.codehaus.jackson.util.TextBuffer: boolean _hasSegments>;

        if $z0 != 0 goto label2;

        $r1 = r0.<org.codehaus.jackson.util.TextBuffer: char[] _currentSegment>;

        return $r1;

     label2:
        $r1 = virtualinvoke r0.<org.codehaus.jackson.util.TextBuffer: char[] contentsAsArray()>();

        return $r1;
    }

    public int getTextOffset()
    {
        org.codehaus.jackson.util.TextBuffer r0;
        int $i0;

        r0 := @this: org.codehaus.jackson.util.TextBuffer;

        $i0 = r0.<org.codehaus.jackson.util.TextBuffer: int _inputStart>;

        if $i0 < 0 goto label1;

        $i0 = r0.<org.codehaus.jackson.util.TextBuffer: int _inputStart>;

        return $i0;

     label1:
        return 0;
    }

    public void releaseBuffers()
    {
        org.codehaus.jackson.util.TextBuffer r0;
        char[] r1;
        org.codehaus.jackson.util.BufferRecycler$CharBufferType $r2;
        org.codehaus.jackson.util.BufferRecycler $r3;

        r0 := @this: org.codehaus.jackson.util.TextBuffer;

        $r3 = r0.<org.codehaus.jackson.util.TextBuffer: org.codehaus.jackson.util.BufferRecycler _allocator>;

        if $r3 != null goto label1;

        virtualinvoke r0.<org.codehaus.jackson.util.TextBuffer: void resetWithEmpty()>();

        return;

     label1:
        r1 = r0.<org.codehaus.jackson.util.TextBuffer: char[] _currentSegment>;

        if r1 == null goto label2;

        virtualinvoke r0.<org.codehaus.jackson.util.TextBuffer: void resetWithEmpty()>();

        r1 = r0.<org.codehaus.jackson.util.TextBuffer: char[] _currentSegment>;

        r0.<org.codehaus.jackson.util.TextBuffer: char[] _currentSegment> = null;

        $r3 = r0.<org.codehaus.jackson.util.TextBuffer: org.codehaus.jackson.util.BufferRecycler _allocator>;

        $r2 = <org.codehaus.jackson.util.BufferRecycler$CharBufferType: org.codehaus.jackson.util.BufferRecycler$CharBufferType TEXT_BUFFER>;

        virtualinvoke $r3.<org.codehaus.jackson.util.BufferRecycler: void releaseCharBuffer(org.codehaus.jackson.util.BufferRecycler$CharBufferType,char[])>($r2, r1);

     label2:
        return;
    }

    public void resetWithCopy(char[], int, int)
    {
        org.codehaus.jackson.util.TextBuffer r0;
        char[] $r1, $r2;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.util.TextBuffer;

        $r1 := @parameter0: char[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        r0.<org.codehaus.jackson.util.TextBuffer: char[] _inputBuffer> = null;

        r0.<org.codehaus.jackson.util.TextBuffer: int _inputStart> = -1;

        r0.<org.codehaus.jackson.util.TextBuffer: int _inputLen> = 0;

        r0.<org.codehaus.jackson.util.TextBuffer: java.lang.String _resultString> = null;

        r0.<org.codehaus.jackson.util.TextBuffer: char[] _resultArray> = null;

        $z0 = r0.<org.codehaus.jackson.util.TextBuffer: boolean _hasSegments>;

        if $z0 == 0 goto label2;

        specialinvoke r0.<org.codehaus.jackson.util.TextBuffer: void clearSegments()>();

     label1:
        r0.<org.codehaus.jackson.util.TextBuffer: int _segmentSize> = 0;

        r0.<org.codehaus.jackson.util.TextBuffer: int _currentSize> = 0;

        virtualinvoke r0.<org.codehaus.jackson.util.TextBuffer: void append(char[],int,int)>($r1, $i0, $i1);

        return;

     label2:
        $r2 = r0.<org.codehaus.jackson.util.TextBuffer: char[] _currentSegment>;

        if $r2 != null goto label1;

        $r2 = specialinvoke r0.<org.codehaus.jackson.util.TextBuffer: char[] findBuffer(int)>($i1);

        r0.<org.codehaus.jackson.util.TextBuffer: char[] _currentSegment> = $r2;

        goto label1;
    }

    public void resetWithEmpty()
    {
        org.codehaus.jackson.util.TextBuffer r0;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.util.TextBuffer;

        r0.<org.codehaus.jackson.util.TextBuffer: int _inputStart> = -1;

        r0.<org.codehaus.jackson.util.TextBuffer: int _currentSize> = 0;

        r0.<org.codehaus.jackson.util.TextBuffer: int _inputLen> = 0;

        r0.<org.codehaus.jackson.util.TextBuffer: char[] _inputBuffer> = null;

        r0.<org.codehaus.jackson.util.TextBuffer: java.lang.String _resultString> = null;

        r0.<org.codehaus.jackson.util.TextBuffer: char[] _resultArray> = null;

        $z0 = r0.<org.codehaus.jackson.util.TextBuffer: boolean _hasSegments>;

        if $z0 == 0 goto label1;

        specialinvoke r0.<org.codehaus.jackson.util.TextBuffer: void clearSegments()>();

     label1:
        return;
    }

    public void resetWithShared(char[], int, int)
    {
        org.codehaus.jackson.util.TextBuffer r0;
        char[] $r1;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.util.TextBuffer;

        $r1 := @parameter0: char[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        r0.<org.codehaus.jackson.util.TextBuffer: java.lang.String _resultString> = null;

        r0.<org.codehaus.jackson.util.TextBuffer: char[] _resultArray> = null;

        r0.<org.codehaus.jackson.util.TextBuffer: char[] _inputBuffer> = $r1;

        r0.<org.codehaus.jackson.util.TextBuffer: int _inputStart> = $i0;

        r0.<org.codehaus.jackson.util.TextBuffer: int _inputLen> = $i1;

        $z0 = r0.<org.codehaus.jackson.util.TextBuffer: boolean _hasSegments>;

        if $z0 == 0 goto label1;

        specialinvoke r0.<org.codehaus.jackson.util.TextBuffer: void clearSegments()>();

     label1:
        return;
    }

    public void resetWithString(java.lang.String)
    {
        org.codehaus.jackson.util.TextBuffer r0;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.util.TextBuffer;

        $r1 := @parameter0: java.lang.String;

        r0.<org.codehaus.jackson.util.TextBuffer: char[] _inputBuffer> = null;

        r0.<org.codehaus.jackson.util.TextBuffer: int _inputStart> = -1;

        r0.<org.codehaus.jackson.util.TextBuffer: int _inputLen> = 0;

        r0.<org.codehaus.jackson.util.TextBuffer: java.lang.String _resultString> = $r1;

        r0.<org.codehaus.jackson.util.TextBuffer: char[] _resultArray> = null;

        $z0 = r0.<org.codehaus.jackson.util.TextBuffer: boolean _hasSegments>;

        if $z0 == 0 goto label1;

        specialinvoke r0.<org.codehaus.jackson.util.TextBuffer: void clearSegments()>();

     label1:
        r0.<org.codehaus.jackson.util.TextBuffer: int _currentSize> = 0;

        return;
    }

    public void setCurrentLength(int)
    {
        org.codehaus.jackson.util.TextBuffer r0;
        int $i0;

        r0 := @this: org.codehaus.jackson.util.TextBuffer;

        $i0 := @parameter0: int;

        r0.<org.codehaus.jackson.util.TextBuffer: int _currentSize> = $i0;

        return;
    }

    public int size()
    {
        org.codehaus.jackson.util.TextBuffer r0;
        int $i0, $i1;

        r0 := @this: org.codehaus.jackson.util.TextBuffer;

        $i0 = r0.<org.codehaus.jackson.util.TextBuffer: int _inputStart>;

        if $i0 < 0 goto label1;

        $i0 = r0.<org.codehaus.jackson.util.TextBuffer: int _inputLen>;

        return $i0;

     label1:
        $i1 = r0.<org.codehaus.jackson.util.TextBuffer: int _segmentSize>;

        $i0 = r0.<org.codehaus.jackson.util.TextBuffer: int _currentSize>;

        $i0 = $i1 + $i0;

        return $i0;
    }

    public java.lang.String toString()
    {
        org.codehaus.jackson.util.TextBuffer r0;
        java.lang.String $r1;

        r0 := @this: org.codehaus.jackson.util.TextBuffer;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.util.TextBuffer: java.lang.String contentsAsString()>();

        return $r1;
    }
}
