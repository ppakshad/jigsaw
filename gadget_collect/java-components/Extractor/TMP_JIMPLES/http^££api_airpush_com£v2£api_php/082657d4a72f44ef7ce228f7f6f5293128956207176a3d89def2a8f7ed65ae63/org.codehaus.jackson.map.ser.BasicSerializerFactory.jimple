public abstract class org.codehaus.jackson.map.ser.BasicSerializerFactory extends org.codehaus.jackson.map.SerializerFactory
{
    static final org.codehaus.jackson.map.JsonSerializer MARKER_COLLECTION;
    static final org.codehaus.jackson.map.JsonSerializer MARKER_INDEXED_LIST;
    static final org.codehaus.jackson.map.JsonSerializer MARKER_OBJECT_ARRAY;
    static final org.codehaus.jackson.map.JsonSerializer MARKER_OBJECT_MAP;
    static final org.codehaus.jackson.map.JsonSerializer MARKER_STRING_ARRAY;
    protected static final java.util.HashMap _concrete;
    protected static final java.util.HashMap _concreteLazy;
    protected org.codehaus.jackson.map.ext.OptionalHandlerFactory optionalHandlers;

    static void <clinit>()
    {
        org.codehaus.jackson.map.ser.StdSerializers$IntegerSerializer r0;
        org.codehaus.jackson.map.ser.StdSerializers$NumberSerializer r1;
        org.codehaus.jackson.map.ser.ToStringSerializer r2;
        java.util.HashMap $r3;
        org.codehaus.jackson.map.ser.BasicSerializerFactory$SerializerMarker $r4;
        java.lang.Class $r5, $r32;
        java.lang.String $r6;
        org.codehaus.jackson.map.ser.StdSerializers$StringSerializer $r7;
        org.codehaus.jackson.map.ser.StdSerializers$BooleanSerializer $r8;
        org.codehaus.jackson.map.ser.StdSerializers$LongSerializer $r9;
        org.codehaus.jackson.map.ser.StdSerializers$IntLikeSerializer $r10;
        org.codehaus.jackson.map.ser.StdSerializers$FloatSerializer $r11;
        org.codehaus.jackson.map.ser.StdSerializers$DoubleSerializer $r12;
        org.codehaus.jackson.map.ser.StdSerializers$CalendarSerializer $r13;
        org.codehaus.jackson.map.ser.StdSerializers$UtilDateSerializer $r14;
        org.codehaus.jackson.map.ser.StdSerializers$SqlDateSerializer $r15;
        org.codehaus.jackson.map.ser.StdSerializers$SqlTimeSerializer $r16;
        org.codehaus.jackson.map.ser.ArraySerializers$BooleanArraySerializer $r17;
        org.codehaus.jackson.map.ser.ArraySerializers$ByteArraySerializer $r18;
        org.codehaus.jackson.map.ser.ArraySerializers$CharArraySerializer $r19;
        org.codehaus.jackson.map.ser.ArraySerializers$ShortArraySerializer $r20;
        org.codehaus.jackson.map.ser.ArraySerializers$IntArraySerializer $r21;
        org.codehaus.jackson.map.ser.ArraySerializers$LongArraySerializer $r22;
        org.codehaus.jackson.map.ser.ArraySerializers$FloatArraySerializer $r23;
        org.codehaus.jackson.map.ser.ArraySerializers$DoubleArraySerializer $r24;
        org.codehaus.jackson.map.JsonSerializer $r25;
        org.codehaus.jackson.map.ser.JdkSerializers $r26;
        java.util.Collection $r27;
        java.util.Iterator $r28;
        boolean $z0;
        java.lang.Object $r29, $r31;
        java.util.Map$Entry r30;
        java.lang.IllegalStateException $r33;
        java.lang.StringBuilder $r34;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete> = $r3;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concreteLazy> = $r3;

        $r4 = new org.codehaus.jackson.map.ser.BasicSerializerFactory$SerializerMarker;

        specialinvoke $r4.<org.codehaus.jackson.map.ser.BasicSerializerFactory$SerializerMarker: void <init>(org.codehaus.jackson.map.ser.BasicSerializerFactory$1)>(null);

        <org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.map.JsonSerializer MARKER_INDEXED_LIST> = $r4;

        $r4 = new org.codehaus.jackson.map.ser.BasicSerializerFactory$SerializerMarker;

        specialinvoke $r4.<org.codehaus.jackson.map.ser.BasicSerializerFactory$SerializerMarker: void <init>(org.codehaus.jackson.map.ser.BasicSerializerFactory$1)>(null);

        <org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.map.JsonSerializer MARKER_COLLECTION> = $r4;

        $r4 = new org.codehaus.jackson.map.ser.BasicSerializerFactory$SerializerMarker;

        specialinvoke $r4.<org.codehaus.jackson.map.ser.BasicSerializerFactory$SerializerMarker: void <init>(org.codehaus.jackson.map.ser.BasicSerializerFactory$1)>(null);

        <org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.map.JsonSerializer MARKER_OBJECT_ARRAY> = $r4;

        $r4 = new org.codehaus.jackson.map.ser.BasicSerializerFactory$SerializerMarker;

        specialinvoke $r4.<org.codehaus.jackson.map.ser.BasicSerializerFactory$SerializerMarker: void <init>(org.codehaus.jackson.map.ser.BasicSerializerFactory$1)>(null);

        <org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.map.JsonSerializer MARKER_STRING_ARRAY> = $r4;

        $r4 = new org.codehaus.jackson.map.ser.BasicSerializerFactory$SerializerMarker;

        specialinvoke $r4.<org.codehaus.jackson.map.ser.BasicSerializerFactory$SerializerMarker: void <init>(org.codehaus.jackson.map.ser.BasicSerializerFactory$1)>(null);

        <org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.map.JsonSerializer MARKER_OBJECT_MAP> = $r4;

        $r3 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r5 = class "Ljava/lang/String;";

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r7 = new org.codehaus.jackson.map.ser.StdSerializers$StringSerializer;

        specialinvoke $r7.<org.codehaus.jackson.map.ser.StdSerializers$StringSerializer: void <init>()>();

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r7);

        r2 = <org.codehaus.jackson.map.ser.ToStringSerializer: org.codehaus.jackson.map.ser.ToStringSerializer instance>;

        $r3 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r5 = class "Ljava/lang/StringBuffer;";

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, r2);

        $r3 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r5 = class "Ljava/lang/StringBuilder;";

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, r2);

        $r3 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r5 = class "Ljava/lang/Character;";

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, r2);

        $r3 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r5 = <java.lang.Character: java.lang.Class TYPE>;

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, r2);

        $r3 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r5 = <java.lang.Boolean: java.lang.Class TYPE>;

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r8 = new org.codehaus.jackson.map.ser.StdSerializers$BooleanSerializer;

        specialinvoke $r8.<org.codehaus.jackson.map.ser.StdSerializers$BooleanSerializer: void <init>(boolean)>(1);

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r8);

        $r3 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r5 = class "Ljava/lang/Boolean;";

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r8 = new org.codehaus.jackson.map.ser.StdSerializers$BooleanSerializer;

        specialinvoke $r8.<org.codehaus.jackson.map.ser.StdSerializers$BooleanSerializer: void <init>(boolean)>(0);

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r8);

        r0 = new org.codehaus.jackson.map.ser.StdSerializers$IntegerSerializer;

        specialinvoke r0.<org.codehaus.jackson.map.ser.StdSerializers$IntegerSerializer: void <init>()>();

        $r3 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r5 = class "Ljava/lang/Integer;";

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, r0);

        $r3 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r5 = <java.lang.Integer: java.lang.Class TYPE>;

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, r0);

        $r3 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r5 = class "Ljava/lang/Long;";

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r9 = <org.codehaus.jackson.map.ser.StdSerializers$LongSerializer: org.codehaus.jackson.map.ser.StdSerializers$LongSerializer instance>;

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r9);

        $r3 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r5 = <java.lang.Long: java.lang.Class TYPE>;

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r9 = <org.codehaus.jackson.map.ser.StdSerializers$LongSerializer: org.codehaus.jackson.map.ser.StdSerializers$LongSerializer instance>;

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r9);

        $r3 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r5 = class "Ljava/lang/Byte;";

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r10 = <org.codehaus.jackson.map.ser.StdSerializers$IntLikeSerializer: org.codehaus.jackson.map.ser.StdSerializers$IntLikeSerializer instance>;

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r10);

        $r3 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r5 = <java.lang.Byte: java.lang.Class TYPE>;

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r10 = <org.codehaus.jackson.map.ser.StdSerializers$IntLikeSerializer: org.codehaus.jackson.map.ser.StdSerializers$IntLikeSerializer instance>;

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r10);

        $r3 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r5 = class "Ljava/lang/Short;";

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r10 = <org.codehaus.jackson.map.ser.StdSerializers$IntLikeSerializer: org.codehaus.jackson.map.ser.StdSerializers$IntLikeSerializer instance>;

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r10);

        $r3 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r5 = <java.lang.Short: java.lang.Class TYPE>;

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r10 = <org.codehaus.jackson.map.ser.StdSerializers$IntLikeSerializer: org.codehaus.jackson.map.ser.StdSerializers$IntLikeSerializer instance>;

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r10);

        $r3 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r5 = class "Ljava/lang/Float;";

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r11 = <org.codehaus.jackson.map.ser.StdSerializers$FloatSerializer: org.codehaus.jackson.map.ser.StdSerializers$FloatSerializer instance>;

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r11);

        $r3 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r5 = <java.lang.Float: java.lang.Class TYPE>;

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r11 = <org.codehaus.jackson.map.ser.StdSerializers$FloatSerializer: org.codehaus.jackson.map.ser.StdSerializers$FloatSerializer instance>;

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r11);

        $r3 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r5 = class "Ljava/lang/Double;";

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r12 = <org.codehaus.jackson.map.ser.StdSerializers$DoubleSerializer: org.codehaus.jackson.map.ser.StdSerializers$DoubleSerializer instance>;

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r12);

        $r3 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r5 = <java.lang.Double: java.lang.Class TYPE>;

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r12 = <org.codehaus.jackson.map.ser.StdSerializers$DoubleSerializer: org.codehaus.jackson.map.ser.StdSerializers$DoubleSerializer instance>;

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r12);

        r1 = new org.codehaus.jackson.map.ser.StdSerializers$NumberSerializer;

        specialinvoke r1.<org.codehaus.jackson.map.ser.StdSerializers$NumberSerializer: void <init>()>();

        $r3 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r5 = class "Ljava/math/BigInteger;";

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, r1);

        $r3 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r5 = class "Ljava/math/BigDecimal;";

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, r1);

        $r3 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r5 = class "Ljava/util/Calendar;";

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r13 = <org.codehaus.jackson.map.ser.StdSerializers$CalendarSerializer: org.codehaus.jackson.map.ser.StdSerializers$CalendarSerializer instance>;

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r13);

        $r3 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r5 = class "Ljava/util/Date;";

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r14 = <org.codehaus.jackson.map.ser.StdSerializers$UtilDateSerializer: org.codehaus.jackson.map.ser.StdSerializers$UtilDateSerializer instance>;

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r14);

        $r3 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r5 = class "Ljava/sql/Date;";

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r15 = new org.codehaus.jackson.map.ser.StdSerializers$SqlDateSerializer;

        specialinvoke $r15.<org.codehaus.jackson.map.ser.StdSerializers$SqlDateSerializer: void <init>()>();

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r15);

        $r3 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r5 = class "Ljava/sql/Time;";

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r16 = new org.codehaus.jackson.map.ser.StdSerializers$SqlTimeSerializer;

        specialinvoke $r16.<org.codehaus.jackson.map.ser.StdSerializers$SqlTimeSerializer: void <init>()>();

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r16);

        $r3 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r5 = class "Ljava/sql/Timestamp;";

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r14 = <org.codehaus.jackson.map.ser.StdSerializers$UtilDateSerializer: org.codehaus.jackson.map.ser.StdSerializers$UtilDateSerializer instance>;

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r14);

        $r3 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r5 = class "[Z";

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r17 = new org.codehaus.jackson.map.ser.ArraySerializers$BooleanArraySerializer;

        specialinvoke $r17.<org.codehaus.jackson.map.ser.ArraySerializers$BooleanArraySerializer: void <init>()>();

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r17);

        $r3 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r5 = class "[B";

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r18 = new org.codehaus.jackson.map.ser.ArraySerializers$ByteArraySerializer;

        specialinvoke $r18.<org.codehaus.jackson.map.ser.ArraySerializers$ByteArraySerializer: void <init>()>();

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r18);

        $r3 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r5 = class "[C";

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r19 = new org.codehaus.jackson.map.ser.ArraySerializers$CharArraySerializer;

        specialinvoke $r19.<org.codehaus.jackson.map.ser.ArraySerializers$CharArraySerializer: void <init>()>();

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r19);

        $r3 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r5 = class "[S";

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r20 = new org.codehaus.jackson.map.ser.ArraySerializers$ShortArraySerializer;

        specialinvoke $r20.<org.codehaus.jackson.map.ser.ArraySerializers$ShortArraySerializer: void <init>()>();

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r20);

        $r3 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r5 = class "[I";

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r21 = new org.codehaus.jackson.map.ser.ArraySerializers$IntArraySerializer;

        specialinvoke $r21.<org.codehaus.jackson.map.ser.ArraySerializers$IntArraySerializer: void <init>()>();

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r21);

        $r3 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r5 = class "[J";

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r22 = new org.codehaus.jackson.map.ser.ArraySerializers$LongArraySerializer;

        specialinvoke $r22.<org.codehaus.jackson.map.ser.ArraySerializers$LongArraySerializer: void <init>()>();

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r22);

        $r3 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r5 = class "[F";

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r23 = new org.codehaus.jackson.map.ser.ArraySerializers$FloatArraySerializer;

        specialinvoke $r23.<org.codehaus.jackson.map.ser.ArraySerializers$FloatArraySerializer: void <init>()>();

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r23);

        $r3 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r5 = class "[D";

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r24 = new org.codehaus.jackson.map.ser.ArraySerializers$DoubleArraySerializer;

        specialinvoke $r24.<org.codehaus.jackson.map.ser.ArraySerializers$DoubleArraySerializer: void <init>()>();

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r24);

        $r3 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r5 = class "[Ljava/lang/Object;";

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r25 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.map.JsonSerializer MARKER_OBJECT_ARRAY>;

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r25);

        $r3 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r5 = class "[Ljava/lang/String;";

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r25 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.map.JsonSerializer MARKER_STRING_ARRAY>;

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r25);

        $r3 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r5 = class "Ljava/util/ArrayList;";

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r25 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.map.JsonSerializer MARKER_INDEXED_LIST>;

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r25);

        $r3 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r5 = class "Ljava/util/Vector;";

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r25 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.map.JsonSerializer MARKER_INDEXED_LIST>;

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r25);

        $r3 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r5 = class "Ljava/util/LinkedList;";

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r25 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.map.JsonSerializer MARKER_COLLECTION>;

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r25);

        $r3 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r5 = class "Ljava/util/HashMap;";

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r25 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.map.JsonSerializer MARKER_OBJECT_MAP>;

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r25);

        $r3 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r5 = class "Ljava/util/Hashtable;";

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r25 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.map.JsonSerializer MARKER_OBJECT_MAP>;

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r25);

        $r3 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r5 = class "Ljava/util/LinkedHashMap;";

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r25 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.map.JsonSerializer MARKER_OBJECT_MAP>;

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r25);

        $r3 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r5 = class "Ljava/util/TreeMap;";

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r25 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.map.JsonSerializer MARKER_OBJECT_MAP>;

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r25);

        $r3 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r5 = class "Ljava/util/Properties;";

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r25 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.map.JsonSerializer MARKER_OBJECT_MAP>;

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r25);

        $r3 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r5 = class "Ljava/util/HashSet;";

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r25 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.map.JsonSerializer MARKER_COLLECTION>;

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r25);

        $r3 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r5 = class "Ljava/util/LinkedHashSet;";

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r25 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.map.JsonSerializer MARKER_COLLECTION>;

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r25);

        $r3 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r5 = class "Ljava/util/TreeSet;";

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r25 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.map.JsonSerializer MARKER_COLLECTION>;

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r25);

        $r26 = new org.codehaus.jackson.map.ser.JdkSerializers;

        specialinvoke $r26.<org.codehaus.jackson.map.ser.JdkSerializers: void <init>()>();

        $r27 = virtualinvoke $r26.<org.codehaus.jackson.map.ser.JdkSerializers: java.util.Collection provide()>();

        $r28 = interfaceinvoke $r27.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r28.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r29 = interfaceinvoke $r28.<java.util.Iterator: java.lang.Object next()>();

        r30 = (java.util.Map$Entry) $r29;

        $r29 = interfaceinvoke r30.<java.util.Map$Entry: java.lang.Object getValue()>();

        $z0 = $r29 instanceof org.codehaus.jackson.map.JsonSerializer;

        if $z0 == 0 goto label2;

        $r3 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r31 = interfaceinvoke r30.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r5 = (java.lang.Class) $r31;

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r25 = (org.codehaus.jackson.map.JsonSerializer) $r29;

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r25);

        goto label1;

     label2:
        $z0 = $r29 instanceof java.lang.Class;

        if $z0 == 0 goto label3;

        $r5 = (java.lang.Class) $r29;

        $r3 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concreteLazy>;

        $r29 = interfaceinvoke r30.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r32 = (java.lang.Class) $r29;

        $r6 = virtualinvoke $r32.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r5);

        goto label1;

     label3:
        $r33 = new java.lang.IllegalStateException;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r34 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Internal error: unrecognized value of type ");

        $r5 = virtualinvoke r30.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r34 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r6 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r33.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r6);

        throw $r33;

     label4:
        $r3 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concreteLazy>;

        $r5 = class "Lorg/codehaus/jackson/util/TokenBuffer;";

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, class "Lorg/codehaus/jackson/map/ser/StdSerializers$TokenBufferSerializer;");

        return;
    }

    protected void <init>()
    {
        org.codehaus.jackson.map.ser.BasicSerializerFactory r0;
        org.codehaus.jackson.map.ext.OptionalHandlerFactory $r1;

        r0 := @this: org.codehaus.jackson.map.ser.BasicSerializerFactory;

        specialinvoke r0.<org.codehaus.jackson.map.SerializerFactory: void <init>()>();

        $r1 = <org.codehaus.jackson.map.ext.OptionalHandlerFactory: org.codehaus.jackson.map.ext.OptionalHandlerFactory instance>;

        r0.<org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.map.ext.OptionalHandlerFactory optionalHandlers> = $r1;

        return;
    }

    protected org.codehaus.jackson.map.JsonSerializer buildCollectionSerializer(org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.introspect.BasicBeanDescription, org.codehaus.jackson.map.BeanProperty)
    {
        org.codehaus.jackson.map.ser.BasicSerializerFactory r0;
        org.codehaus.jackson.map.SerializationConfig $r1;
        org.codehaus.jackson.type.JavaType $r2;
        org.codehaus.jackson.map.introspect.BasicBeanDescription $r3;
        org.codehaus.jackson.map.BeanProperty $r4;
        org.codehaus.jackson.map.TypeSerializer $r5;
        boolean $z0;
        org.codehaus.jackson.map.ser.ContainerSerializerBase $r6;

        r0 := @this: org.codehaus.jackson.map.ser.BasicSerializerFactory;

        $r1 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        $r2 := @parameter1: org.codehaus.jackson.type.JavaType;

        $r3 := @parameter2: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        $r4 := @parameter3: org.codehaus.jackson.map.BeanProperty;

        $r2 = virtualinvoke $r2.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType getContentType()>();

        $r5 = virtualinvoke r0.<org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.map.TypeSerializer createTypeSerializer(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanProperty)>($r1, $r2, $r4);

        $z0 = virtualinvoke r0.<org.codehaus.jackson.map.ser.BasicSerializerFactory: boolean usesStaticTyping(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.introspect.BasicBeanDescription,org.codehaus.jackson.map.TypeSerializer)>($r1, $r3, $r5);

        $r6 = staticinvoke <org.codehaus.jackson.map.ser.ContainerSerializers: org.codehaus.jackson.map.ser.ContainerSerializerBase collectionSerializer(org.codehaus.jackson.type.JavaType,boolean,org.codehaus.jackson.map.TypeSerializer,org.codehaus.jackson.map.BeanProperty)>($r2, $z0, $r5, $r4);

        return $r6;
    }

    protected org.codehaus.jackson.map.JsonSerializer buildEnumMapSerializer(org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.introspect.BasicBeanDescription, org.codehaus.jackson.map.BeanProperty)
    {
        org.codehaus.jackson.map.ser.BasicSerializerFactory r0;
        org.codehaus.jackson.map.SerializationConfig $r1;
        org.codehaus.jackson.type.JavaType $r2, $r5;
        org.codehaus.jackson.map.introspect.BasicBeanDescription $r3;
        org.codehaus.jackson.map.BeanProperty $r4;
        org.codehaus.jackson.map.util.EnumValues r6;
        boolean $z0;
        java.lang.Class $r7;
        org.codehaus.jackson.map.AnnotationIntrospector $r8;
        org.codehaus.jackson.map.TypeSerializer $r9;
        org.codehaus.jackson.map.ser.EnumMapSerializer $r10;

        r0 := @this: org.codehaus.jackson.map.ser.BasicSerializerFactory;

        $r1 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        $r2 := @parameter1: org.codehaus.jackson.type.JavaType;

        $r3 := @parameter2: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        $r4 := @parameter3: org.codehaus.jackson.map.BeanProperty;

        $r5 = virtualinvoke $r2.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType getKeyType()>();

        $r2 = virtualinvoke $r2.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType getContentType()>();

        r6 = null;

        $z0 = virtualinvoke $r5.<org.codehaus.jackson.type.JavaType: boolean isEnumType()>();

        if $z0 == 0 goto label1;

        $r7 = virtualinvoke $r5.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        $r8 = virtualinvoke $r1.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.AnnotationIntrospector getAnnotationIntrospector()>();

        r6 = staticinvoke <org.codehaus.jackson.map.util.EnumValues: org.codehaus.jackson.map.util.EnumValues construct(java.lang.Class,org.codehaus.jackson.map.AnnotationIntrospector)>($r7, $r8);

     label1:
        $r9 = virtualinvoke r0.<org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.map.TypeSerializer createTypeSerializer(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanProperty)>($r1, $r2, $r4);

        $r10 = new org.codehaus.jackson.map.ser.EnumMapSerializer;

        $z0 = virtualinvoke r0.<org.codehaus.jackson.map.ser.BasicSerializerFactory: boolean usesStaticTyping(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.introspect.BasicBeanDescription,org.codehaus.jackson.map.TypeSerializer)>($r1, $r3, $r9);

        specialinvoke $r10.<org.codehaus.jackson.map.ser.EnumMapSerializer: void <init>(org.codehaus.jackson.type.JavaType,boolean,org.codehaus.jackson.map.util.EnumValues,org.codehaus.jackson.map.TypeSerializer,org.codehaus.jackson.map.BeanProperty)>($r2, $z0, r6, $r9, $r4);

        return $r10;
    }

    protected org.codehaus.jackson.map.JsonSerializer buildEnumSetSerializer(org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.introspect.BasicBeanDescription, org.codehaus.jackson.map.BeanProperty)
    {
        org.codehaus.jackson.map.ser.BasicSerializerFactory r0;
        org.codehaus.jackson.map.SerializationConfig $r1;
        org.codehaus.jackson.type.JavaType $r2, r5;
        org.codehaus.jackson.map.introspect.BasicBeanDescription $r3;
        org.codehaus.jackson.map.BeanProperty $r4;
        boolean $z0;
        org.codehaus.jackson.map.JsonSerializer $r6;

        r0 := @this: org.codehaus.jackson.map.ser.BasicSerializerFactory;

        $r1 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        $r2 := @parameter1: org.codehaus.jackson.type.JavaType;

        $r3 := @parameter2: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        $r4 := @parameter3: org.codehaus.jackson.map.BeanProperty;

        $r2 = virtualinvoke $r2.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType getContentType()>();

        r5 = $r2;

        $z0 = virtualinvoke $r2.<org.codehaus.jackson.type.JavaType: boolean isEnumType()>();

        if $z0 != 0 goto label1;

        r5 = null;

     label1:
        $r6 = staticinvoke <org.codehaus.jackson.map.ser.ContainerSerializers: org.codehaus.jackson.map.JsonSerializer enumSetSerializer(org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanProperty)>(r5, $r4);

        return $r6;
    }

    protected org.codehaus.jackson.map.JsonSerializer buildIndexedListSerializer(org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.introspect.BasicBeanDescription, org.codehaus.jackson.map.BeanProperty)
    {
        org.codehaus.jackson.map.ser.BasicSerializerFactory r0;
        org.codehaus.jackson.map.SerializationConfig $r1;
        org.codehaus.jackson.type.JavaType $r2;
        org.codehaus.jackson.map.introspect.BasicBeanDescription $r3;
        org.codehaus.jackson.map.BeanProperty $r4;
        org.codehaus.jackson.map.TypeSerializer $r5;
        boolean $z0;
        org.codehaus.jackson.map.ser.ContainerSerializerBase $r6;

        r0 := @this: org.codehaus.jackson.map.ser.BasicSerializerFactory;

        $r1 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        $r2 := @parameter1: org.codehaus.jackson.type.JavaType;

        $r3 := @parameter2: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        $r4 := @parameter3: org.codehaus.jackson.map.BeanProperty;

        $r2 = virtualinvoke $r2.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType getContentType()>();

        $r5 = virtualinvoke r0.<org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.map.TypeSerializer createTypeSerializer(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanProperty)>($r1, $r2, $r4);

        $z0 = virtualinvoke r0.<org.codehaus.jackson.map.ser.BasicSerializerFactory: boolean usesStaticTyping(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.introspect.BasicBeanDescription,org.codehaus.jackson.map.TypeSerializer)>($r1, $r3, $r5);

        $r6 = staticinvoke <org.codehaus.jackson.map.ser.ContainerSerializers: org.codehaus.jackson.map.ser.ContainerSerializerBase indexedListSerializer(org.codehaus.jackson.type.JavaType,boolean,org.codehaus.jackson.map.TypeSerializer,org.codehaus.jackson.map.BeanProperty)>($r2, $z0, $r5, $r4);

        return $r6;
    }

    protected org.codehaus.jackson.map.JsonSerializer buildIterableSerializer(org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.introspect.BasicBeanDescription, org.codehaus.jackson.map.BeanProperty)
    {
        org.codehaus.jackson.map.ser.BasicSerializerFactory r0;
        org.codehaus.jackson.map.SerializationConfig $r1;
        org.codehaus.jackson.type.JavaType $r2, r5;
        org.codehaus.jackson.map.introspect.BasicBeanDescription $r3;
        org.codehaus.jackson.map.BeanProperty $r4;
        org.codehaus.jackson.map.TypeSerializer $r6;
        boolean $z0;
        org.codehaus.jackson.map.ser.ContainerSerializerBase $r7;

        r0 := @this: org.codehaus.jackson.map.ser.BasicSerializerFactory;

        $r1 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        $r2 := @parameter1: org.codehaus.jackson.type.JavaType;

        $r3 := @parameter2: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        $r4 := @parameter3: org.codehaus.jackson.map.BeanProperty;

        $r2 = virtualinvoke $r2.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType containedType(int)>(0);

        r5 = $r2;

        if $r2 != null goto label1;

        r5 = staticinvoke <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType type(java.lang.reflect.Type)>(class "Ljava/lang/Object;");

     label1:
        $r6 = virtualinvoke r0.<org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.map.TypeSerializer createTypeSerializer(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanProperty)>($r1, r5, $r4);

        $z0 = virtualinvoke r0.<org.codehaus.jackson.map.ser.BasicSerializerFactory: boolean usesStaticTyping(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.introspect.BasicBeanDescription,org.codehaus.jackson.map.TypeSerializer)>($r1, $r3, $r6);

        $r7 = staticinvoke <org.codehaus.jackson.map.ser.ContainerSerializers: org.codehaus.jackson.map.ser.ContainerSerializerBase iterableSerializer(org.codehaus.jackson.type.JavaType,boolean,org.codehaus.jackson.map.TypeSerializer,org.codehaus.jackson.map.BeanProperty)>(r5, $z0, $r6, $r4);

        return $r7;
    }

    protected org.codehaus.jackson.map.JsonSerializer buildIteratorSerializer(org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.introspect.BasicBeanDescription, org.codehaus.jackson.map.BeanProperty)
    {
        org.codehaus.jackson.map.ser.BasicSerializerFactory r0;
        org.codehaus.jackson.map.SerializationConfig $r1;
        org.codehaus.jackson.type.JavaType $r2, r5;
        org.codehaus.jackson.map.introspect.BasicBeanDescription $r3;
        org.codehaus.jackson.map.BeanProperty $r4;
        org.codehaus.jackson.map.TypeSerializer $r6;
        boolean $z0;
        org.codehaus.jackson.map.ser.ContainerSerializerBase $r7;

        r0 := @this: org.codehaus.jackson.map.ser.BasicSerializerFactory;

        $r1 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        $r2 := @parameter1: org.codehaus.jackson.type.JavaType;

        $r3 := @parameter2: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        $r4 := @parameter3: org.codehaus.jackson.map.BeanProperty;

        $r2 = virtualinvoke $r2.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType containedType(int)>(0);

        r5 = $r2;

        if $r2 != null goto label1;

        r5 = staticinvoke <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType type(java.lang.reflect.Type)>(class "Ljava/lang/Object;");

     label1:
        $r6 = virtualinvoke r0.<org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.map.TypeSerializer createTypeSerializer(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanProperty)>($r1, r5, $r4);

        $z0 = virtualinvoke r0.<org.codehaus.jackson.map.ser.BasicSerializerFactory: boolean usesStaticTyping(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.introspect.BasicBeanDescription,org.codehaus.jackson.map.TypeSerializer)>($r1, $r3, $r6);

        $r7 = staticinvoke <org.codehaus.jackson.map.ser.ContainerSerializers: org.codehaus.jackson.map.ser.ContainerSerializerBase iteratorSerializer(org.codehaus.jackson.type.JavaType,boolean,org.codehaus.jackson.map.TypeSerializer,org.codehaus.jackson.map.BeanProperty)>(r5, $z0, $r6, $r4);

        return $r7;
    }

    protected org.codehaus.jackson.map.JsonSerializer buildMapSerializer(org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.introspect.BasicBeanDescription, org.codehaus.jackson.map.BeanProperty)
    {
        org.codehaus.jackson.map.ser.BasicSerializerFactory r0;
        org.codehaus.jackson.map.SerializationConfig $r1;
        org.codehaus.jackson.type.JavaType $r2, $r6;
        org.codehaus.jackson.map.introspect.BasicBeanDescription $r3;
        org.codehaus.jackson.map.BeanProperty $r4;
        org.codehaus.jackson.map.AnnotationIntrospector $r5;
        org.codehaus.jackson.map.TypeSerializer $r7;
        boolean $z0;
        org.codehaus.jackson.map.introspect.AnnotatedClass $r8;
        java.lang.String[] $r9;
        org.codehaus.jackson.map.ser.MapSerializer $r10;

        r0 := @this: org.codehaus.jackson.map.ser.BasicSerializerFactory;

        $r1 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        $r2 := @parameter1: org.codehaus.jackson.type.JavaType;

        $r3 := @parameter2: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        $r4 := @parameter3: org.codehaus.jackson.map.BeanProperty;

        $r5 = virtualinvoke $r1.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.AnnotationIntrospector getAnnotationIntrospector()>();

        $r6 = virtualinvoke $r2.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType getContentType()>();

        $r7 = virtualinvoke r0.<org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.map.TypeSerializer createTypeSerializer(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanProperty)>($r1, $r6, $r4);

        $z0 = virtualinvoke r0.<org.codehaus.jackson.map.ser.BasicSerializerFactory: boolean usesStaticTyping(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.introspect.BasicBeanDescription,org.codehaus.jackson.map.TypeSerializer)>($r1, $r3, $r7);

        $r8 = virtualinvoke $r3.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.AnnotatedClass getClassInfo()>();

        $r9 = virtualinvoke $r5.<org.codehaus.jackson.map.AnnotationIntrospector: java.lang.String[] findPropertiesToIgnore(org.codehaus.jackson.map.introspect.AnnotatedClass)>($r8);

        $r10 = staticinvoke <org.codehaus.jackson.map.ser.MapSerializer: org.codehaus.jackson.map.ser.MapSerializer construct(java.lang.String[],org.codehaus.jackson.type.JavaType,boolean,org.codehaus.jackson.map.TypeSerializer,org.codehaus.jackson.map.BeanProperty)>($r9, $r2, $z0, $r7, $r4);

        return $r10;
    }

    protected org.codehaus.jackson.map.JsonSerializer buildObjectArraySerializer(org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.introspect.BasicBeanDescription, org.codehaus.jackson.map.BeanProperty)
    {
        org.codehaus.jackson.map.ser.BasicSerializerFactory r0;
        org.codehaus.jackson.map.SerializationConfig $r1;
        org.codehaus.jackson.type.JavaType $r2;
        org.codehaus.jackson.map.introspect.BasicBeanDescription $r3;
        org.codehaus.jackson.map.BeanProperty $r4;
        org.codehaus.jackson.map.ser.impl.ObjectArraySerializer $r5;
        org.codehaus.jackson.map.TypeSerializer $r6;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.ser.BasicSerializerFactory;

        $r1 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        $r2 := @parameter1: org.codehaus.jackson.type.JavaType;

        $r3 := @parameter2: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        $r4 := @parameter3: org.codehaus.jackson.map.BeanProperty;

        $r2 = virtualinvoke $r2.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType getContentType()>();

        $r6 = virtualinvoke r0.<org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.map.TypeSerializer createTypeSerializer(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanProperty)>($r1, $r2, $r4);

        $r5 = new org.codehaus.jackson.map.ser.impl.ObjectArraySerializer;

        $z0 = virtualinvoke r0.<org.codehaus.jackson.map.ser.BasicSerializerFactory: boolean usesStaticTyping(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.introspect.BasicBeanDescription,org.codehaus.jackson.map.TypeSerializer)>($r1, $r3, $r6);

        specialinvoke $r5.<org.codehaus.jackson.map.ser.impl.ObjectArraySerializer: void <init>(org.codehaus.jackson.type.JavaType,boolean,org.codehaus.jackson.map.TypeSerializer,org.codehaus.jackson.map.BeanProperty)>($r2, $z0, $r6, $r4);

        return $r5;
    }

    public org.codehaus.jackson.map.JsonSerializer createSerializer(org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.BeanProperty)
    {
        org.codehaus.jackson.map.ser.BasicSerializerFactory r0;
        org.codehaus.jackson.map.SerializationConfig $r1;
        org.codehaus.jackson.type.JavaType $r2;
        org.codehaus.jackson.map.BeanProperty $r3;
        org.codehaus.jackson.map.BeanDescription $r4;
        org.codehaus.jackson.map.introspect.BasicBeanDescription r5;
        org.codehaus.jackson.map.introspect.AnnotatedClass $r6;
        org.codehaus.jackson.map.JsonSerializer $r7, r8;

        r0 := @this: org.codehaus.jackson.map.ser.BasicSerializerFactory;

        $r1 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        $r2 := @parameter1: org.codehaus.jackson.type.JavaType;

        $r3 := @parameter2: org.codehaus.jackson.map.BeanProperty;

        $r4 = virtualinvoke $r1.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.BeanDescription introspect(org.codehaus.jackson.type.JavaType)>($r2);

        r5 = (org.codehaus.jackson.map.introspect.BasicBeanDescription) $r4;

        $r6 = virtualinvoke r5.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.AnnotatedClass getClassInfo()>();

        $r7 = virtualinvoke r0.<org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.map.JsonSerializer findSerializerFromAnnotation(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.introspect.Annotated,org.codehaus.jackson.map.BeanProperty)>($r1, $r6, $r3);

        r8 = $r7;

        if $r7 != null goto label1;

        $r7 = virtualinvoke r0.<org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.map.JsonSerializer findSerializerByLookup(org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.introspect.BasicBeanDescription,org.codehaus.jackson.map.BeanProperty)>($r2, $r1, r5, $r3);

        r8 = $r7;

        if $r7 != null goto label1;

        $r7 = virtualinvoke r0.<org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.map.JsonSerializer findSerializerByPrimaryType(org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.introspect.BasicBeanDescription,org.codehaus.jackson.map.BeanProperty)>($r2, $r1, r5, $r3);

        r8 = $r7;

        if $r7 != null goto label1;

        r8 = virtualinvoke r0.<org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.map.JsonSerializer findSerializerByAddonType(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.introspect.BasicBeanDescription,org.codehaus.jackson.map.BeanProperty)>($r1, $r2, r5, $r3);

     label1:
        return r8;
    }

    public org.codehaus.jackson.map.TypeSerializer createTypeSerializer(org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.BeanProperty)
    {
        org.codehaus.jackson.map.ser.BasicSerializerFactory r0;
        org.codehaus.jackson.map.SerializationConfig $r1;
        org.codehaus.jackson.type.JavaType $r2;
        org.codehaus.jackson.map.BeanProperty $r3;
        java.lang.Class $r4;
        org.codehaus.jackson.map.BeanDescription $r5;
        org.codehaus.jackson.map.introspect.BasicBeanDescription r6;
        org.codehaus.jackson.map.introspect.AnnotatedClass $r7;
        org.codehaus.jackson.map.AnnotationIntrospector $r8;
        org.codehaus.jackson.map.jsontype.TypeResolverBuilder $r9, r10;
        java.util.Collection r11;
        org.codehaus.jackson.map.jsontype.SubtypeResolver $r12;
        org.codehaus.jackson.map.TypeSerializer $r13;

        r0 := @this: org.codehaus.jackson.map.ser.BasicSerializerFactory;

        $r1 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        $r2 := @parameter1: org.codehaus.jackson.type.JavaType;

        $r3 := @parameter2: org.codehaus.jackson.map.BeanProperty;

        $r4 = virtualinvoke $r2.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        $r5 = virtualinvoke $r1.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.BeanDescription introspectClassAnnotations(java.lang.Class)>($r4);

        r6 = (org.codehaus.jackson.map.introspect.BasicBeanDescription) $r5;

        $r7 = virtualinvoke r6.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.AnnotatedClass getClassInfo()>();

        $r8 = virtualinvoke $r1.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.AnnotationIntrospector getAnnotationIntrospector()>();

        $r9 = virtualinvoke $r8.<org.codehaus.jackson.map.AnnotationIntrospector: org.codehaus.jackson.map.jsontype.TypeResolverBuilder findTypeResolver(org.codehaus.jackson.map.introspect.AnnotatedClass,org.codehaus.jackson.type.JavaType)>($r7, $r2);

        r10 = $r9;

        r11 = null;

        if $r9 != null goto label2;

        r10 = virtualinvoke $r1.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.jsontype.TypeResolverBuilder getDefaultTyper(org.codehaus.jackson.type.JavaType)>($r2);

     label1:
        if r10 != null goto label3;

        return null;

     label2:
        $r12 = virtualinvoke $r1.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.jsontype.SubtypeResolver getSubtypeResolver()>();

        r11 = virtualinvoke $r12.<org.codehaus.jackson.map.jsontype.SubtypeResolver: java.util.Collection collectAndResolveSubtypes(org.codehaus.jackson.map.introspect.AnnotatedClass,org.codehaus.jackson.map.MapperConfig,org.codehaus.jackson.map.AnnotationIntrospector)>($r7, $r1, $r8);

        goto label1;

     label3:
        $r13 = interfaceinvoke r10.<org.codehaus.jackson.map.jsontype.TypeResolverBuilder: org.codehaus.jackson.map.TypeSerializer buildTypeSerializer(org.codehaus.jackson.type.JavaType,java.util.Collection,org.codehaus.jackson.map.BeanProperty)>($r2, r11, $r3);

        return $r13;
    }

    public final org.codehaus.jackson.map.JsonSerializer findSerializerByAddonType(org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.introspect.BasicBeanDescription, org.codehaus.jackson.map.BeanProperty)
    {
        org.codehaus.jackson.map.ser.BasicSerializerFactory r0;
        org.codehaus.jackson.map.SerializationConfig $r1;
        org.codehaus.jackson.type.JavaType $r2;
        org.codehaus.jackson.map.introspect.BasicBeanDescription $r3;
        org.codehaus.jackson.map.BeanProperty $r4;
        java.lang.Class $r5, $r6;
        boolean $z0;
        org.codehaus.jackson.map.JsonSerializer $r7;
        org.codehaus.jackson.map.ser.ToStringSerializer r8;

        r0 := @this: org.codehaus.jackson.map.ser.BasicSerializerFactory;

        $r1 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        $r2 := @parameter1: org.codehaus.jackson.type.JavaType;

        $r3 := @parameter2: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        $r4 := @parameter3: org.codehaus.jackson.map.BeanProperty;

        $r5 = virtualinvoke $r2.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        $r6 = class "Ljava/util/Iterator;";

        $z0 = virtualinvoke $r6.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r5);

        if $z0 == 0 goto label1;

        $r7 = virtualinvoke r0.<org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.map.JsonSerializer buildIteratorSerializer(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.introspect.BasicBeanDescription,org.codehaus.jackson.map.BeanProperty)>($r1, $r2, $r3, $r4);

        return $r7;

     label1:
        $r6 = class "Ljava/lang/Iterable;";

        $z0 = virtualinvoke $r6.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r5);

        if $z0 == 0 goto label2;

        $r7 = virtualinvoke r0.<org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.map.JsonSerializer buildIterableSerializer(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.introspect.BasicBeanDescription,org.codehaus.jackson.map.BeanProperty)>($r1, $r2, $r3, $r4);

        return $r7;

     label2:
        $r6 = class "Ljava/lang/CharSequence;";

        $z0 = virtualinvoke $r6.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r5);

        if $z0 == 0 goto label3;

        r8 = <org.codehaus.jackson.map.ser.ToStringSerializer: org.codehaus.jackson.map.ser.ToStringSerializer instance>;

        return r8;

     label3:
        return null;
    }

    public final org.codehaus.jackson.map.JsonSerializer findSerializerByLookup(org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.map.introspect.BasicBeanDescription, org.codehaus.jackson.map.BeanProperty)
    {
        org.codehaus.jackson.map.ser.BasicSerializerFactory r0;
        org.codehaus.jackson.type.JavaType $r1, $r15;
        org.codehaus.jackson.map.SerializationConfig $r2;
        org.codehaus.jackson.map.introspect.BasicBeanDescription $r3;
        org.codehaus.jackson.map.BeanProperty $r4;
        java.lang.Class $r5;
        java.lang.String $r6;
        java.util.HashMap $r7;
        java.lang.Object $r8;
        org.codehaus.jackson.map.JsonSerializer r9, $r10;
        java.lang.Exception $r11;
        java.lang.IllegalStateException $r12;
        java.lang.StringBuilder $r13;
        org.codehaus.jackson.map.ser.ArraySerializers$StringArraySerializer $r14;
        org.codehaus.jackson.map.ser.impl.IndexedStringListSerializer $r16;
        org.codehaus.jackson.map.ser.impl.StringCollectionSerializer $r17;
        org.codehaus.jackson.map.ext.OptionalHandlerFactory $r18;

        r0 := @this: org.codehaus.jackson.map.ser.BasicSerializerFactory;

        $r1 := @parameter0: org.codehaus.jackson.type.JavaType;

        $r2 := @parameter1: org.codehaus.jackson.map.SerializationConfig;

        $r3 := @parameter2: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        $r4 := @parameter3: org.codehaus.jackson.map.BeanProperty;

        $r5 = virtualinvoke $r1.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r7 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concrete>;

        $r8 = virtualinvoke $r7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r6);

        r9 = (org.codehaus.jackson.map.JsonSerializer) $r8;

        if r9 != null goto label02;

        $r7 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: java.util.HashMap _concreteLazy>;

        $r8 = virtualinvoke $r7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r6);

        $r5 = (java.lang.Class) $r8;

        if $r5 == null goto label02;

     label01:
        $r8 = virtualinvoke $r5.<java.lang.Class: java.lang.Object newInstance()>();

        r9 = (org.codehaus.jackson.map.JsonSerializer) $r8;

     label02:
        if r9 == null goto label10;

        $r10 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.map.JsonSerializer MARKER_OBJECT_MAP>;

        if r9 != $r10 goto label04;

        r9 = virtualinvoke r0.<org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.map.JsonSerializer buildMapSerializer(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.introspect.BasicBeanDescription,org.codehaus.jackson.map.BeanProperty)>($r2, $r1, $r3, $r4);

        return r9;

     label03:
        $r11 := @caughtexception;

        $r12 = new java.lang.IllegalStateException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to instantiate standard serializer (of type ");

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): ");

        $r6 = virtualinvoke $r11.<java.lang.Exception: java.lang.String getMessage()>();

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r6 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>($r6, $r11);

        throw $r12;

     label04:
        $r10 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.map.JsonSerializer MARKER_OBJECT_ARRAY>;

        if r9 != $r10 goto label05;

        r9 = virtualinvoke r0.<org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.map.JsonSerializer buildObjectArraySerializer(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.introspect.BasicBeanDescription,org.codehaus.jackson.map.BeanProperty)>($r2, $r1, $r3, $r4);

        return r9;

     label05:
        $r10 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.map.JsonSerializer MARKER_STRING_ARRAY>;

        if r9 != $r10 goto label06;

        $r14 = new org.codehaus.jackson.map.ser.ArraySerializers$StringArraySerializer;

        specialinvoke $r14.<org.codehaus.jackson.map.ser.ArraySerializers$StringArraySerializer: void <init>(org.codehaus.jackson.map.BeanProperty)>($r4);

        return $r14;

     label06:
        $r10 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.map.JsonSerializer MARKER_INDEXED_LIST>;

        if r9 != $r10 goto label08;

        $r15 = virtualinvoke $r1.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType getContentType()>();

        $r5 = virtualinvoke $r15.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        if $r5 != class "Ljava/lang/String;" goto label07;

        $r16 = new org.codehaus.jackson.map.ser.impl.IndexedStringListSerializer;

        specialinvoke $r16.<org.codehaus.jackson.map.ser.impl.IndexedStringListSerializer: void <init>(org.codehaus.jackson.map.BeanProperty)>($r4);

        return $r16;

     label07:
        r9 = virtualinvoke r0.<org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.map.JsonSerializer buildIndexedListSerializer(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.introspect.BasicBeanDescription,org.codehaus.jackson.map.BeanProperty)>($r2, $r1, $r3, $r4);

        return r9;

     label08:
        $r10 = <org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.map.JsonSerializer MARKER_COLLECTION>;

        if r9 != $r10 goto label11;

        $r15 = virtualinvoke $r1.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType getContentType()>();

        $r5 = virtualinvoke $r15.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        if $r5 != class "Ljava/lang/String;" goto label09;

        $r17 = new org.codehaus.jackson.map.ser.impl.StringCollectionSerializer;

        specialinvoke $r17.<org.codehaus.jackson.map.ser.impl.StringCollectionSerializer: void <init>(org.codehaus.jackson.map.BeanProperty)>($r4);

        return $r17;

     label09:
        r9 = virtualinvoke r0.<org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.map.JsonSerializer buildCollectionSerializer(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.introspect.BasicBeanDescription,org.codehaus.jackson.map.BeanProperty)>($r2, $r1, $r3, $r4);

        return r9;

     label10:
        $r18 = r0.<org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.map.ext.OptionalHandlerFactory optionalHandlers>;

        r9 = virtualinvoke $r18.<org.codehaus.jackson.map.ext.OptionalHandlerFactory: org.codehaus.jackson.map.JsonSerializer findSerializer(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.introspect.BasicBeanDescription,org.codehaus.jackson.map.BeanProperty)>($r2, $r1, $r3, $r4);

     label11:
        return r9;

        catch java.lang.Exception from label01 to label02 with label03;
    }

    public final org.codehaus.jackson.map.JsonSerializer findSerializerByPrimaryType(org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.map.introspect.BasicBeanDescription, org.codehaus.jackson.map.BeanProperty)
    {
        org.codehaus.jackson.map.ser.BasicSerializerFactory r0;
        org.codehaus.jackson.type.JavaType $r1;
        org.codehaus.jackson.map.SerializationConfig $r2;
        org.codehaus.jackson.map.introspect.BasicBeanDescription $r3;
        org.codehaus.jackson.map.BeanProperty $r4;
        java.lang.Class $r5, $r6, $r7;
        boolean $z0;
        org.codehaus.jackson.map.JsonSerializer $r8;
        org.codehaus.jackson.map.introspect.AnnotatedMethod $r9;
        org.codehaus.jackson.map.ser.JsonValueSerializer $r10;
        java.lang.reflect.Method $r11;
        org.codehaus.jackson.map.ser.EnumSerializer $r12;
        org.codehaus.jackson.map.ser.StdSerializers$SerializableWithTypeSerializer r13;
        org.codehaus.jackson.map.ser.StdSerializers$SerializableSerializer r14;
        org.codehaus.jackson.map.ser.StdSerializers$NumberSerializer r15;
        org.codehaus.jackson.map.ser.StdSerializers$CalendarSerializer r16;
        org.codehaus.jackson.map.ser.StdSerializers$UtilDateSerializer r17;

        r0 := @this: org.codehaus.jackson.map.ser.BasicSerializerFactory;

        $r1 := @parameter0: org.codehaus.jackson.type.JavaType;

        $r2 := @parameter1: org.codehaus.jackson.map.SerializationConfig;

        $r3 := @parameter2: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        $r4 := @parameter3: org.codehaus.jackson.map.BeanProperty;

        $r5 = class "Ljava/util/List;";

        $r6 = virtualinvoke $r1.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        $r7 = class "Lorg/codehaus/jackson/map/JsonSerializable;";

        $z0 = virtualinvoke $r7.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r6);

        if $z0 == 0 goto label02;

        $r5 = class "Lorg/codehaus/jackson/map/JsonSerializableWithType;";

        $z0 = virtualinvoke $r5.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r6);

        if $z0 == 0 goto label01;

        r13 = <org.codehaus.jackson.map.ser.StdSerializers$SerializableWithTypeSerializer: org.codehaus.jackson.map.ser.StdSerializers$SerializableWithTypeSerializer instance>;

        return r13;

     label01:
        r14 = <org.codehaus.jackson.map.ser.StdSerializers$SerializableSerializer: org.codehaus.jackson.map.ser.StdSerializers$SerializableSerializer instance>;

        return r14;

     label02:
        $r7 = class "Ljava/util/Map;";

        $z0 = virtualinvoke $r7.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r6);

        if $z0 == 0 goto label04;

        $r5 = class "Ljava/util/EnumMap;";

        $z0 = virtualinvoke $r5.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r6);

        if $z0 == 0 goto label03;

        $r8 = virtualinvoke r0.<org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.map.JsonSerializer buildEnumMapSerializer(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.introspect.BasicBeanDescription,org.codehaus.jackson.map.BeanProperty)>($r2, $r1, $r3, $r4);

        return $r8;

     label03:
        $r8 = virtualinvoke r0.<org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.map.JsonSerializer buildMapSerializer(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.introspect.BasicBeanDescription,org.codehaus.jackson.map.BeanProperty)>($r2, $r1, $r3, $r4);

        return $r8;

     label04:
        $r7 = class "[Ljava/lang/Object;";

        $z0 = virtualinvoke $r7.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r6);

        if $z0 == 0 goto label05;

        $r8 = virtualinvoke r0.<org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.map.JsonSerializer buildObjectArraySerializer(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.introspect.BasicBeanDescription,org.codehaus.jackson.map.BeanProperty)>($r2, $r1, $r3, $r4);

        return $r8;

     label05:
        $z0 = virtualinvoke $r5.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r6);

        if $z0 == 0 goto label08;

        if $r6 == class "Ljava/util/List;" goto label06;

        if $r6 == class "Ljava/util/AbstractList;" goto label06;

        $r5 = class "Ljava/util/RandomAccess;";

        $z0 = virtualinvoke $r5.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r6);

        if $z0 == 0 goto label07;

     label06:
        $r8 = virtualinvoke r0.<org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.map.JsonSerializer buildIndexedListSerializer(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.introspect.BasicBeanDescription,org.codehaus.jackson.map.BeanProperty)>($r2, $r1, $r3, $r4);

        return $r8;

     label07:
        $r8 = virtualinvoke r0.<org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.map.JsonSerializer buildCollectionSerializer(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.introspect.BasicBeanDescription,org.codehaus.jackson.map.BeanProperty)>($r2, $r1, $r3, $r4);

        return $r8;

     label08:
        $r9 = virtualinvoke $r3.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.AnnotatedMethod findJsonValueMethod()>();

        if $r9 == null goto label09;

        $r8 = virtualinvoke r0.<org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.map.JsonSerializer findSerializerFromAnnotation(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.introspect.Annotated,org.codehaus.jackson.map.BeanProperty)>($r2, $r9, $r4);

        $r10 = new org.codehaus.jackson.map.ser.JsonValueSerializer;

        $r11 = virtualinvoke $r9.<org.codehaus.jackson.map.introspect.AnnotatedMethod: java.lang.reflect.Method getAnnotated()>();

        specialinvoke $r10.<org.codehaus.jackson.map.ser.JsonValueSerializer: void <init>(java.lang.reflect.Method,org.codehaus.jackson.map.JsonSerializer,org.codehaus.jackson.map.BeanProperty)>($r11, $r8, $r4);

        return $r10;

     label09:
        $r5 = class "Ljava/lang/Number;";

        $z0 = virtualinvoke $r5.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r6);

        if $z0 == 0 goto label10;

        r15 = <org.codehaus.jackson.map.ser.StdSerializers$NumberSerializer: org.codehaus.jackson.map.ser.StdSerializers$NumberSerializer instance>;

        return r15;

     label10:
        $r5 = class "Ljava/lang/Enum;";

        $z0 = virtualinvoke $r5.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r6);

        if $z0 == 0 goto label11;

        $r12 = staticinvoke <org.codehaus.jackson.map.ser.EnumSerializer: org.codehaus.jackson.map.ser.EnumSerializer construct(java.lang.Class,org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.map.introspect.BasicBeanDescription)>($r6, $r2, $r3);

        return $r12;

     label11:
        $r5 = class "Ljava/util/Calendar;";

        $z0 = virtualinvoke $r5.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r6);

        if $z0 == 0 goto label12;

        r16 = <org.codehaus.jackson.map.ser.StdSerializers$CalendarSerializer: org.codehaus.jackson.map.ser.StdSerializers$CalendarSerializer instance>;

        return r16;

     label12:
        $r5 = class "Ljava/util/Date;";

        $z0 = virtualinvoke $r5.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r6);

        if $z0 == 0 goto label13;

        r17 = <org.codehaus.jackson.map.ser.StdSerializers$UtilDateSerializer: org.codehaus.jackson.map.ser.StdSerializers$UtilDateSerializer instance>;

        return r17;

     label13:
        $r5 = class "Ljava/util/Collection;";

        $z0 = virtualinvoke $r5.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r6);

        if $z0 == 0 goto label15;

        $r5 = class "Ljava/util/EnumSet;";

        $z0 = virtualinvoke $r5.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r6);

        if $z0 == 0 goto label14;

        $r8 = virtualinvoke r0.<org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.map.JsonSerializer buildEnumSetSerializer(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.introspect.BasicBeanDescription,org.codehaus.jackson.map.BeanProperty)>($r2, $r1, $r3, $r4);

        return $r8;

     label14:
        $r8 = virtualinvoke r0.<org.codehaus.jackson.map.ser.BasicSerializerFactory: org.codehaus.jackson.map.JsonSerializer buildCollectionSerializer(org.codehaus.jackson.map.SerializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.introspect.BasicBeanDescription,org.codehaus.jackson.map.BeanProperty)>($r2, $r1, $r3, $r4);

        return $r8;

     label15:
        return null;
    }

    protected org.codehaus.jackson.map.JsonSerializer findSerializerFromAnnotation(org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.map.introspect.Annotated, org.codehaus.jackson.map.BeanProperty)
    {
        org.codehaus.jackson.map.SerializationConfig $r0;
        org.codehaus.jackson.map.introspect.Annotated $r1;
        org.codehaus.jackson.map.BeanProperty $r2;
        org.codehaus.jackson.map.ser.BasicSerializerFactory r3;
        org.codehaus.jackson.map.AnnotationIntrospector $r4;
        java.lang.Object $r5;
        boolean $z0;
        org.codehaus.jackson.map.JsonSerializer r6;
        java.lang.IllegalStateException $r7;
        java.lang.StringBuilder $r8;
        java.lang.Class $r9, $r11;
        java.lang.String $r10;
        org.codehaus.jackson.map.SerializationConfig$Feature $r12;

        r3 := @this: org.codehaus.jackson.map.ser.BasicSerializerFactory;

        $r0 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        $r1 := @parameter1: org.codehaus.jackson.map.introspect.Annotated;

        $r2 := @parameter2: org.codehaus.jackson.map.BeanProperty;

        $r4 = virtualinvoke $r0.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.AnnotationIntrospector getAnnotationIntrospector()>();

        $r5 = virtualinvoke $r4.<org.codehaus.jackson.map.AnnotationIntrospector: java.lang.Object findSerializer(org.codehaus.jackson.map.introspect.Annotated,org.codehaus.jackson.map.BeanProperty)>($r1, $r2);

        if $r5 == null goto label4;

        $z0 = $r5 instanceof org.codehaus.jackson.map.JsonSerializer;

        if $z0 == 0 goto label1;

        r6 = (org.codehaus.jackson.map.JsonSerializer) $r5;

        return r6;

     label1:
        $z0 = $r5 instanceof java.lang.Class;

        if $z0 != 0 goto label2;

        $r7 = new java.lang.IllegalStateException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("AnnotationIntrospector returned value of type ");

        $r9 = virtualinvoke $r5.<java.lang.Object: java.lang.Class getClass()>();

        $r10 = virtualinvoke $r9.<java.lang.Class: java.lang.String getName()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; expected type JsonSerializer or Class<JsonSerializer> instead");

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r10);

        throw $r7;

     label2:
        $r9 = (java.lang.Class) $r5;

        $r11 = class "Lorg/codehaus/jackson/map/JsonSerializer;";

        $z0 = virtualinvoke $r11.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r9);

        if $z0 != 0 goto label3;

        $r7 = new java.lang.IllegalStateException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("AnnotationIntrospector returned Class ");

        $r10 = virtualinvoke $r9.<java.lang.Class: java.lang.String getName()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; expected Class<JsonSerializer>");

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r10);

        throw $r7;

     label3:
        $r12 = <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature CAN_OVERRIDE_ACCESS_MODIFIERS>;

        $z0 = virtualinvoke $r0.<org.codehaus.jackson.map.SerializationConfig: boolean isEnabled(org.codehaus.jackson.map.SerializationConfig$Feature)>($r12);

        $r5 = staticinvoke <org.codehaus.jackson.map.util.ClassUtil: java.lang.Object createInstance(java.lang.Class,boolean)>($r9, $z0);

        r6 = (org.codehaus.jackson.map.JsonSerializer) $r5;

        return r6;

     label4:
        return null;
    }

    public final org.codehaus.jackson.map.JsonSerializer getNullSerializer()
    {
        org.codehaus.jackson.map.ser.BasicSerializerFactory r0;
        org.codehaus.jackson.map.ser.NullSerializer r1;

        r0 := @this: org.codehaus.jackson.map.ser.BasicSerializerFactory;

        r1 = <org.codehaus.jackson.map.ser.NullSerializer: org.codehaus.jackson.map.ser.NullSerializer instance>;

        return r1;
    }

    protected boolean usesStaticTyping(org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.map.introspect.BasicBeanDescription, org.codehaus.jackson.map.TypeSerializer)
    {
        org.codehaus.jackson.map.ser.BasicSerializerFactory r0;
        org.codehaus.jackson.map.SerializationConfig $r1;
        org.codehaus.jackson.map.introspect.BasicBeanDescription $r2;
        org.codehaus.jackson.map.TypeSerializer $r3;
        org.codehaus.jackson.map.AnnotationIntrospector $r4;
        org.codehaus.jackson.map.introspect.AnnotatedClass $r5;
        org.codehaus.jackson.map.annotate.JsonSerialize$Typing $r6, $r7;
        org.codehaus.jackson.map.SerializationConfig$Feature $r8;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.ser.BasicSerializerFactory;

        $r1 := @parameter0: org.codehaus.jackson.map.SerializationConfig;

        $r2 := @parameter1: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        $r3 := @parameter2: org.codehaus.jackson.map.TypeSerializer;

        if $r3 == null goto label1;

        return 0;

     label1:
        $r4 = virtualinvoke $r1.<org.codehaus.jackson.map.SerializationConfig: org.codehaus.jackson.map.AnnotationIntrospector getAnnotationIntrospector()>();

        $r5 = virtualinvoke $r2.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.AnnotatedClass getClassInfo()>();

        $r6 = virtualinvoke $r4.<org.codehaus.jackson.map.AnnotationIntrospector: org.codehaus.jackson.map.annotate.JsonSerialize$Typing findSerializationTyping(org.codehaus.jackson.map.introspect.Annotated)>($r5);

        if $r6 == null goto label3;

        $r7 = <org.codehaus.jackson.map.annotate.JsonSerialize$Typing: org.codehaus.jackson.map.annotate.JsonSerialize$Typing STATIC>;

        if $r6 != $r7 goto label2;

        return 1;

     label2:
        return 0;

     label3:
        $r8 = <org.codehaus.jackson.map.SerializationConfig$Feature: org.codehaus.jackson.map.SerializationConfig$Feature USE_STATIC_TYPING>;

        $z0 = virtualinvoke $r1.<org.codehaus.jackson.map.SerializationConfig: boolean isEnabled(org.codehaus.jackson.map.SerializationConfig$Feature)>($r8);

        return $z0;
    }
}
