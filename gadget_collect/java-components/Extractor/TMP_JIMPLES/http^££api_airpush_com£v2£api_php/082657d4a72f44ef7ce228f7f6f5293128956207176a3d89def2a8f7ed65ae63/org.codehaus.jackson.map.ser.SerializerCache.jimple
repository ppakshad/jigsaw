public final class org.codehaus.jackson.map.ser.SerializerCache extends java.lang.Object
{
    private org.codehaus.jackson.map.ser.impl.ReadOnlyClassToSerializerMap _readOnlyMap;
    private java.util.HashMap _sharedMap;

    public void <init>()
    {
        org.codehaus.jackson.map.ser.SerializerCache r0;
        java.util.HashMap $r1;

        r0 := @this: org.codehaus.jackson.map.ser.SerializerCache;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>(int)>(64);

        r0.<org.codehaus.jackson.map.ser.SerializerCache: java.util.HashMap _sharedMap> = $r1;

        r0.<org.codehaus.jackson.map.ser.SerializerCache: org.codehaus.jackson.map.ser.impl.ReadOnlyClassToSerializerMap _readOnlyMap> = null;

        return;
    }

    public void addNonTypedSerializer(java.lang.Class, org.codehaus.jackson.map.JsonSerializer)
    {
        org.codehaus.jackson.map.ser.SerializerCache r0;
        java.lang.Class r1;
        org.codehaus.jackson.map.JsonSerializer r2;
        org.codehaus.jackson.map.ser.SerializerCache$TypeKey $r3;
        java.lang.Object $r4;
        java.util.HashMap $r5;
        java.lang.Throwable $r6;

        r0 := @this: org.codehaus.jackson.map.ser.SerializerCache;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: org.codehaus.jackson.map.JsonSerializer;

        entermonitor r0;

     label1:
        $r5 = r0.<org.codehaus.jackson.map.ser.SerializerCache: java.util.HashMap _sharedMap>;

        $r3 = new org.codehaus.jackson.map.ser.SerializerCache$TypeKey;

        specialinvoke $r3.<org.codehaus.jackson.map.ser.SerializerCache$TypeKey: void <init>(java.lang.Class,boolean)>(r1, 0);

        $r4 = virtualinvoke $r5.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, r2);

        if $r4 != null goto label2;

        r0.<org.codehaus.jackson.map.ser.SerializerCache: org.codehaus.jackson.map.ser.impl.ReadOnlyClassToSerializerMap _readOnlyMap> = null;

     label2:
        exitmonitor r0;

     label3:
        return;

     label4:
        $r6 := @caughtexception;

        exitmonitor r0;

     label5:
        throw $r6;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void addNonTypedSerializer(org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.JsonSerializer)
    {
        org.codehaus.jackson.map.ser.SerializerCache r0;
        org.codehaus.jackson.type.JavaType $r1;
        org.codehaus.jackson.map.JsonSerializer r2;
        org.codehaus.jackson.map.ser.SerializerCache$TypeKey $r3;
        java.lang.Object $r4;
        java.util.HashMap $r5;
        java.lang.Throwable $r6;

        r0 := @this: org.codehaus.jackson.map.ser.SerializerCache;

        $r1 := @parameter0: org.codehaus.jackson.type.JavaType;

        r2 := @parameter1: org.codehaus.jackson.map.JsonSerializer;

        entermonitor r0;

     label1:
        $r5 = r0.<org.codehaus.jackson.map.ser.SerializerCache: java.util.HashMap _sharedMap>;

        $r3 = new org.codehaus.jackson.map.ser.SerializerCache$TypeKey;

        specialinvoke $r3.<org.codehaus.jackson.map.ser.SerializerCache$TypeKey: void <init>(org.codehaus.jackson.type.JavaType,boolean)>($r1, 0);

        $r4 = virtualinvoke $r5.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, r2);

        if $r4 != null goto label2;

        r0.<org.codehaus.jackson.map.ser.SerializerCache: org.codehaus.jackson.map.ser.impl.ReadOnlyClassToSerializerMap _readOnlyMap> = null;

     label2:
        exitmonitor r0;

     label3:
        return;

     label4:
        $r6 := @caughtexception;

        exitmonitor r0;

     label5:
        throw $r6;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void addTypedSerializer(java.lang.Class, org.codehaus.jackson.map.JsonSerializer)
    {
        org.codehaus.jackson.map.ser.SerializerCache r0;
        java.lang.Class r1;
        org.codehaus.jackson.map.JsonSerializer r2;
        org.codehaus.jackson.map.ser.SerializerCache$TypeKey $r3;
        java.lang.Object $r4;
        java.util.HashMap $r5;
        java.lang.Throwable $r6;

        r0 := @this: org.codehaus.jackson.map.ser.SerializerCache;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: org.codehaus.jackson.map.JsonSerializer;

        entermonitor r0;

     label1:
        $r5 = r0.<org.codehaus.jackson.map.ser.SerializerCache: java.util.HashMap _sharedMap>;

        $r3 = new org.codehaus.jackson.map.ser.SerializerCache$TypeKey;

        specialinvoke $r3.<org.codehaus.jackson.map.ser.SerializerCache$TypeKey: void <init>(java.lang.Class,boolean)>(r1, 1);

        $r4 = virtualinvoke $r5.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, r2);

        if $r4 != null goto label2;

        r0.<org.codehaus.jackson.map.ser.SerializerCache: org.codehaus.jackson.map.ser.impl.ReadOnlyClassToSerializerMap _readOnlyMap> = null;

     label2:
        exitmonitor r0;

     label3:
        return;

     label4:
        $r6 := @caughtexception;

        exitmonitor r0;

     label5:
        throw $r6;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void addTypedSerializer(org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.JsonSerializer)
    {
        org.codehaus.jackson.map.ser.SerializerCache r0;
        org.codehaus.jackson.type.JavaType $r1;
        org.codehaus.jackson.map.JsonSerializer r2;
        org.codehaus.jackson.map.ser.SerializerCache$TypeKey $r3;
        java.lang.Object $r4;
        java.util.HashMap $r5;
        java.lang.Throwable $r6;

        r0 := @this: org.codehaus.jackson.map.ser.SerializerCache;

        $r1 := @parameter0: org.codehaus.jackson.type.JavaType;

        r2 := @parameter1: org.codehaus.jackson.map.JsonSerializer;

        entermonitor r0;

     label1:
        $r5 = r0.<org.codehaus.jackson.map.ser.SerializerCache: java.util.HashMap _sharedMap>;

        $r3 = new org.codehaus.jackson.map.ser.SerializerCache$TypeKey;

        specialinvoke $r3.<org.codehaus.jackson.map.ser.SerializerCache$TypeKey: void <init>(org.codehaus.jackson.type.JavaType,boolean)>($r1, 1);

        $r4 = virtualinvoke $r5.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, r2);

        if $r4 != null goto label2;

        r0.<org.codehaus.jackson.map.ser.SerializerCache: org.codehaus.jackson.map.ser.impl.ReadOnlyClassToSerializerMap _readOnlyMap> = null;

     label2:
        exitmonitor r0;

     label3:
        return;

     label4:
        $r6 := @caughtexception;

        exitmonitor r0;

     label5:
        throw $r6;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void flush()
    {
        org.codehaus.jackson.map.ser.SerializerCache r0;
        java.util.HashMap $r1;
        java.lang.Throwable $r2;

        r0 := @this: org.codehaus.jackson.map.ser.SerializerCache;

        entermonitor r0;

     label1:
        $r1 = r0.<org.codehaus.jackson.map.ser.SerializerCache: java.util.HashMap _sharedMap>;

        virtualinvoke $r1.<java.util.HashMap: void clear()>();

     label2:
        exitmonitor r0;

        return;

     label3:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public org.codehaus.jackson.map.ser.impl.ReadOnlyClassToSerializerMap getReadOnlyLookupMap()
    {
        org.codehaus.jackson.map.ser.SerializerCache r0;
        org.codehaus.jackson.map.ser.impl.ReadOnlyClassToSerializerMap r1, $r3;
        java.util.HashMap $r2;
        java.lang.Throwable $r4;

        r0 := @this: org.codehaus.jackson.map.ser.SerializerCache;

        entermonitor r0;

     label1:
        r1 = r0.<org.codehaus.jackson.map.ser.SerializerCache: org.codehaus.jackson.map.ser.impl.ReadOnlyClassToSerializerMap _readOnlyMap>;

        if r1 != null goto label2;

        $r2 = r0.<org.codehaus.jackson.map.ser.SerializerCache: java.util.HashMap _sharedMap>;

        $r3 = staticinvoke <org.codehaus.jackson.map.ser.impl.ReadOnlyClassToSerializerMap: org.codehaus.jackson.map.ser.impl.ReadOnlyClassToSerializerMap 'from'(java.util.HashMap)>($r2);

        r1 = $r3;

        r0.<org.codehaus.jackson.map.ser.SerializerCache: org.codehaus.jackson.map.ser.impl.ReadOnlyClassToSerializerMap _readOnlyMap> = $r3;

     label2:
        exitmonitor r0;

     label3:
        r1 = virtualinvoke r1.<org.codehaus.jackson.map.ser.impl.ReadOnlyClassToSerializerMap: org.codehaus.jackson.map.ser.impl.ReadOnlyClassToSerializerMap instance()>();

        return r1;

     label4:
        $r4 := @caughtexception;

     label5:
        exitmonitor r0;

     label6:
        throw $r4;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public int size()
    {
        org.codehaus.jackson.map.ser.SerializerCache r0;
        int $i0;
        java.util.HashMap $r1;
        java.lang.Throwable $r2;

        r0 := @this: org.codehaus.jackson.map.ser.SerializerCache;

        entermonitor r0;

     label1:
        $r1 = r0.<org.codehaus.jackson.map.ser.SerializerCache: java.util.HashMap _sharedMap>;

        $i0 = virtualinvoke $r1.<java.util.HashMap: int size()>();

     label2:
        exitmonitor r0;

        return $i0;

     label3:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public org.codehaus.jackson.map.JsonSerializer typedValueSerializer(java.lang.Class)
    {
        org.codehaus.jackson.map.ser.SerializerCache r0;
        java.lang.Class r1;
        org.codehaus.jackson.map.ser.SerializerCache$TypeKey $r2;
        java.lang.Object $r3;
        java.util.HashMap $r4;
        org.codehaus.jackson.map.JsonSerializer $r5;
        java.lang.Throwable $r6;

        r0 := @this: org.codehaus.jackson.map.ser.SerializerCache;

        r1 := @parameter0: java.lang.Class;

        entermonitor r0;

     label1:
        $r4 = r0.<org.codehaus.jackson.map.ser.SerializerCache: java.util.HashMap _sharedMap>;

        $r2 = new org.codehaus.jackson.map.ser.SerializerCache$TypeKey;

        specialinvoke $r2.<org.codehaus.jackson.map.ser.SerializerCache$TypeKey: void <init>(java.lang.Class,boolean)>(r1, 1);

        $r3 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r2);

        $r5 = (org.codehaus.jackson.map.JsonSerializer) $r3;

        exitmonitor r0;

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        exitmonitor r0;

     label4:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public org.codehaus.jackson.map.JsonSerializer typedValueSerializer(org.codehaus.jackson.type.JavaType)
    {
        org.codehaus.jackson.map.ser.SerializerCache r0;
        org.codehaus.jackson.type.JavaType $r1;
        org.codehaus.jackson.map.ser.SerializerCache$TypeKey $r2;
        java.lang.Object $r3;
        java.util.HashMap $r4;
        org.codehaus.jackson.map.JsonSerializer $r5;
        java.lang.Throwable $r6;

        r0 := @this: org.codehaus.jackson.map.ser.SerializerCache;

        $r1 := @parameter0: org.codehaus.jackson.type.JavaType;

        entermonitor r0;

     label1:
        $r4 = r0.<org.codehaus.jackson.map.ser.SerializerCache: java.util.HashMap _sharedMap>;

        $r2 = new org.codehaus.jackson.map.ser.SerializerCache$TypeKey;

        specialinvoke $r2.<org.codehaus.jackson.map.ser.SerializerCache$TypeKey: void <init>(org.codehaus.jackson.type.JavaType,boolean)>($r1, 1);

        $r3 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r2);

        $r5 = (org.codehaus.jackson.map.JsonSerializer) $r3;

        exitmonitor r0;

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        exitmonitor r0;

     label4:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public org.codehaus.jackson.map.JsonSerializer untypedValueSerializer(java.lang.Class)
    {
        org.codehaus.jackson.map.ser.SerializerCache r0;
        java.lang.Class r1;
        org.codehaus.jackson.map.ser.SerializerCache$TypeKey $r2;
        java.lang.Object $r3;
        java.util.HashMap $r4;
        org.codehaus.jackson.map.JsonSerializer $r5;
        java.lang.Throwable $r6;

        r0 := @this: org.codehaus.jackson.map.ser.SerializerCache;

        r1 := @parameter0: java.lang.Class;

        entermonitor r0;

     label1:
        $r4 = r0.<org.codehaus.jackson.map.ser.SerializerCache: java.util.HashMap _sharedMap>;

        $r2 = new org.codehaus.jackson.map.ser.SerializerCache$TypeKey;

        specialinvoke $r2.<org.codehaus.jackson.map.ser.SerializerCache$TypeKey: void <init>(java.lang.Class,boolean)>(r1, 0);

        $r3 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r2);

        $r5 = (org.codehaus.jackson.map.JsonSerializer) $r3;

        exitmonitor r0;

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        exitmonitor r0;

     label4:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public org.codehaus.jackson.map.JsonSerializer untypedValueSerializer(org.codehaus.jackson.type.JavaType)
    {
        org.codehaus.jackson.map.ser.SerializerCache r0;
        org.codehaus.jackson.type.JavaType $r1;
        org.codehaus.jackson.map.ser.SerializerCache$TypeKey $r2;
        java.lang.Object $r3;
        java.util.HashMap $r4;
        org.codehaus.jackson.map.JsonSerializer $r5;
        java.lang.Throwable $r6;

        r0 := @this: org.codehaus.jackson.map.ser.SerializerCache;

        $r1 := @parameter0: org.codehaus.jackson.type.JavaType;

        entermonitor r0;

     label1:
        $r4 = r0.<org.codehaus.jackson.map.ser.SerializerCache: java.util.HashMap _sharedMap>;

        $r2 = new org.codehaus.jackson.map.ser.SerializerCache$TypeKey;

        specialinvoke $r2.<org.codehaus.jackson.map.ser.SerializerCache$TypeKey: void <init>(org.codehaus.jackson.type.JavaType,boolean)>($r1, 0);

        $r3 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r2);

        $r5 = (org.codehaus.jackson.map.JsonSerializer) $r3;

        exitmonitor r0;

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        exitmonitor r0;

     label4:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }
}
