public class org.codehaus.jackson.map.deser.UntypedObjectDeserializer extends org.codehaus.jackson.map.deser.StdDeserializer
{

    public void <init>()
    {
        org.codehaus.jackson.map.deser.UntypedObjectDeserializer r0;

        r0 := @this: org.codehaus.jackson.map.deser.UntypedObjectDeserializer;

        specialinvoke r0.<org.codehaus.jackson.map.deser.StdDeserializer: void <init>(java.lang.Class)>(class "Ljava/lang/Object;");

        return;
    }

    public java.lang.Object deserialize(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.map.deser.UntypedObjectDeserializer r0;
        org.codehaus.jackson.JsonParser $r1;
        org.codehaus.jackson.map.DeserializationContext $r2;
        int[] $r3;
        org.codehaus.jackson.JsonToken $r4;
        int $i0;
        org.codehaus.jackson.map.JsonMappingException $r5;
        java.lang.String $r6;
        org.codehaus.jackson.map.DeserializationConfig$Feature $r7;
        boolean $z0;
        java.math.BigInteger $r8;
        java.lang.Number $r9;
        java.math.BigDecimal $r10;
        double $d0;
        java.lang.Double $r11;
        java.lang.Object $r12;
        java.util.List $r13;
        java.util.Map $r14;
        java.lang.Boolean r15;

        r0 := @this: org.codehaus.jackson.map.deser.UntypedObjectDeserializer;

        $r1 := @parameter0: org.codehaus.jackson.JsonParser;

        $r2 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        $r3 = <org.codehaus.jackson.map.deser.UntypedObjectDeserializer$1: int[] $SwitchMap$org$codehaus$jackson$JsonToken>;

        $r4 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken getCurrentToken()>();

        $i0 = virtualinvoke $r4.<org.codehaus.jackson.JsonToken: int ordinal()>();

        $i0 = $r3[$i0];

        lookupswitch($i0)
        {
            case 1: goto label02;
            case 2: goto label03;
            case 3: goto label05;
            case 4: goto label07;
            case 5: goto label08;
            case 6: goto label09;
            case 7: goto label10;
            case 8: goto label11;
            case 9: goto label12;
            case 10: goto label12;
            default: goto label01;
        };

     label01:
        $r5 = virtualinvoke $r2.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.JsonMappingException mappingException(java.lang.Class)>(class "Ljava/lang/Object;");

        throw $r5;

     label02:
        $r6 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: java.lang.String getText()>();

        return $r6;

     label03:
        $r7 = <org.codehaus.jackson.map.DeserializationConfig$Feature: org.codehaus.jackson.map.DeserializationConfig$Feature USE_BIG_INTEGER_FOR_INTS>;

        $z0 = virtualinvoke $r2.<org.codehaus.jackson.map.DeserializationContext: boolean isEnabled(org.codehaus.jackson.map.DeserializationConfig$Feature)>($r7);

        if $z0 == 0 goto label04;

        $r8 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: java.math.BigInteger getBigIntegerValue()>();

        return $r8;

     label04:
        $r9 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: java.lang.Number getNumberValue()>();

        return $r9;

     label05:
        $r7 = <org.codehaus.jackson.map.DeserializationConfig$Feature: org.codehaus.jackson.map.DeserializationConfig$Feature USE_BIG_DECIMAL_FOR_FLOATS>;

        $z0 = virtualinvoke $r2.<org.codehaus.jackson.map.DeserializationContext: boolean isEnabled(org.codehaus.jackson.map.DeserializationConfig$Feature)>($r7);

        if $z0 == 0 goto label06;

        $r10 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: java.math.BigDecimal getDecimalValue()>();

        return $r10;

     label06:
        $d0 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: double getDoubleValue()>();

        $r11 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        return $r11;

     label07:
        r15 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        return r15;

     label08:
        r15 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        return r15;

     label09:
        $r12 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: java.lang.Object getEmbeddedObject()>();

        return $r12;

     label10:
        return null;

     label11:
        $r13 = virtualinvoke r0.<org.codehaus.jackson.map.deser.UntypedObjectDeserializer: java.util.List mapArray(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>($r1, $r2);

        return $r13;

     label12:
        $r14 = virtualinvoke r0.<org.codehaus.jackson.map.deser.UntypedObjectDeserializer: java.util.Map mapObject(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>($r1, $r2);

        return $r14;
    }

    public java.lang.Object deserializeWithType(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext, org.codehaus.jackson.map.TypeDeserializer) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.map.deser.UntypedObjectDeserializer r0;
        org.codehaus.jackson.JsonParser $r1;
        org.codehaus.jackson.map.DeserializationContext $r2;
        org.codehaus.jackson.map.TypeDeserializer $r3;
        org.codehaus.jackson.JsonToken $r4;
        int[] $r5;
        int $i0;
        org.codehaus.jackson.map.JsonMappingException $r6;
        java.lang.Object $r7;
        java.lang.String $r8;
        org.codehaus.jackson.map.DeserializationConfig$Feature $r9;
        boolean $z0;
        java.math.BigInteger $r10;
        java.lang.Integer $r11;
        java.math.BigDecimal $r12;
        double $d0;
        java.lang.Double $r13;
        java.lang.Boolean r14;

        r0 := @this: org.codehaus.jackson.map.deser.UntypedObjectDeserializer;

        $r1 := @parameter0: org.codehaus.jackson.JsonParser;

        $r2 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        $r3 := @parameter2: org.codehaus.jackson.map.TypeDeserializer;

        $r4 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken getCurrentToken()>();

        $r5 = <org.codehaus.jackson.map.deser.UntypedObjectDeserializer$1: int[] $SwitchMap$org$codehaus$jackson$JsonToken>;

        $i0 = virtualinvoke $r4.<org.codehaus.jackson.JsonToken: int ordinal()>();

        $i0 = $r5[$i0];

        lookupswitch($i0)
        {
            case 1: goto label03;
            case 2: goto label04;
            case 3: goto label06;
            case 4: goto label08;
            case 5: goto label09;
            case 6: goto label10;
            case 7: goto label11;
            case 8: goto label02;
            case 9: goto label02;
            case 10: goto label02;
            default: goto label01;
        };

     label01:
        $r6 = virtualinvoke $r2.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.JsonMappingException mappingException(java.lang.Class)>(class "Ljava/lang/Object;");

        throw $r6;

     label02:
        $r7 = virtualinvoke $r3.<org.codehaus.jackson.map.TypeDeserializer: java.lang.Object deserializeTypedFromAny(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>($r1, $r2);

        return $r7;

     label03:
        $r8 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: java.lang.String getText()>();

        return $r8;

     label04:
        $r9 = <org.codehaus.jackson.map.DeserializationConfig$Feature: org.codehaus.jackson.map.DeserializationConfig$Feature USE_BIG_INTEGER_FOR_INTS>;

        $z0 = virtualinvoke $r2.<org.codehaus.jackson.map.DeserializationContext: boolean isEnabled(org.codehaus.jackson.map.DeserializationConfig$Feature)>($r9);

        if $z0 == 0 goto label05;

        $r10 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: java.math.BigInteger getBigIntegerValue()>();

        return $r10;

     label05:
        $i0 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: int getIntValue()>();

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        return $r11;

     label06:
        $r9 = <org.codehaus.jackson.map.DeserializationConfig$Feature: org.codehaus.jackson.map.DeserializationConfig$Feature USE_BIG_DECIMAL_FOR_FLOATS>;

        $z0 = virtualinvoke $r2.<org.codehaus.jackson.map.DeserializationContext: boolean isEnabled(org.codehaus.jackson.map.DeserializationConfig$Feature)>($r9);

        if $z0 == 0 goto label07;

        $r12 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: java.math.BigDecimal getDecimalValue()>();

        return $r12;

     label07:
        $d0 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: double getDoubleValue()>();

        $r13 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        return $r13;

     label08:
        r14 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        return r14;

     label09:
        r14 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        return r14;

     label10:
        $r7 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: java.lang.Object getEmbeddedObject()>();

        return $r7;

     label11:
        return null;
    }

    protected java.util.List mapArray(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.map.deser.UntypedObjectDeserializer r0;
        org.codehaus.jackson.JsonParser $r1;
        org.codehaus.jackson.map.DeserializationContext $r2;
        int i0, i1, i2;
        java.util.ArrayList r3;
        org.codehaus.jackson.JsonToken $r4, $r5;
        org.codehaus.jackson.map.util.ObjectBuffer $r6;
        java.lang.Object[] $r7;
        java.lang.Object $r8;

        r0 := @this: org.codehaus.jackson.map.deser.UntypedObjectDeserializer;

        $r1 := @parameter0: org.codehaus.jackson.JsonParser;

        $r2 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        $r4 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken nextToken()>();

        $r5 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken END_ARRAY>;

        if $r4 != $r5 goto label1;

        r3 = new java.util.ArrayList;

        specialinvoke r3.<java.util.ArrayList: void <init>(int)>(4);

        return r3;

     label1:
        $r6 = virtualinvoke $r2.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.util.ObjectBuffer leaseObjectBuffer()>();

        $r7 = virtualinvoke $r6.<org.codehaus.jackson.map.util.ObjectBuffer: java.lang.Object[] resetAndStart()>();

        i1 = 0;

        i2 = 0;

     label2:
        $r8 = virtualinvoke r0.<org.codehaus.jackson.map.deser.UntypedObjectDeserializer: java.lang.Object deserialize(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>($r1, $r2);

        i2 = i2 + 1;

        i0 = lengthof $r7;

        if i1 < i0 goto label3;

        $r7 = virtualinvoke $r6.<org.codehaus.jackson.map.util.ObjectBuffer: java.lang.Object[] appendCompletedChunk(java.lang.Object[])>($r7);

        i1 = 0;

     label3:
        i0 = i1 + 1;

        $r7[i1] = $r8;

        $r4 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken nextToken()>();

        $r5 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken END_ARRAY>;

        if $r4 != $r5 goto label4;

        r3 = new java.util.ArrayList;

        i1 = i2 >> 3;

        i2 = i1 + i2;

        i2 = i2 + 1;

        specialinvoke r3.<java.util.ArrayList: void <init>(int)>(i2);

        virtualinvoke $r6.<org.codehaus.jackson.map.util.ObjectBuffer: void completeAndClearBuffer(java.lang.Object[],int,java.util.List)>($r7, i0, r3);

        return r3;

     label4:
        i1 = i0;

        goto label2;
    }

    protected java.util.Map mapObject(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.map.deser.UntypedObjectDeserializer r0;
        org.codehaus.jackson.JsonParser $r1;
        org.codehaus.jackson.map.DeserializationContext $r2;
        org.codehaus.jackson.JsonToken $r3, r4, $r5;
        java.util.LinkedHashMap $r6;
        java.lang.String $r7, $r9;
        java.lang.Object $r8, $r10;

        r0 := @this: org.codehaus.jackson.map.deser.UntypedObjectDeserializer;

        $r1 := @parameter0: org.codehaus.jackson.JsonParser;

        $r2 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        $r3 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken getCurrentToken()>();

        r4 = $r3;

        $r5 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken START_OBJECT>;

        if $r3 != $r5 goto label1;

        r4 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken nextToken()>();

     label1:
        $r3 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken FIELD_NAME>;

        if r4 == $r3 goto label2;

        $r6 = new java.util.LinkedHashMap;

        specialinvoke $r6.<java.util.LinkedHashMap: void <init>(int)>(4);

        return $r6;

     label2:
        $r7 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: java.lang.String getText()>();

        virtualinvoke $r1.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken nextToken()>();

        $r8 = virtualinvoke r0.<org.codehaus.jackson.map.deser.UntypedObjectDeserializer: java.lang.Object deserialize(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>($r1, $r2);

        r4 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken nextToken()>();

        $r3 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken FIELD_NAME>;

        if r4 == $r3 goto label3;

        $r6 = new java.util.LinkedHashMap;

        specialinvoke $r6.<java.util.LinkedHashMap: void <init>(int)>(4);

        virtualinvoke $r6.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r8);

        return $r6;

     label3:
        $r9 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: java.lang.String getText()>();

        virtualinvoke $r1.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken nextToken()>();

        $r10 = virtualinvoke r0.<org.codehaus.jackson.map.deser.UntypedObjectDeserializer: java.lang.Object deserialize(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>($r1, $r2);

        r4 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken nextToken()>();

        $r3 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken FIELD_NAME>;

        if r4 == $r3 goto label4;

        $r6 = new java.util.LinkedHashMap;

        specialinvoke $r6.<java.util.LinkedHashMap: void <init>(int)>(4);

        virtualinvoke $r6.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r8);

        virtualinvoke $r6.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r10);

        return $r6;

     label4:
        $r6 = new java.util.LinkedHashMap;

        specialinvoke $r6.<java.util.LinkedHashMap: void <init>()>();

        virtualinvoke $r6.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r8);

        virtualinvoke $r6.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r10);

     label5:
        $r7 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: java.lang.String getText()>();

        virtualinvoke $r1.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken nextToken()>();

        $r8 = virtualinvoke r0.<org.codehaus.jackson.map.deser.UntypedObjectDeserializer: java.lang.Object deserialize(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>($r1, $r2);

        virtualinvoke $r6.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r8);

        r4 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken nextToken()>();

        $r3 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken END_OBJECT>;

        if r4 != $r3 goto label5;

        return $r6;
    }
}
