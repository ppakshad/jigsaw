public class org.codehaus.jackson.map.DeserializationConfig extends java.lang.Object implements org.codehaus.jackson.map.MapperConfig
{
    protected static final java.text.DateFormat DEFAULT_DATE_FORMAT;
    protected static final int DEFAULT_FEATURE_FLAGS;
    protected org.codehaus.jackson.map.AbstractTypeResolver _abstractTypeResolver;
    protected org.codehaus.jackson.map.AnnotationIntrospector _annotationIntrospector;
    protected org.codehaus.jackson.map.ClassIntrospector _classIntrospector;
    protected java.text.DateFormat _dateFormat;
    protected int _featureFlags;
    protected java.util.HashMap _mixInAnnotations;
    protected boolean _mixInAnnotationsShared;
    protected org.codehaus.jackson.node.JsonNodeFactory _nodeFactory;
    protected org.codehaus.jackson.map.util.LinkedNode _problemHandlers;
    protected org.codehaus.jackson.map.jsontype.SubtypeResolver _subtypeResolver;
    protected final org.codehaus.jackson.map.jsontype.TypeResolverBuilder _typer;
    protected org.codehaus.jackson.map.introspect.VisibilityChecker _visibilityChecker;

    static void <clinit>()
    {
        int $i0;
        org.codehaus.jackson.map.util.StdDateFormat $r0;

        $i0 = staticinvoke <org.codehaus.jackson.map.DeserializationConfig$Feature: int collectDefaults()>();

        <org.codehaus.jackson.map.DeserializationConfig: int DEFAULT_FEATURE_FLAGS> = $i0;

        $r0 = <org.codehaus.jackson.map.util.StdDateFormat: org.codehaus.jackson.map.util.StdDateFormat instance>;

        <org.codehaus.jackson.map.DeserializationConfig: java.text.DateFormat DEFAULT_DATE_FORMAT> = $r0;

        return;
    }

    public void <init>(org.codehaus.jackson.map.ClassIntrospector, org.codehaus.jackson.map.AnnotationIntrospector, org.codehaus.jackson.map.introspect.VisibilityChecker, org.codehaus.jackson.map.jsontype.SubtypeResolver)
    {
        org.codehaus.jackson.map.DeserializationConfig r0;
        org.codehaus.jackson.map.ClassIntrospector r1;
        org.codehaus.jackson.map.AnnotationIntrospector $r2;
        org.codehaus.jackson.map.introspect.VisibilityChecker r3;
        org.codehaus.jackson.map.jsontype.SubtypeResolver $r4;
        int $i0;
        java.text.DateFormat $r5;
        org.codehaus.jackson.node.JsonNodeFactory $r6;

        r0 := @this: org.codehaus.jackson.map.DeserializationConfig;

        r1 := @parameter0: org.codehaus.jackson.map.ClassIntrospector;

        $r2 := @parameter1: org.codehaus.jackson.map.AnnotationIntrospector;

        r3 := @parameter2: org.codehaus.jackson.map.introspect.VisibilityChecker;

        $r4 := @parameter3: org.codehaus.jackson.map.jsontype.SubtypeResolver;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = <org.codehaus.jackson.map.DeserializationConfig: int DEFAULT_FEATURE_FLAGS>;

        r0.<org.codehaus.jackson.map.DeserializationConfig: int _featureFlags> = $i0;

        $r5 = <org.codehaus.jackson.map.DeserializationConfig: java.text.DateFormat DEFAULT_DATE_FORMAT>;

        r0.<org.codehaus.jackson.map.DeserializationConfig: java.text.DateFormat _dateFormat> = $r5;

        r0.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.map.ClassIntrospector _classIntrospector> = r1;

        r0.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.map.AnnotationIntrospector _annotationIntrospector> = $r2;

        r0.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.map.jsontype.TypeResolverBuilder _typer> = null;

        r0.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.map.introspect.VisibilityChecker _visibilityChecker> = r3;

        r0.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.map.jsontype.SubtypeResolver _subtypeResolver> = $r4;

        $r6 = <org.codehaus.jackson.node.JsonNodeFactory: org.codehaus.jackson.node.JsonNodeFactory instance>;

        r0.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.node.JsonNodeFactory _nodeFactory> = $r6;

        return;
    }

    protected void <init>(org.codehaus.jackson.map.DeserializationConfig, java.util.HashMap, org.codehaus.jackson.map.jsontype.TypeResolverBuilder, org.codehaus.jackson.map.introspect.VisibilityChecker, org.codehaus.jackson.map.jsontype.SubtypeResolver)
    {
        org.codehaus.jackson.map.DeserializationConfig r0, $r1;
        java.util.HashMap r2;
        org.codehaus.jackson.map.jsontype.TypeResolverBuilder r3;
        org.codehaus.jackson.map.introspect.VisibilityChecker r4;
        org.codehaus.jackson.map.jsontype.SubtypeResolver $r5;
        int $i0;
        java.text.DateFormat $r6;
        org.codehaus.jackson.map.ClassIntrospector $r7;
        org.codehaus.jackson.map.AnnotationIntrospector $r8;
        org.codehaus.jackson.map.AbstractTypeResolver $r9;
        org.codehaus.jackson.map.util.LinkedNode $r10;
        org.codehaus.jackson.node.JsonNodeFactory $r11;

        r0 := @this: org.codehaus.jackson.map.DeserializationConfig;

        $r1 := @parameter0: org.codehaus.jackson.map.DeserializationConfig;

        r2 := @parameter1: java.util.HashMap;

        r3 := @parameter2: org.codehaus.jackson.map.jsontype.TypeResolverBuilder;

        r4 := @parameter3: org.codehaus.jackson.map.introspect.VisibilityChecker;

        $r5 := @parameter4: org.codehaus.jackson.map.jsontype.SubtypeResolver;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = <org.codehaus.jackson.map.DeserializationConfig: int DEFAULT_FEATURE_FLAGS>;

        r0.<org.codehaus.jackson.map.DeserializationConfig: int _featureFlags> = $i0;

        $r6 = <org.codehaus.jackson.map.DeserializationConfig: java.text.DateFormat DEFAULT_DATE_FORMAT>;

        r0.<org.codehaus.jackson.map.DeserializationConfig: java.text.DateFormat _dateFormat> = $r6;

        $r7 = $r1.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.map.ClassIntrospector _classIntrospector>;

        r0.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.map.ClassIntrospector _classIntrospector> = $r7;

        $r8 = $r1.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.map.AnnotationIntrospector _annotationIntrospector>;

        r0.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.map.AnnotationIntrospector _annotationIntrospector> = $r8;

        $r9 = $r1.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.map.AbstractTypeResolver _abstractTypeResolver>;

        r0.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.map.AbstractTypeResolver _abstractTypeResolver> = $r9;

        $i0 = $r1.<org.codehaus.jackson.map.DeserializationConfig: int _featureFlags>;

        r0.<org.codehaus.jackson.map.DeserializationConfig: int _featureFlags> = $i0;

        $r10 = $r1.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.map.util.LinkedNode _problemHandlers>;

        r0.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.map.util.LinkedNode _problemHandlers> = $r10;

        $r6 = $r1.<org.codehaus.jackson.map.DeserializationConfig: java.text.DateFormat _dateFormat>;

        r0.<org.codehaus.jackson.map.DeserializationConfig: java.text.DateFormat _dateFormat> = $r6;

        $r11 = $r1.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.node.JsonNodeFactory _nodeFactory>;

        r0.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.node.JsonNodeFactory _nodeFactory> = $r11;

        r0.<org.codehaus.jackson.map.DeserializationConfig: java.util.HashMap _mixInAnnotations> = r2;

        r0.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.map.jsontype.TypeResolverBuilder _typer> = r3;

        r0.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.map.introspect.VisibilityChecker _visibilityChecker> = r4;

        r0.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.map.jsontype.SubtypeResolver _subtypeResolver> = $r5;

        return;
    }

    public void addHandler(org.codehaus.jackson.map.DeserializationProblemHandler)
    {
        org.codehaus.jackson.map.DeserializationConfig r0;
        org.codehaus.jackson.map.DeserializationProblemHandler $r1;
        org.codehaus.jackson.map.util.LinkedNode $r2, $r3;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.DeserializationConfig;

        $r1 := @parameter0: org.codehaus.jackson.map.DeserializationProblemHandler;

        $r2 = r0.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.map.util.LinkedNode _problemHandlers>;

        $z0 = staticinvoke <org.codehaus.jackson.map.util.LinkedNode: boolean contains(org.codehaus.jackson.map.util.LinkedNode,java.lang.Object)>($r2, $r1);

        if $z0 != 0 goto label1;

        $r3 = new org.codehaus.jackson.map.util.LinkedNode;

        $r2 = r0.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.map.util.LinkedNode _problemHandlers>;

        specialinvoke $r3.<org.codehaus.jackson.map.util.LinkedNode: void <init>(java.lang.Object,org.codehaus.jackson.map.util.LinkedNode)>($r1, $r2);

        r0.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.map.util.LinkedNode _problemHandlers> = $r3;

     label1:
        return;
    }

    public void addMixInAnnotations(java.lang.Class, java.lang.Class)
    {
        org.codehaus.jackson.map.DeserializationConfig r0;
        java.lang.Class r1, r2;
        org.codehaus.jackson.map.type.ClassKey $r3;
        java.util.HashMap $r4;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.DeserializationConfig;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.Class;

        $r4 = r0.<org.codehaus.jackson.map.DeserializationConfig: java.util.HashMap _mixInAnnotations>;

        if $r4 == null goto label1;

        $z0 = r0.<org.codehaus.jackson.map.DeserializationConfig: boolean _mixInAnnotationsShared>;

        if $z0 == 0 goto label2;

     label1:
        r0.<org.codehaus.jackson.map.DeserializationConfig: boolean _mixInAnnotationsShared> = 0;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        r0.<org.codehaus.jackson.map.DeserializationConfig: java.util.HashMap _mixInAnnotations> = $r4;

     label2:
        $r4 = r0.<org.codehaus.jackson.map.DeserializationConfig: java.util.HashMap _mixInAnnotations>;

        $r3 = new org.codehaus.jackson.map.type.ClassKey;

        specialinvoke $r3.<org.codehaus.jackson.map.type.ClassKey: void <init>(java.lang.Class)>(r1);

        virtualinvoke $r4.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, r2);

        return;
    }

    public void appendAnnotationIntrospector(org.codehaus.jackson.map.AnnotationIntrospector)
    {
        org.codehaus.jackson.map.DeserializationConfig r0;
        org.codehaus.jackson.map.AnnotationIntrospector $r1, $r2;

        r0 := @this: org.codehaus.jackson.map.DeserializationConfig;

        $r1 := @parameter0: org.codehaus.jackson.map.AnnotationIntrospector;

        $r2 = r0.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.map.AnnotationIntrospector _annotationIntrospector>;

        $r1 = staticinvoke <org.codehaus.jackson.map.AnnotationIntrospector$Pair: org.codehaus.jackson.map.AnnotationIntrospector create(org.codehaus.jackson.map.AnnotationIntrospector,org.codehaus.jackson.map.AnnotationIntrospector)>($r2, $r1);

        r0.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.map.AnnotationIntrospector _annotationIntrospector> = $r1;

        return;
    }

    public void clearHandlers()
    {
        org.codehaus.jackson.map.DeserializationConfig r0;

        r0 := @this: org.codehaus.jackson.map.DeserializationConfig;

        r0.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.map.util.LinkedNode _problemHandlers> = null;

        return;
    }

    public org.codehaus.jackson.map.DeserializationConfig createUnshared(org.codehaus.jackson.map.jsontype.TypeResolverBuilder, org.codehaus.jackson.map.introspect.VisibilityChecker, org.codehaus.jackson.map.jsontype.SubtypeResolver)
    {
        org.codehaus.jackson.map.DeserializationConfig r0, $r5;
        org.codehaus.jackson.map.jsontype.TypeResolverBuilder r1;
        org.codehaus.jackson.map.introspect.VisibilityChecker r2;
        org.codehaus.jackson.map.jsontype.SubtypeResolver $r3;
        java.util.HashMap r4;

        r0 := @this: org.codehaus.jackson.map.DeserializationConfig;

        r1 := @parameter0: org.codehaus.jackson.map.jsontype.TypeResolverBuilder;

        r2 := @parameter1: org.codehaus.jackson.map.introspect.VisibilityChecker;

        $r3 := @parameter2: org.codehaus.jackson.map.jsontype.SubtypeResolver;

        r4 = r0.<org.codehaus.jackson.map.DeserializationConfig: java.util.HashMap _mixInAnnotations>;

        r0.<org.codehaus.jackson.map.DeserializationConfig: boolean _mixInAnnotationsShared> = 1;

        $r5 = new org.codehaus.jackson.map.DeserializationConfig;

        specialinvoke $r5.<org.codehaus.jackson.map.DeserializationConfig: void <init>(org.codehaus.jackson.map.DeserializationConfig,java.util.HashMap,org.codehaus.jackson.map.jsontype.TypeResolverBuilder,org.codehaus.jackson.map.introspect.VisibilityChecker,org.codehaus.jackson.map.jsontype.SubtypeResolver)>(r0, r4, r1, r2, $r3);

        return $r5;
    }

    public org.codehaus.jackson.map.DeserializationConfig createUnshared(org.codehaus.jackson.node.JsonNodeFactory)
    {
        org.codehaus.jackson.map.DeserializationConfig r0;
        org.codehaus.jackson.node.JsonNodeFactory $r1;
        org.codehaus.jackson.map.jsontype.TypeResolverBuilder $r2;
        org.codehaus.jackson.map.introspect.VisibilityChecker $r3;
        org.codehaus.jackson.map.jsontype.SubtypeResolver $r4;

        r0 := @this: org.codehaus.jackson.map.DeserializationConfig;

        $r1 := @parameter0: org.codehaus.jackson.node.JsonNodeFactory;

        $r2 = r0.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.map.jsontype.TypeResolverBuilder _typer>;

        $r3 = r0.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.map.introspect.VisibilityChecker _visibilityChecker>;

        $r4 = r0.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.map.jsontype.SubtypeResolver _subtypeResolver>;

        r0 = virtualinvoke r0.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.map.DeserializationConfig createUnshared(org.codehaus.jackson.map.jsontype.TypeResolverBuilder,org.codehaus.jackson.map.introspect.VisibilityChecker,org.codehaus.jackson.map.jsontype.SubtypeResolver)>($r2, $r3, $r4);

        virtualinvoke r0.<org.codehaus.jackson.map.DeserializationConfig: void setNodeFactory(org.codehaus.jackson.node.JsonNodeFactory)>($r1);

        return r0;
    }

    public volatile org.codehaus.jackson.map.MapperConfig createUnshared(org.codehaus.jackson.map.jsontype.TypeResolverBuilder, org.codehaus.jackson.map.introspect.VisibilityChecker, org.codehaus.jackson.map.jsontype.SubtypeResolver)
    {
        org.codehaus.jackson.map.DeserializationConfig r0;
        org.codehaus.jackson.map.jsontype.TypeResolverBuilder $r1;
        org.codehaus.jackson.map.introspect.VisibilityChecker $r2;
        org.codehaus.jackson.map.jsontype.SubtypeResolver $r3;

        r0 := @this: org.codehaus.jackson.map.DeserializationConfig;

        $r1 := @parameter0: org.codehaus.jackson.map.jsontype.TypeResolverBuilder;

        $r2 := @parameter1: org.codehaus.jackson.map.introspect.VisibilityChecker;

        $r3 := @parameter2: org.codehaus.jackson.map.jsontype.SubtypeResolver;

        r0 = virtualinvoke r0.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.map.DeserializationConfig createUnshared(org.codehaus.jackson.map.jsontype.TypeResolverBuilder,org.codehaus.jackson.map.introspect.VisibilityChecker,org.codehaus.jackson.map.jsontype.SubtypeResolver)>($r1, $r2, $r3);

        return r0;
    }

    public void disable(org.codehaus.jackson.map.DeserializationConfig$Feature)
    {
        org.codehaus.jackson.map.DeserializationConfig r0;
        org.codehaus.jackson.map.DeserializationConfig$Feature $r1;
        int $i0, $i1;

        r0 := @this: org.codehaus.jackson.map.DeserializationConfig;

        $r1 := @parameter0: org.codehaus.jackson.map.DeserializationConfig$Feature;

        $i1 = r0.<org.codehaus.jackson.map.DeserializationConfig: int _featureFlags>;

        $i0 = virtualinvoke $r1.<org.codehaus.jackson.map.DeserializationConfig$Feature: int getMask()>();

        $i0 = $i0 ^ -1;

        $i1 = $i1 & $i0;

        r0.<org.codehaus.jackson.map.DeserializationConfig: int _featureFlags> = $i1;

        return;
    }

    public void enable(org.codehaus.jackson.map.DeserializationConfig$Feature)
    {
        org.codehaus.jackson.map.DeserializationConfig r0;
        org.codehaus.jackson.map.DeserializationConfig$Feature $r1;
        int $i0, $i1;

        r0 := @this: org.codehaus.jackson.map.DeserializationConfig;

        $r1 := @parameter0: org.codehaus.jackson.map.DeserializationConfig$Feature;

        $i1 = r0.<org.codehaus.jackson.map.DeserializationConfig: int _featureFlags>;

        $i0 = virtualinvoke $r1.<org.codehaus.jackson.map.DeserializationConfig$Feature: int getMask()>();

        $i0 = $i1 | $i0;

        r0.<org.codehaus.jackson.map.DeserializationConfig: int _featureFlags> = $i0;

        return;
    }

    public java.lang.Class findMixInClassFor(java.lang.Class)
    {
        java.lang.Class r0;
        org.codehaus.jackson.map.type.ClassKey $r1;
        java.lang.Object $r2;
        org.codehaus.jackson.map.DeserializationConfig r3;
        java.util.HashMap $r4;

        r3 := @this: org.codehaus.jackson.map.DeserializationConfig;

        r0 := @parameter0: java.lang.Class;

        $r4 = r3.<org.codehaus.jackson.map.DeserializationConfig: java.util.HashMap _mixInAnnotations>;

        if $r4 != null goto label1;

        return null;

     label1:
        $r4 = r3.<org.codehaus.jackson.map.DeserializationConfig: java.util.HashMap _mixInAnnotations>;

        $r1 = new org.codehaus.jackson.map.type.ClassKey;

        specialinvoke $r1.<org.codehaus.jackson.map.type.ClassKey: void <init>(java.lang.Class)>(r0);

        $r2 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r1);

        r0 = (java.lang.Class) $r2;

        return r0;
    }

    public void fromAnnotations(java.lang.Class)
    {
        org.codehaus.jackson.map.DeserializationConfig r0;
        java.lang.Class r1;
        org.codehaus.jackson.map.AnnotationIntrospector $r2;
        org.codehaus.jackson.map.introspect.AnnotatedClass $r3;
        org.codehaus.jackson.map.introspect.VisibilityChecker $r4;

        r0 := @this: org.codehaus.jackson.map.DeserializationConfig;

        r1 := @parameter0: java.lang.Class;

        $r2 = r0.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.map.AnnotationIntrospector _annotationIntrospector>;

        $r3 = staticinvoke <org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotatedClass construct(java.lang.Class,org.codehaus.jackson.map.AnnotationIntrospector,org.codehaus.jackson.map.ClassIntrospector$MixInResolver)>(r1, $r2, null);

        $r2 = r0.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.map.AnnotationIntrospector _annotationIntrospector>;

        $r4 = r0.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.map.introspect.VisibilityChecker _visibilityChecker>;

        $r4 = virtualinvoke $r2.<org.codehaus.jackson.map.AnnotationIntrospector: org.codehaus.jackson.map.introspect.VisibilityChecker findAutoDetectVisibility(org.codehaus.jackson.map.introspect.AnnotatedClass,org.codehaus.jackson.map.introspect.VisibilityChecker)>($r3, $r4);

        r0.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.map.introspect.VisibilityChecker _visibilityChecker> = $r4;

        return;
    }

    public org.codehaus.jackson.map.AbstractTypeResolver getAbstractTypeResolver()
    {
        org.codehaus.jackson.map.DeserializationConfig r0;
        org.codehaus.jackson.map.AbstractTypeResolver r1;

        r0 := @this: org.codehaus.jackson.map.DeserializationConfig;

        r1 = r0.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.map.AbstractTypeResolver _abstractTypeResolver>;

        return r1;
    }

    public org.codehaus.jackson.map.AnnotationIntrospector getAnnotationIntrospector()
    {
        org.codehaus.jackson.map.DeserializationConfig r0;
        boolean $z0;
        org.codehaus.jackson.map.DeserializationConfig$Feature $r1;
        org.codehaus.jackson.map.AnnotationIntrospector r2;
        org.codehaus.jackson.map.introspect.NopAnnotationIntrospector r3;

        r0 := @this: org.codehaus.jackson.map.DeserializationConfig;

        $r1 = <org.codehaus.jackson.map.DeserializationConfig$Feature: org.codehaus.jackson.map.DeserializationConfig$Feature USE_ANNOTATIONS>;

        $z0 = virtualinvoke r0.<org.codehaus.jackson.map.DeserializationConfig: boolean isEnabled(org.codehaus.jackson.map.DeserializationConfig$Feature)>($r1);

        if $z0 == 0 goto label1;

        r2 = r0.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.map.AnnotationIntrospector _annotationIntrospector>;

        return r2;

     label1:
        r3 = <org.codehaus.jackson.map.introspect.NopAnnotationIntrospector: org.codehaus.jackson.map.introspect.NopAnnotationIntrospector instance>;

        return r3;
    }

    public org.codehaus.jackson.Base64Variant getBase64Variant()
    {
        org.codehaus.jackson.map.DeserializationConfig r0;
        org.codehaus.jackson.Base64Variant $r1;

        r0 := @this: org.codehaus.jackson.map.DeserializationConfig;

        $r1 = staticinvoke <org.codehaus.jackson.Base64Variants: org.codehaus.jackson.Base64Variant getDefaultVariant()>();

        return $r1;
    }

    public java.text.DateFormat getDateFormat()
    {
        org.codehaus.jackson.map.DeserializationConfig r0;
        java.text.DateFormat r1;

        r0 := @this: org.codehaus.jackson.map.DeserializationConfig;

        r1 = r0.<org.codehaus.jackson.map.DeserializationConfig: java.text.DateFormat _dateFormat>;

        return r1;
    }

    public org.codehaus.jackson.map.jsontype.TypeResolverBuilder getDefaultTyper(org.codehaus.jackson.type.JavaType)
    {
        org.codehaus.jackson.map.DeserializationConfig r0;
        org.codehaus.jackson.type.JavaType $r1;
        org.codehaus.jackson.map.jsontype.TypeResolverBuilder r2;

        r0 := @this: org.codehaus.jackson.map.DeserializationConfig;

        $r1 := @parameter0: org.codehaus.jackson.type.JavaType;

        r2 = r0.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.map.jsontype.TypeResolverBuilder _typer>;

        return r2;
    }

    public org.codehaus.jackson.map.introspect.VisibilityChecker getDefaultVisibilityChecker()
    {
        org.codehaus.jackson.map.DeserializationConfig r0;
        org.codehaus.jackson.map.introspect.VisibilityChecker r1;

        r0 := @this: org.codehaus.jackson.map.DeserializationConfig;

        r1 = r0.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.map.introspect.VisibilityChecker _visibilityChecker>;

        return r1;
    }

    public final org.codehaus.jackson.node.JsonNodeFactory getNodeFactory()
    {
        org.codehaus.jackson.map.DeserializationConfig r0;
        org.codehaus.jackson.node.JsonNodeFactory r1;

        r0 := @this: org.codehaus.jackson.map.DeserializationConfig;

        r1 = r0.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.node.JsonNodeFactory _nodeFactory>;

        return r1;
    }

    public org.codehaus.jackson.map.util.LinkedNode getProblemHandlers()
    {
        org.codehaus.jackson.map.DeserializationConfig r0;
        org.codehaus.jackson.map.util.LinkedNode r1;

        r0 := @this: org.codehaus.jackson.map.DeserializationConfig;

        r1 = r0.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.map.util.LinkedNode _problemHandlers>;

        return r1;
    }

    public org.codehaus.jackson.map.jsontype.SubtypeResolver getSubtypeResolver()
    {
        org.codehaus.jackson.map.DeserializationConfig r0;
        org.codehaus.jackson.map.jsontype.SubtypeResolver $r1;
        org.codehaus.jackson.map.jsontype.impl.StdSubtypeResolver $r2;

        r0 := @this: org.codehaus.jackson.map.DeserializationConfig;

        $r1 = r0.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.map.jsontype.SubtypeResolver _subtypeResolver>;

        if $r1 != null goto label1;

        $r2 = new org.codehaus.jackson.map.jsontype.impl.StdSubtypeResolver;

        specialinvoke $r2.<org.codehaus.jackson.map.jsontype.impl.StdSubtypeResolver: void <init>()>();

        r0.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.map.jsontype.SubtypeResolver _subtypeResolver> = $r2;

     label1:
        $r1 = r0.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.map.jsontype.SubtypeResolver _subtypeResolver>;

        return $r1;
    }

    public void insertAnnotationIntrospector(org.codehaus.jackson.map.AnnotationIntrospector)
    {
        org.codehaus.jackson.map.DeserializationConfig r0;
        org.codehaus.jackson.map.AnnotationIntrospector $r1, $r2;

        r0 := @this: org.codehaus.jackson.map.DeserializationConfig;

        $r1 := @parameter0: org.codehaus.jackson.map.AnnotationIntrospector;

        $r2 = r0.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.map.AnnotationIntrospector _annotationIntrospector>;

        $r1 = staticinvoke <org.codehaus.jackson.map.AnnotationIntrospector$Pair: org.codehaus.jackson.map.AnnotationIntrospector create(org.codehaus.jackson.map.AnnotationIntrospector,org.codehaus.jackson.map.AnnotationIntrospector)>($r1, $r2);

        r0.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.map.AnnotationIntrospector _annotationIntrospector> = $r1;

        return;
    }

    public org.codehaus.jackson.map.BeanDescription introspect(org.codehaus.jackson.type.JavaType)
    {
        org.codehaus.jackson.map.DeserializationConfig r0;
        org.codehaus.jackson.type.JavaType $r1;
        org.codehaus.jackson.map.BeanDescription $r2;
        org.codehaus.jackson.map.ClassIntrospector $r3;

        r0 := @this: org.codehaus.jackson.map.DeserializationConfig;

        $r1 := @parameter0: org.codehaus.jackson.type.JavaType;

        $r3 = r0.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.map.ClassIntrospector _classIntrospector>;

        $r2 = virtualinvoke $r3.<org.codehaus.jackson.map.ClassIntrospector: org.codehaus.jackson.map.BeanDescription forDeserialization(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.ClassIntrospector$MixInResolver)>(r0, $r1, r0);

        return $r2;
    }

    public org.codehaus.jackson.map.BeanDescription introspectClassAnnotations(java.lang.Class)
    {
        org.codehaus.jackson.map.DeserializationConfig r0;
        java.lang.Class r1;
        org.codehaus.jackson.map.BeanDescription $r2;
        org.codehaus.jackson.map.ClassIntrospector $r3;

        r0 := @this: org.codehaus.jackson.map.DeserializationConfig;

        r1 := @parameter0: java.lang.Class;

        $r3 = r0.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.map.ClassIntrospector _classIntrospector>;

        $r2 = virtualinvoke $r3.<org.codehaus.jackson.map.ClassIntrospector: org.codehaus.jackson.map.BeanDescription forClassAnnotations(org.codehaus.jackson.map.MapperConfig,java.lang.Class,org.codehaus.jackson.map.ClassIntrospector$MixInResolver)>(r0, r1, r0);

        return $r2;
    }

    public org.codehaus.jackson.map.BeanDescription introspectDirectClassAnnotations(java.lang.Class)
    {
        org.codehaus.jackson.map.DeserializationConfig r0;
        java.lang.Class r1;
        org.codehaus.jackson.map.BeanDescription $r2;
        org.codehaus.jackson.map.ClassIntrospector $r3;

        r0 := @this: org.codehaus.jackson.map.DeserializationConfig;

        r1 := @parameter0: java.lang.Class;

        $r3 = r0.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.map.ClassIntrospector _classIntrospector>;

        $r2 = virtualinvoke $r3.<org.codehaus.jackson.map.ClassIntrospector: org.codehaus.jackson.map.BeanDescription forDirectClassAnnotations(org.codehaus.jackson.map.MapperConfig,java.lang.Class,org.codehaus.jackson.map.ClassIntrospector$MixInResolver)>(r0, r1, r0);

        return $r2;
    }

    public org.codehaus.jackson.map.BeanDescription introspectForCreation(org.codehaus.jackson.type.JavaType)
    {
        org.codehaus.jackson.map.DeserializationConfig r0;
        org.codehaus.jackson.type.JavaType $r1;
        org.codehaus.jackson.map.BeanDescription $r2;
        org.codehaus.jackson.map.ClassIntrospector $r3;

        r0 := @this: org.codehaus.jackson.map.DeserializationConfig;

        $r1 := @parameter0: org.codehaus.jackson.type.JavaType;

        $r3 = r0.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.map.ClassIntrospector _classIntrospector>;

        $r2 = virtualinvoke $r3.<org.codehaus.jackson.map.ClassIntrospector: org.codehaus.jackson.map.BeanDescription forCreation(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.ClassIntrospector$MixInResolver)>(r0, $r1, r0);

        return $r2;
    }

    public final boolean isEnabled(org.codehaus.jackson.map.DeserializationConfig$Feature)
    {
        org.codehaus.jackson.map.DeserializationConfig r0;
        org.codehaus.jackson.map.DeserializationConfig$Feature $r1;
        int $i0, $i1;

        r0 := @this: org.codehaus.jackson.map.DeserializationConfig;

        $r1 := @parameter0: org.codehaus.jackson.map.DeserializationConfig$Feature;

        $i1 = r0.<org.codehaus.jackson.map.DeserializationConfig: int _featureFlags>;

        $i0 = virtualinvoke $r1.<org.codehaus.jackson.map.DeserializationConfig$Feature: int getMask()>();

        $i0 = $i1 & $i0;

        if $i0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public void set(org.codehaus.jackson.map.DeserializationConfig$Feature, boolean)
    {
        org.codehaus.jackson.map.DeserializationConfig r0;
        org.codehaus.jackson.map.DeserializationConfig$Feature $r1;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.DeserializationConfig;

        $r1 := @parameter0: org.codehaus.jackson.map.DeserializationConfig$Feature;

        $z0 := @parameter1: boolean;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.codehaus.jackson.map.DeserializationConfig: void enable(org.codehaus.jackson.map.DeserializationConfig$Feature)>($r1);

        return;

     label1:
        virtualinvoke r0.<org.codehaus.jackson.map.DeserializationConfig: void disable(org.codehaus.jackson.map.DeserializationConfig$Feature)>($r1);

        return;
    }

    public void setAbstractTypeResolver(org.codehaus.jackson.map.AbstractTypeResolver)
    {
        org.codehaus.jackson.map.DeserializationConfig r0;
        org.codehaus.jackson.map.AbstractTypeResolver $r1;

        r0 := @this: org.codehaus.jackson.map.DeserializationConfig;

        $r1 := @parameter0: org.codehaus.jackson.map.AbstractTypeResolver;

        r0.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.map.AbstractTypeResolver _abstractTypeResolver> = $r1;

        return;
    }

    public void setAnnotationIntrospector(org.codehaus.jackson.map.AnnotationIntrospector)
    {
        org.codehaus.jackson.map.DeserializationConfig r0;
        org.codehaus.jackson.map.AnnotationIntrospector $r1;

        r0 := @this: org.codehaus.jackson.map.DeserializationConfig;

        $r1 := @parameter0: org.codehaus.jackson.map.AnnotationIntrospector;

        r0.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.map.AnnotationIntrospector _annotationIntrospector> = $r1;

        return;
    }

    public void setDateFormat(java.text.DateFormat)
    {
        org.codehaus.jackson.map.DeserializationConfig r0;
        java.text.DateFormat $r1;
        java.lang.Object $r2;

        r0 := @this: org.codehaus.jackson.map.DeserializationConfig;

        $r1 := @parameter0: java.text.DateFormat;

        if $r1 != null goto label2;

        $r2 = <org.codehaus.jackson.map.util.StdDateFormat: org.codehaus.jackson.map.util.StdDateFormat instance>;

     label1:
        $r1 = (java.text.DateFormat) $r2;

        r0.<org.codehaus.jackson.map.DeserializationConfig: java.text.DateFormat _dateFormat> = $r1;

        return;

     label2:
        $r2 = $r1;

        goto label1;
    }

    public void setIntrospector(org.codehaus.jackson.map.ClassIntrospector)
    {
        org.codehaus.jackson.map.DeserializationConfig r0;
        org.codehaus.jackson.map.ClassIntrospector r1;

        r0 := @this: org.codehaus.jackson.map.DeserializationConfig;

        r1 := @parameter0: org.codehaus.jackson.map.ClassIntrospector;

        r0.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.map.ClassIntrospector _classIntrospector> = r1;

        return;
    }

    public void setMixInAnnotations(java.util.Map)
    {
        org.codehaus.jackson.map.DeserializationConfig r0;
        java.util.Map r1;
        org.codehaus.jackson.map.type.ClassKey $r2;
        java.util.HashMap r3;
        int $i0;
        java.util.Set $r4;
        java.util.Iterator $r5;
        boolean $z0;
        java.lang.Object $r6;
        java.util.Map$Entry r7;
        java.lang.Class $r8;

        r0 := @this: org.codehaus.jackson.map.DeserializationConfig;

        r1 := @parameter0: java.util.Map;

        r3 = null;

        if r1 == null goto label2;

        $i0 = interfaceinvoke r1.<java.util.Map: int size()>();

        if $i0 <= 0 goto label2;

        r3 = new java.util.HashMap;

        $i0 = interfaceinvoke r1.<java.util.Map: int size()>();

        specialinvoke r3.<java.util.HashMap: void <init>(int)>($i0);

        $r4 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.util.Map$Entry) $r6;

        $r2 = new org.codehaus.jackson.map.type.ClassKey;

        $r6 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r8 = (java.lang.Class) $r6;

        specialinvoke $r2.<org.codehaus.jackson.map.type.ClassKey: void <init>(java.lang.Class)>($r8);

        $r6 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        virtualinvoke r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r6);

        goto label1;

     label2:
        r0.<org.codehaus.jackson.map.DeserializationConfig: boolean _mixInAnnotationsShared> = 0;

        r0.<org.codehaus.jackson.map.DeserializationConfig: java.util.HashMap _mixInAnnotations> = r3;

        return;
    }

    public void setNodeFactory(org.codehaus.jackson.node.JsonNodeFactory)
    {
        org.codehaus.jackson.map.DeserializationConfig r0;
        org.codehaus.jackson.node.JsonNodeFactory $r1;

        r0 := @this: org.codehaus.jackson.map.DeserializationConfig;

        $r1 := @parameter0: org.codehaus.jackson.node.JsonNodeFactory;

        r0.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.node.JsonNodeFactory _nodeFactory> = $r1;

        return;
    }

    public void setSubtypeResolver(org.codehaus.jackson.map.jsontype.SubtypeResolver)
    {
        org.codehaus.jackson.map.DeserializationConfig r0;
        org.codehaus.jackson.map.jsontype.SubtypeResolver $r1;

        r0 := @this: org.codehaus.jackson.map.DeserializationConfig;

        $r1 := @parameter0: org.codehaus.jackson.map.jsontype.SubtypeResolver;

        r0.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.map.jsontype.SubtypeResolver _subtypeResolver> = $r1;

        return;
    }
}
