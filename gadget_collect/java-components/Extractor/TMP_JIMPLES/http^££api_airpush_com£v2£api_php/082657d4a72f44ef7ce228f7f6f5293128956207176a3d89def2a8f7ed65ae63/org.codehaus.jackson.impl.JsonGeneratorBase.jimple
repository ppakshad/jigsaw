public abstract class org.codehaus.jackson.impl.JsonGeneratorBase extends org.codehaus.jackson.JsonGenerator
{
    protected boolean _cfgNumbersAsStrings;
    protected boolean _closed;
    protected int _features;
    protected org.codehaus.jackson.ObjectCodec _objectCodec;
    protected org.codehaus.jackson.impl.JsonWriteContext _writeContext;

    protected void <init>(int, org.codehaus.jackson.ObjectCodec)
    {
        org.codehaus.jackson.impl.JsonGeneratorBase r0;
        int $i0;
        org.codehaus.jackson.ObjectCodec $r1;
        org.codehaus.jackson.impl.JsonWriteContext $r2;
        org.codehaus.jackson.JsonGenerator$Feature $r3;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.impl.JsonGeneratorBase;

        $i0 := @parameter0: int;

        $r1 := @parameter1: org.codehaus.jackson.ObjectCodec;

        specialinvoke r0.<org.codehaus.jackson.JsonGenerator: void <init>()>();

        r0.<org.codehaus.jackson.impl.JsonGeneratorBase: int _features> = $i0;

        $r2 = staticinvoke <org.codehaus.jackson.impl.JsonWriteContext: org.codehaus.jackson.impl.JsonWriteContext createRootContext()>();

        r0.<org.codehaus.jackson.impl.JsonGeneratorBase: org.codehaus.jackson.impl.JsonWriteContext _writeContext> = $r2;

        r0.<org.codehaus.jackson.impl.JsonGeneratorBase: org.codehaus.jackson.ObjectCodec _objectCodec> = $r1;

        $r3 = <org.codehaus.jackson.JsonGenerator$Feature: org.codehaus.jackson.JsonGenerator$Feature WRITE_NUMBERS_AS_STRINGS>;

        $z0 = virtualinvoke r0.<org.codehaus.jackson.impl.JsonGeneratorBase: boolean isEnabled(org.codehaus.jackson.JsonGenerator$Feature)>($r3);

        r0.<org.codehaus.jackson.impl.JsonGeneratorBase: boolean _cfgNumbersAsStrings> = $z0;

        return;
    }

    protected void _cantHappen()
    {
        org.codehaus.jackson.impl.JsonGeneratorBase r0;
        java.lang.RuntimeException $r1;

        r0 := @this: org.codehaus.jackson.impl.JsonGeneratorBase;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Internal error: should never end up through this code path");

        throw $r1;
    }

    protected abstract void _releaseBuffers();

    protected void _reportError(java.lang.String) throws org.codehaus.jackson.JsonGenerationException
    {
        org.codehaus.jackson.impl.JsonGeneratorBase r0;
        java.lang.String $r1;
        org.codehaus.jackson.JsonGenerationException $r2;

        r0 := @this: org.codehaus.jackson.impl.JsonGeneratorBase;

        $r1 := @parameter0: java.lang.String;

        $r2 = new org.codehaus.jackson.JsonGenerationException;

        specialinvoke $r2.<org.codehaus.jackson.JsonGenerationException: void <init>(java.lang.String)>($r1);

        throw $r2;
    }

    protected void _reportUnsupportedOperation()
    {
        org.codehaus.jackson.impl.JsonGeneratorBase r0;
        java.lang.UnsupportedOperationException $r1;
        java.lang.StringBuilder $r2;
        java.lang.Class $r3;
        java.lang.String $r4;

        r0 := @this: org.codehaus.jackson.impl.JsonGeneratorBase;

        $r1 = new java.lang.UnsupportedOperationException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Operation not supported by generator of type ");

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r4);

        throw $r1;
    }

    protected final void _throwInternal()
    {
        org.codehaus.jackson.impl.JsonGeneratorBase r0;
        java.lang.RuntimeException $r1;

        r0 := @this: org.codehaus.jackson.impl.JsonGeneratorBase;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Internal error: this code path should never get executed");

        throw $r1;
    }

    protected abstract void _verifyValueWrite(java.lang.String) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException;

    protected void _writeEndArray() throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        org.codehaus.jackson.impl.JsonGeneratorBase r0;

        r0 := @this: org.codehaus.jackson.impl.JsonGeneratorBase;

        return;
    }

    protected void _writeEndObject() throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        org.codehaus.jackson.impl.JsonGeneratorBase r0;

        r0 := @this: org.codehaus.jackson.impl.JsonGeneratorBase;

        return;
    }

    protected void _writeSimpleObject(java.lang.Object) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        org.codehaus.jackson.impl.JsonGeneratorBase r0;
        java.lang.Object r1;
        boolean $z0;
        java.lang.String r2;
        java.lang.Number $r3;
        int $i0;
        long $l1;
        double $d0;
        float $f0;
        short $s2;
        byte $b3;
        java.math.BigInteger r4;
        java.math.BigDecimal r5;
        java.util.concurrent.atomic.AtomicInteger r6;
        java.util.concurrent.atomic.AtomicLong r7;
        byte[] r8;
        java.lang.Boolean r9;
        java.util.concurrent.atomic.AtomicBoolean r10;
        java.lang.IllegalStateException $r11;
        java.lang.StringBuilder $r12;
        java.lang.Class $r13;

        r0 := @this: org.codehaus.jackson.impl.JsonGeneratorBase;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label01;

        virtualinvoke r0.<org.codehaus.jackson.impl.JsonGeneratorBase: void writeNull()>();

        return;

     label01:
        $z0 = r1 instanceof java.lang.String;

        if $z0 == 0 goto label02;

        r2 = (java.lang.String) r1;

        virtualinvoke r0.<org.codehaus.jackson.impl.JsonGeneratorBase: void writeString(java.lang.String)>(r2);

        return;

     label02:
        $z0 = r1 instanceof java.lang.Number;

        if $z0 == 0 goto label12;

        $r3 = (java.lang.Number) r1;

        $z0 = $r3 instanceof java.lang.Integer;

        if $z0 == 0 goto label03;

        $i0 = virtualinvoke $r3.<java.lang.Number: int intValue()>();

        virtualinvoke r0.<org.codehaus.jackson.impl.JsonGeneratorBase: void writeNumber(int)>($i0);

        return;

     label03:
        $z0 = $r3 instanceof java.lang.Long;

        if $z0 == 0 goto label04;

        $l1 = virtualinvoke $r3.<java.lang.Number: long longValue()>();

        virtualinvoke r0.<org.codehaus.jackson.impl.JsonGeneratorBase: void writeNumber(long)>($l1);

        return;

     label04:
        $z0 = $r3 instanceof java.lang.Double;

        if $z0 == 0 goto label05;

        $d0 = virtualinvoke $r3.<java.lang.Number: double doubleValue()>();

        virtualinvoke r0.<org.codehaus.jackson.impl.JsonGeneratorBase: void writeNumber(double)>($d0);

        return;

     label05:
        $z0 = $r3 instanceof java.lang.Float;

        if $z0 == 0 goto label06;

        $f0 = virtualinvoke $r3.<java.lang.Number: float floatValue()>();

        virtualinvoke r0.<org.codehaus.jackson.impl.JsonGeneratorBase: void writeNumber(float)>($f0);

        return;

     label06:
        $z0 = $r3 instanceof java.lang.Short;

        if $z0 == 0 goto label07;

        $s2 = virtualinvoke $r3.<java.lang.Number: short shortValue()>();

        virtualinvoke r0.<org.codehaus.jackson.impl.JsonGeneratorBase: void writeNumber(int)>($s2);

        return;

     label07:
        $z0 = $r3 instanceof java.lang.Byte;

        if $z0 == 0 goto label08;

        $b3 = virtualinvoke $r3.<java.lang.Number: byte byteValue()>();

        virtualinvoke r0.<org.codehaus.jackson.impl.JsonGeneratorBase: void writeNumber(int)>($b3);

        return;

     label08:
        $z0 = $r3 instanceof java.math.BigInteger;

        if $z0 == 0 goto label09;

        r4 = (java.math.BigInteger) $r3;

        virtualinvoke r0.<org.codehaus.jackson.impl.JsonGeneratorBase: void writeNumber(java.math.BigInteger)>(r4);

        return;

     label09:
        $z0 = $r3 instanceof java.math.BigDecimal;

        if $z0 == 0 goto label10;

        r5 = (java.math.BigDecimal) $r3;

        virtualinvoke r0.<org.codehaus.jackson.impl.JsonGeneratorBase: void writeNumber(java.math.BigDecimal)>(r5);

        return;

     label10:
        $z0 = $r3 instanceof java.util.concurrent.atomic.AtomicInteger;

        if $z0 == 0 goto label11;

        r6 = (java.util.concurrent.atomic.AtomicInteger) $r3;

        $i0 = virtualinvoke r6.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        virtualinvoke r0.<org.codehaus.jackson.impl.JsonGeneratorBase: void writeNumber(int)>($i0);

        return;

     label11:
        $z0 = $r3 instanceof java.util.concurrent.atomic.AtomicLong;

        if $z0 == 0 goto label15;

        r7 = (java.util.concurrent.atomic.AtomicLong) $r3;

        $l1 = virtualinvoke r7.<java.util.concurrent.atomic.AtomicLong: long get()>();

        virtualinvoke r0.<org.codehaus.jackson.impl.JsonGeneratorBase: void writeNumber(long)>($l1);

        return;

     label12:
        $z0 = r1 instanceof byte[];

        if $z0 == 0 goto label13;

        r8 = (byte[]) r1;

        virtualinvoke r0.<org.codehaus.jackson.impl.JsonGeneratorBase: void writeBinary(byte[])>(r8);

        return;

     label13:
        $z0 = r1 instanceof java.lang.Boolean;

        if $z0 == 0 goto label14;

        r9 = (java.lang.Boolean) r1;

        $z0 = virtualinvoke r9.<java.lang.Boolean: boolean booleanValue()>();

        virtualinvoke r0.<org.codehaus.jackson.impl.JsonGeneratorBase: void writeBoolean(boolean)>($z0);

        return;

     label14:
        $z0 = r1 instanceof java.util.concurrent.atomic.AtomicBoolean;

        if $z0 == 0 goto label15;

        r10 = (java.util.concurrent.atomic.AtomicBoolean) r1;

        $z0 = virtualinvoke r10.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        virtualinvoke r0.<org.codehaus.jackson.impl.JsonGeneratorBase: void writeBoolean(boolean)>($z0);

        return;

     label15:
        $r11 = new java.lang.IllegalStateException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed ");

        $r13 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        r2 = virtualinvoke $r13.<java.lang.Class: java.lang.String getName()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        r2 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>(r2);

        throw $r11;
    }

    protected void _writeStartArray() throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        org.codehaus.jackson.impl.JsonGeneratorBase r0;

        r0 := @this: org.codehaus.jackson.impl.JsonGeneratorBase;

        return;
    }

    protected void _writeStartObject() throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        org.codehaus.jackson.impl.JsonGeneratorBase r0;

        r0 := @this: org.codehaus.jackson.impl.JsonGeneratorBase;

        return;
    }

    public void close() throws java.io.IOException
    {
        org.codehaus.jackson.impl.JsonGeneratorBase r0;

        r0 := @this: org.codehaus.jackson.impl.JsonGeneratorBase;

        r0.<org.codehaus.jackson.impl.JsonGeneratorBase: boolean _closed> = 1;

        return;
    }

    public final void copyCurrentEvent(org.codehaus.jackson.JsonParser) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.impl.JsonGeneratorBase r0;
        org.codehaus.jackson.JsonParser $r1;
        org.codehaus.jackson.JsonToken $r2;
        int[] $r3;
        int $i0, $i1;
        java.lang.String $r4;
        boolean $z0;
        char[] $r5;
        org.codehaus.jackson.JsonParser$NumberType $r6;
        long $l2;
        java.math.BigInteger $r7;
        double $d0;
        java.math.BigDecimal $r8;
        float $f0;
        java.lang.Object $r9;

        r0 := @this: org.codehaus.jackson.impl.JsonGeneratorBase;

        $r1 := @parameter0: org.codehaus.jackson.JsonParser;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken getCurrentToken()>();

        if $r2 != null goto label01;

        virtualinvoke r0.<org.codehaus.jackson.impl.JsonGeneratorBase: void _reportError(java.lang.String)>("No current event to copy");

     label01:
        $r3 = <org.codehaus.jackson.impl.JsonGeneratorBase$1: int[] $SwitchMap$org$codehaus$jackson$JsonToken>;

        $i0 = virtualinvoke $r2.<org.codehaus.jackson.JsonToken: int ordinal()>();

        $i0 = $r3[$i0];

        lookupswitch($i0)
        {
            case 1: goto label03;
            case 2: goto label04;
            case 3: goto label05;
            case 4: goto label06;
            case 5: goto label07;
            case 6: goto label08;
            case 7: goto label10;
            case 8: goto label14;
            case 9: goto label18;
            case 10: goto label19;
            case 11: goto label20;
            case 12: goto label21;
            default: goto label02;
        };

     label02:
        virtualinvoke r0.<org.codehaus.jackson.impl.JsonGeneratorBase: void _cantHappen()>();

        return;

     label03:
        virtualinvoke r0.<org.codehaus.jackson.impl.JsonGeneratorBase: void writeStartObject()>();

        return;

     label04:
        virtualinvoke r0.<org.codehaus.jackson.impl.JsonGeneratorBase: void writeEndObject()>();

        return;

     label05:
        virtualinvoke r0.<org.codehaus.jackson.impl.JsonGeneratorBase: void writeStartArray()>();

        return;

     label06:
        virtualinvoke r0.<org.codehaus.jackson.impl.JsonGeneratorBase: void writeEndArray()>();

        return;

     label07:
        $r4 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: java.lang.String getCurrentName()>();

        virtualinvoke r0.<org.codehaus.jackson.impl.JsonGeneratorBase: void writeFieldName(java.lang.String)>($r4);

        return;

     label08:
        $z0 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: boolean hasTextCharacters()>();

        if $z0 == 0 goto label09;

        $r5 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: char[] getTextCharacters()>();

        $i0 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: int getTextOffset()>();

        $i1 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: int getTextLength()>();

        virtualinvoke r0.<org.codehaus.jackson.impl.JsonGeneratorBase: void writeString(char[],int,int)>($r5, $i0, $i1);

        return;

     label09:
        $r4 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: java.lang.String getText()>();

        virtualinvoke r0.<org.codehaus.jackson.impl.JsonGeneratorBase: void writeString(java.lang.String)>($r4);

        return;

     label10:
        $r3 = <org.codehaus.jackson.impl.JsonGeneratorBase$1: int[] $SwitchMap$org$codehaus$jackson$JsonParser$NumberType>;

        $r6 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonParser$NumberType getNumberType()>();

        $i0 = virtualinvoke $r6.<org.codehaus.jackson.JsonParser$NumberType: int ordinal()>();

        $i0 = $r3[$i0];

        lookupswitch($i0)
        {
            case 1: goto label12;
            case 2: goto label13;
            default: goto label11;
        };

     label11:
        $l2 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: long getLongValue()>();

        virtualinvoke r0.<org.codehaus.jackson.impl.JsonGeneratorBase: void writeNumber(long)>($l2);

        return;

     label12:
        $i0 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: int getIntValue()>();

        virtualinvoke r0.<org.codehaus.jackson.impl.JsonGeneratorBase: void writeNumber(int)>($i0);

        return;

     label13:
        $r7 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: java.math.BigInteger getBigIntegerValue()>();

        virtualinvoke r0.<org.codehaus.jackson.impl.JsonGeneratorBase: void writeNumber(java.math.BigInteger)>($r7);

        return;

     label14:
        $r3 = <org.codehaus.jackson.impl.JsonGeneratorBase$1: int[] $SwitchMap$org$codehaus$jackson$JsonParser$NumberType>;

        $r6 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonParser$NumberType getNumberType()>();

        $i0 = virtualinvoke $r6.<org.codehaus.jackson.JsonParser$NumberType: int ordinal()>();

        $i0 = $r3[$i0];

        lookupswitch($i0)
        {
            case 3: goto label16;
            case 4: goto label17;
            default: goto label15;
        };

     label15:
        $d0 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: double getDoubleValue()>();

        virtualinvoke r0.<org.codehaus.jackson.impl.JsonGeneratorBase: void writeNumber(double)>($d0);

        return;

     label16:
        $r8 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: java.math.BigDecimal getDecimalValue()>();

        virtualinvoke r0.<org.codehaus.jackson.impl.JsonGeneratorBase: void writeNumber(java.math.BigDecimal)>($r8);

        return;

     label17:
        $f0 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: float getFloatValue()>();

        virtualinvoke r0.<org.codehaus.jackson.impl.JsonGeneratorBase: void writeNumber(float)>($f0);

        return;

     label18:
        virtualinvoke r0.<org.codehaus.jackson.impl.JsonGeneratorBase: void writeBoolean(boolean)>(1);

        return;

     label19:
        virtualinvoke r0.<org.codehaus.jackson.impl.JsonGeneratorBase: void writeBoolean(boolean)>(0);

        return;

     label20:
        virtualinvoke r0.<org.codehaus.jackson.impl.JsonGeneratorBase: void writeNull()>();

        return;

     label21:
        $r9 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: java.lang.Object getEmbeddedObject()>();

        virtualinvoke r0.<org.codehaus.jackson.impl.JsonGeneratorBase: void writeObject(java.lang.Object)>($r9);

        return;
    }

    public final void copyCurrentStructure(org.codehaus.jackson.JsonParser) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.impl.JsonGeneratorBase r0;
        org.codehaus.jackson.JsonParser $r1;
        org.codehaus.jackson.JsonToken $r2, r3, $r4;
        java.lang.String $r5;
        int[] $r6;
        int $i0;

        r0 := @this: org.codehaus.jackson.impl.JsonGeneratorBase;

        $r1 := @parameter0: org.codehaus.jackson.JsonParser;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken getCurrentToken()>();

        r3 = $r2;

        $r4 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken FIELD_NAME>;

        if $r2 != $r4 goto label1;

        $r5 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: java.lang.String getCurrentName()>();

        virtualinvoke r0.<org.codehaus.jackson.impl.JsonGeneratorBase: void writeFieldName(java.lang.String)>($r5);

        r3 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken nextToken()>();

     label1:
        $r6 = <org.codehaus.jackson.impl.JsonGeneratorBase$1: int[] $SwitchMap$org$codehaus$jackson$JsonToken>;

        $i0 = virtualinvoke r3.<org.codehaus.jackson.JsonToken: int ordinal()>();

        $i0 = $r6[$i0];

        lookupswitch($i0)
        {
            case 1: goto label6;
            case 2: goto label2;
            case 3: goto label3;
            default: goto label2;
        };

     label2:
        virtualinvoke r0.<org.codehaus.jackson.impl.JsonGeneratorBase: void copyCurrentEvent(org.codehaus.jackson.JsonParser)>($r1);

        return;

     label3:
        virtualinvoke r0.<org.codehaus.jackson.impl.JsonGeneratorBase: void writeStartArray()>();

     label4:
        $r2 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken nextToken()>();

        r3 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken END_ARRAY>;

        if $r2 == r3 goto label5;

        virtualinvoke r0.<org.codehaus.jackson.impl.JsonGeneratorBase: void copyCurrentStructure(org.codehaus.jackson.JsonParser)>($r1);

        goto label4;

     label5:
        virtualinvoke r0.<org.codehaus.jackson.impl.JsonGeneratorBase: void writeEndArray()>();

        return;

     label6:
        virtualinvoke r0.<org.codehaus.jackson.impl.JsonGeneratorBase: void writeStartObject()>();

     label7:
        $r2 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken nextToken()>();

        r3 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken END_OBJECT>;

        if $r2 == r3 goto label8;

        virtualinvoke r0.<org.codehaus.jackson.impl.JsonGeneratorBase: void copyCurrentStructure(org.codehaus.jackson.JsonParser)>($r1);

        goto label7;

     label8:
        virtualinvoke r0.<org.codehaus.jackson.impl.JsonGeneratorBase: void writeEndObject()>();

        return;
    }

    public org.codehaus.jackson.JsonGenerator disable(org.codehaus.jackson.JsonGenerator$Feature)
    {
        org.codehaus.jackson.impl.JsonGeneratorBase r0;
        org.codehaus.jackson.JsonGenerator$Feature $r1, $r2;
        int $i0, $i1;

        r0 := @this: org.codehaus.jackson.impl.JsonGeneratorBase;

        $r1 := @parameter0: org.codehaus.jackson.JsonGenerator$Feature;

        $i1 = r0.<org.codehaus.jackson.impl.JsonGeneratorBase: int _features>;

        $i0 = virtualinvoke $r1.<org.codehaus.jackson.JsonGenerator$Feature: int getMask()>();

        $i0 = $i0 ^ -1;

        $i1 = $i1 & $i0;

        r0.<org.codehaus.jackson.impl.JsonGeneratorBase: int _features> = $i1;

        $r2 = <org.codehaus.jackson.JsonGenerator$Feature: org.codehaus.jackson.JsonGenerator$Feature WRITE_NUMBERS_AS_STRINGS>;

        if $r1 != $r2 goto label1;

        r0.<org.codehaus.jackson.impl.JsonGeneratorBase: boolean _cfgNumbersAsStrings> = 0;

     label1:
        return r0;
    }

    public org.codehaus.jackson.JsonGenerator enable(org.codehaus.jackson.JsonGenerator$Feature)
    {
        org.codehaus.jackson.impl.JsonGeneratorBase r0;
        org.codehaus.jackson.JsonGenerator$Feature $r1, $r2;
        int $i0, $i1;

        r0 := @this: org.codehaus.jackson.impl.JsonGeneratorBase;

        $r1 := @parameter0: org.codehaus.jackson.JsonGenerator$Feature;

        $i1 = r0.<org.codehaus.jackson.impl.JsonGeneratorBase: int _features>;

        $i0 = virtualinvoke $r1.<org.codehaus.jackson.JsonGenerator$Feature: int getMask()>();

        $i0 = $i1 | $i0;

        r0.<org.codehaus.jackson.impl.JsonGeneratorBase: int _features> = $i0;

        $r2 = <org.codehaus.jackson.JsonGenerator$Feature: org.codehaus.jackson.JsonGenerator$Feature WRITE_NUMBERS_AS_STRINGS>;

        if $r1 != $r2 goto label1;

        r0.<org.codehaus.jackson.impl.JsonGeneratorBase: boolean _cfgNumbersAsStrings> = 1;

     label1:
        return r0;
    }

    public abstract void flush() throws java.io.IOException;

    public final org.codehaus.jackson.ObjectCodec getCodec()
    {
        org.codehaus.jackson.impl.JsonGeneratorBase r0;
        org.codehaus.jackson.ObjectCodec r1;

        r0 := @this: org.codehaus.jackson.impl.JsonGeneratorBase;

        r1 = r0.<org.codehaus.jackson.impl.JsonGeneratorBase: org.codehaus.jackson.ObjectCodec _objectCodec>;

        return r1;
    }

    public volatile org.codehaus.jackson.JsonStreamContext getOutputContext()
    {
        org.codehaus.jackson.impl.JsonGeneratorBase r0;
        org.codehaus.jackson.impl.JsonWriteContext $r1;

        r0 := @this: org.codehaus.jackson.impl.JsonGeneratorBase;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.impl.JsonGeneratorBase: org.codehaus.jackson.impl.JsonWriteContext getOutputContext()>();

        return $r1;
    }

    public final org.codehaus.jackson.impl.JsonWriteContext getOutputContext()
    {
        org.codehaus.jackson.impl.JsonGeneratorBase r0;
        org.codehaus.jackson.impl.JsonWriteContext r1;

        r0 := @this: org.codehaus.jackson.impl.JsonGeneratorBase;

        r1 = r0.<org.codehaus.jackson.impl.JsonGeneratorBase: org.codehaus.jackson.impl.JsonWriteContext _writeContext>;

        return r1;
    }

    public boolean isClosed()
    {
        org.codehaus.jackson.impl.JsonGeneratorBase r0;
        boolean z0;

        r0 := @this: org.codehaus.jackson.impl.JsonGeneratorBase;

        z0 = r0.<org.codehaus.jackson.impl.JsonGeneratorBase: boolean _closed>;

        return z0;
    }

    public final boolean isEnabled(org.codehaus.jackson.JsonGenerator$Feature)
    {
        org.codehaus.jackson.impl.JsonGeneratorBase r0;
        org.codehaus.jackson.JsonGenerator$Feature $r1;
        int $i0, $i1;

        r0 := @this: org.codehaus.jackson.impl.JsonGeneratorBase;

        $r1 := @parameter0: org.codehaus.jackson.JsonGenerator$Feature;

        $i1 = r0.<org.codehaus.jackson.impl.JsonGeneratorBase: int _features>;

        $i0 = virtualinvoke $r1.<org.codehaus.jackson.JsonGenerator$Feature: int getMask()>();

        $i0 = $i1 & $i0;

        if $i0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public org.codehaus.jackson.JsonGenerator setCodec(org.codehaus.jackson.ObjectCodec)
    {
        org.codehaus.jackson.impl.JsonGeneratorBase r0;
        org.codehaus.jackson.ObjectCodec $r1;

        r0 := @this: org.codehaus.jackson.impl.JsonGeneratorBase;

        $r1 := @parameter0: org.codehaus.jackson.ObjectCodec;

        r0.<org.codehaus.jackson.impl.JsonGeneratorBase: org.codehaus.jackson.ObjectCodec _objectCodec> = $r1;

        return r0;
    }

    public org.codehaus.jackson.JsonGenerator useDefaultPrettyPrinter()
    {
        org.codehaus.jackson.impl.JsonGeneratorBase r0;
        org.codehaus.jackson.JsonGenerator $r1;
        org.codehaus.jackson.util.DefaultPrettyPrinter $r2;

        r0 := @this: org.codehaus.jackson.impl.JsonGeneratorBase;

        $r2 = new org.codehaus.jackson.util.DefaultPrettyPrinter;

        specialinvoke $r2.<org.codehaus.jackson.util.DefaultPrettyPrinter: void <init>()>();

        $r1 = virtualinvoke r0.<org.codehaus.jackson.impl.JsonGeneratorBase: org.codehaus.jackson.JsonGenerator setPrettyPrinter(org.codehaus.jackson.PrettyPrinter)>($r2);

        return $r1;
    }

    public org.codehaus.jackson.Version version()
    {
        org.codehaus.jackson.impl.JsonGeneratorBase r0;
        java.lang.Class $r1;
        org.codehaus.jackson.Version $r2;

        r0 := @this: org.codehaus.jackson.impl.JsonGeneratorBase;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = staticinvoke <org.codehaus.jackson.util.VersionUtil: org.codehaus.jackson.Version versionFor(java.lang.Class)>($r1);

        return $r2;
    }

    public void writeEndArray() throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        org.codehaus.jackson.impl.JsonGeneratorBase r0;
        org.codehaus.jackson.impl.JsonWriteContext $r1;
        boolean $z0;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        org.codehaus.jackson.PrettyPrinter $r4;
        int $i0;

        r0 := @this: org.codehaus.jackson.impl.JsonGeneratorBase;

        $r1 = r0.<org.codehaus.jackson.impl.JsonGeneratorBase: org.codehaus.jackson.impl.JsonWriteContext _writeContext>;

        $z0 = virtualinvoke $r1.<org.codehaus.jackson.impl.JsonWriteContext: boolean inArray()>();

        if $z0 != 0 goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Current context not an ARRAY but ");

        $r1 = r0.<org.codehaus.jackson.impl.JsonGeneratorBase: org.codehaus.jackson.impl.JsonWriteContext _writeContext>;

        $r3 = virtualinvoke $r1.<org.codehaus.jackson.impl.JsonWriteContext: java.lang.String getTypeDesc()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.codehaus.jackson.impl.JsonGeneratorBase: void _reportError(java.lang.String)>($r3);

     label1:
        $r4 = r0.<org.codehaus.jackson.impl.JsonGeneratorBase: org.codehaus.jackson.PrettyPrinter _cfgPrettyPrinter>;

        if $r4 == null goto label3;

        $r4 = r0.<org.codehaus.jackson.impl.JsonGeneratorBase: org.codehaus.jackson.PrettyPrinter _cfgPrettyPrinter>;

        $r1 = r0.<org.codehaus.jackson.impl.JsonGeneratorBase: org.codehaus.jackson.impl.JsonWriteContext _writeContext>;

        $i0 = virtualinvoke $r1.<org.codehaus.jackson.impl.JsonWriteContext: int getEntryCount()>();

        interfaceinvoke $r4.<org.codehaus.jackson.PrettyPrinter: void writeEndArray(org.codehaus.jackson.JsonGenerator,int)>(r0, $i0);

     label2:
        $r1 = r0.<org.codehaus.jackson.impl.JsonGeneratorBase: org.codehaus.jackson.impl.JsonWriteContext _writeContext>;

        $r1 = virtualinvoke $r1.<org.codehaus.jackson.impl.JsonWriteContext: org.codehaus.jackson.impl.JsonWriteContext getParent()>();

        r0.<org.codehaus.jackson.impl.JsonGeneratorBase: org.codehaus.jackson.impl.JsonWriteContext _writeContext> = $r1;

        return;

     label3:
        virtualinvoke r0.<org.codehaus.jackson.impl.JsonGeneratorBase: void _writeEndArray()>();

        goto label2;
    }

    public void writeEndObject() throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        org.codehaus.jackson.impl.JsonGeneratorBase r0;
        org.codehaus.jackson.impl.JsonWriteContext $r1;
        boolean $z0;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        org.codehaus.jackson.PrettyPrinter $r4;
        int $i0;

        r0 := @this: org.codehaus.jackson.impl.JsonGeneratorBase;

        $r1 = r0.<org.codehaus.jackson.impl.JsonGeneratorBase: org.codehaus.jackson.impl.JsonWriteContext _writeContext>;

        $z0 = virtualinvoke $r1.<org.codehaus.jackson.impl.JsonWriteContext: boolean inObject()>();

        if $z0 != 0 goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Current context not an object but ");

        $r1 = r0.<org.codehaus.jackson.impl.JsonGeneratorBase: org.codehaus.jackson.impl.JsonWriteContext _writeContext>;

        $r3 = virtualinvoke $r1.<org.codehaus.jackson.impl.JsonWriteContext: java.lang.String getTypeDesc()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.codehaus.jackson.impl.JsonGeneratorBase: void _reportError(java.lang.String)>($r3);

     label1:
        $r1 = r0.<org.codehaus.jackson.impl.JsonGeneratorBase: org.codehaus.jackson.impl.JsonWriteContext _writeContext>;

        $r1 = virtualinvoke $r1.<org.codehaus.jackson.impl.JsonWriteContext: org.codehaus.jackson.impl.JsonWriteContext getParent()>();

        r0.<org.codehaus.jackson.impl.JsonGeneratorBase: org.codehaus.jackson.impl.JsonWriteContext _writeContext> = $r1;

        $r4 = r0.<org.codehaus.jackson.impl.JsonGeneratorBase: org.codehaus.jackson.PrettyPrinter _cfgPrettyPrinter>;

        if $r4 == null goto label2;

        $r4 = r0.<org.codehaus.jackson.impl.JsonGeneratorBase: org.codehaus.jackson.PrettyPrinter _cfgPrettyPrinter>;

        $r1 = r0.<org.codehaus.jackson.impl.JsonGeneratorBase: org.codehaus.jackson.impl.JsonWriteContext _writeContext>;

        $i0 = virtualinvoke $r1.<org.codehaus.jackson.impl.JsonWriteContext: int getEntryCount()>();

        interfaceinvoke $r4.<org.codehaus.jackson.PrettyPrinter: void writeEndObject(org.codehaus.jackson.JsonGenerator,int)>(r0, $i0);

        return;

     label2:
        virtualinvoke r0.<org.codehaus.jackson.impl.JsonGeneratorBase: void _writeEndObject()>();

        return;
    }

    public void writeObject(java.lang.Object) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.impl.JsonGeneratorBase r0;
        java.lang.Object $r1;
        org.codehaus.jackson.ObjectCodec $r2;

        r0 := @this: org.codehaus.jackson.impl.JsonGeneratorBase;

        $r1 := @parameter0: java.lang.Object;

        if $r1 != null goto label1;

        virtualinvoke r0.<org.codehaus.jackson.impl.JsonGeneratorBase: void writeNull()>();

        return;

     label1:
        $r2 = r0.<org.codehaus.jackson.impl.JsonGeneratorBase: org.codehaus.jackson.ObjectCodec _objectCodec>;

        if $r2 == null goto label2;

        $r2 = r0.<org.codehaus.jackson.impl.JsonGeneratorBase: org.codehaus.jackson.ObjectCodec _objectCodec>;

        virtualinvoke $r2.<org.codehaus.jackson.ObjectCodec: void writeValue(org.codehaus.jackson.JsonGenerator,java.lang.Object)>(r0, $r1);

        return;

     label2:
        virtualinvoke r0.<org.codehaus.jackson.impl.JsonGeneratorBase: void _writeSimpleObject(java.lang.Object)>($r1);

        return;
    }

    public void writeRawValue(java.lang.String) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        org.codehaus.jackson.impl.JsonGeneratorBase r0;
        java.lang.String $r1;

        r0 := @this: org.codehaus.jackson.impl.JsonGeneratorBase;

        $r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.codehaus.jackson.impl.JsonGeneratorBase: void _verifyValueWrite(java.lang.String)>("write raw value");

        virtualinvoke r0.<org.codehaus.jackson.impl.JsonGeneratorBase: void writeRaw(java.lang.String)>($r1);

        return;
    }

    public void writeRawValue(java.lang.String, int, int) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        org.codehaus.jackson.impl.JsonGeneratorBase r0;
        java.lang.String $r1;
        int $i0, $i1;

        r0 := @this: org.codehaus.jackson.impl.JsonGeneratorBase;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        virtualinvoke r0.<org.codehaus.jackson.impl.JsonGeneratorBase: void _verifyValueWrite(java.lang.String)>("write raw value");

        virtualinvoke r0.<org.codehaus.jackson.impl.JsonGeneratorBase: void writeRaw(java.lang.String,int,int)>($r1, $i0, $i1);

        return;
    }

    public void writeRawValue(char[], int, int) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        org.codehaus.jackson.impl.JsonGeneratorBase r0;
        char[] $r1;
        int $i0, $i1;

        r0 := @this: org.codehaus.jackson.impl.JsonGeneratorBase;

        $r1 := @parameter0: char[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        virtualinvoke r0.<org.codehaus.jackson.impl.JsonGeneratorBase: void _verifyValueWrite(java.lang.String)>("write raw value");

        virtualinvoke r0.<org.codehaus.jackson.impl.JsonGeneratorBase: void writeRaw(char[],int,int)>($r1, $i0, $i1);

        return;
    }

    public void writeStartArray() throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        org.codehaus.jackson.impl.JsonGeneratorBase r0;
        org.codehaus.jackson.impl.JsonWriteContext $r1;
        org.codehaus.jackson.PrettyPrinter $r2;

        r0 := @this: org.codehaus.jackson.impl.JsonGeneratorBase;

        virtualinvoke r0.<org.codehaus.jackson.impl.JsonGeneratorBase: void _verifyValueWrite(java.lang.String)>("start an array");

        $r1 = r0.<org.codehaus.jackson.impl.JsonGeneratorBase: org.codehaus.jackson.impl.JsonWriteContext _writeContext>;

        $r1 = virtualinvoke $r1.<org.codehaus.jackson.impl.JsonWriteContext: org.codehaus.jackson.impl.JsonWriteContext createChildArrayContext()>();

        r0.<org.codehaus.jackson.impl.JsonGeneratorBase: org.codehaus.jackson.impl.JsonWriteContext _writeContext> = $r1;

        $r2 = r0.<org.codehaus.jackson.impl.JsonGeneratorBase: org.codehaus.jackson.PrettyPrinter _cfgPrettyPrinter>;

        if $r2 == null goto label1;

        $r2 = r0.<org.codehaus.jackson.impl.JsonGeneratorBase: org.codehaus.jackson.PrettyPrinter _cfgPrettyPrinter>;

        interfaceinvoke $r2.<org.codehaus.jackson.PrettyPrinter: void writeStartArray(org.codehaus.jackson.JsonGenerator)>(r0);

        return;

     label1:
        virtualinvoke r0.<org.codehaus.jackson.impl.JsonGeneratorBase: void _writeStartArray()>();

        return;
    }

    public void writeStartObject() throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        org.codehaus.jackson.impl.JsonGeneratorBase r0;
        org.codehaus.jackson.impl.JsonWriteContext $r1;
        org.codehaus.jackson.PrettyPrinter $r2;

        r0 := @this: org.codehaus.jackson.impl.JsonGeneratorBase;

        virtualinvoke r0.<org.codehaus.jackson.impl.JsonGeneratorBase: void _verifyValueWrite(java.lang.String)>("start an object");

        $r1 = r0.<org.codehaus.jackson.impl.JsonGeneratorBase: org.codehaus.jackson.impl.JsonWriteContext _writeContext>;

        $r1 = virtualinvoke $r1.<org.codehaus.jackson.impl.JsonWriteContext: org.codehaus.jackson.impl.JsonWriteContext createChildObjectContext()>();

        r0.<org.codehaus.jackson.impl.JsonGeneratorBase: org.codehaus.jackson.impl.JsonWriteContext _writeContext> = $r1;

        $r2 = r0.<org.codehaus.jackson.impl.JsonGeneratorBase: org.codehaus.jackson.PrettyPrinter _cfgPrettyPrinter>;

        if $r2 == null goto label1;

        $r2 = r0.<org.codehaus.jackson.impl.JsonGeneratorBase: org.codehaus.jackson.PrettyPrinter _cfgPrettyPrinter>;

        interfaceinvoke $r2.<org.codehaus.jackson.PrettyPrinter: void writeStartObject(org.codehaus.jackson.JsonGenerator)>(r0);

        return;

     label1:
        virtualinvoke r0.<org.codehaus.jackson.impl.JsonGeneratorBase: void _writeStartObject()>();

        return;
    }

    public void writeTree(org.codehaus.jackson.JsonNode) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.impl.JsonGeneratorBase r0;
        org.codehaus.jackson.JsonNode $r1;
        org.codehaus.jackson.ObjectCodec $r2;
        java.lang.IllegalStateException $r3;

        r0 := @this: org.codehaus.jackson.impl.JsonGeneratorBase;

        $r1 := @parameter0: org.codehaus.jackson.JsonNode;

        if $r1 != null goto label1;

        virtualinvoke r0.<org.codehaus.jackson.impl.JsonGeneratorBase: void writeNull()>();

        return;

     label1:
        $r2 = r0.<org.codehaus.jackson.impl.JsonGeneratorBase: org.codehaus.jackson.ObjectCodec _objectCodec>;

        if $r2 != null goto label2;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("No ObjectCodec defined for the generator, can not serialize JsonNode-based trees");

        throw $r3;

     label2:
        $r2 = r0.<org.codehaus.jackson.impl.JsonGeneratorBase: org.codehaus.jackson.ObjectCodec _objectCodec>;

        virtualinvoke $r2.<org.codehaus.jackson.ObjectCodec: void writeTree(org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.JsonNode)>(r0, $r1);

        return;
    }
}
