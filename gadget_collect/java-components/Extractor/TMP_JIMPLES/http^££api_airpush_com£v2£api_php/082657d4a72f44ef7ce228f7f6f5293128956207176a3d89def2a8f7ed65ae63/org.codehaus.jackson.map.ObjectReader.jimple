public class org.codehaus.jackson.map.ObjectReader extends java.lang.Object implements org.codehaus.jackson.Versioned
{
    private static final org.codehaus.jackson.type.JavaType JSON_NODE_TYPE;
    protected final org.codehaus.jackson.map.DeserializationConfig _config;
    protected org.codehaus.jackson.map.jsontype.TypeResolverBuilder _defaultTyper;
    protected final org.codehaus.jackson.JsonFactory _jsonFactory;
    protected final org.codehaus.jackson.map.DeserializerProvider _provider;
    protected final java.util.concurrent.ConcurrentHashMap _rootDeserializers;
    protected final org.codehaus.jackson.map.jsontype.SubtypeResolver _subtypeResolver;
    protected final java.lang.Object _valueToUpdate;
    protected final org.codehaus.jackson.type.JavaType _valueType;
    protected org.codehaus.jackson.map.introspect.VisibilityChecker _visibilityChecker;

    static void <clinit>()
    {
        org.codehaus.jackson.type.JavaType $r0;

        $r0 = staticinvoke <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType type(java.lang.reflect.Type)>(class "Lorg/codehaus/jackson/JsonNode;");

        <org.codehaus.jackson.map.ObjectReader: org.codehaus.jackson.type.JavaType JSON_NODE_TYPE> = $r0;

        return;
    }

    protected void <init>(org.codehaus.jackson.map.ObjectMapper, org.codehaus.jackson.type.JavaType, java.lang.Object)
    {
        org.codehaus.jackson.map.ObjectReader r0;
        org.codehaus.jackson.map.ObjectMapper $r1;
        org.codehaus.jackson.type.JavaType $r2;
        java.lang.Object $r3;
        org.codehaus.jackson.map.introspect.VisibilityChecker $r4;
        org.codehaus.jackson.map.jsontype.SubtypeResolver $r5;
        java.util.concurrent.ConcurrentHashMap $r6;
        org.codehaus.jackson.map.jsontype.TypeResolverBuilder $r7;
        org.codehaus.jackson.map.DeserializerProvider $r8;
        org.codehaus.jackson.JsonFactory $r9;
        org.codehaus.jackson.map.DeserializationConfig $r10;
        boolean $z0;
        java.lang.IllegalArgumentException $r11;

        r0 := @this: org.codehaus.jackson.map.ObjectReader;

        $r1 := @parameter0: org.codehaus.jackson.map.ObjectMapper;

        $r2 := @parameter1: org.codehaus.jackson.type.JavaType;

        $r3 := @parameter2: java.lang.Object;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r6 = $r1.<org.codehaus.jackson.map.ObjectMapper: java.util.concurrent.ConcurrentHashMap _rootDeserializers>;

        r0.<org.codehaus.jackson.map.ObjectReader: java.util.concurrent.ConcurrentHashMap _rootDeserializers> = $r6;

        $r7 = $r1.<org.codehaus.jackson.map.ObjectMapper: org.codehaus.jackson.map.jsontype.TypeResolverBuilder _defaultTyper>;

        r0.<org.codehaus.jackson.map.ObjectReader: org.codehaus.jackson.map.jsontype.TypeResolverBuilder _defaultTyper> = $r7;

        $r4 = $r1.<org.codehaus.jackson.map.ObjectMapper: org.codehaus.jackson.map.introspect.VisibilityChecker _visibilityChecker>;

        r0.<org.codehaus.jackson.map.ObjectReader: org.codehaus.jackson.map.introspect.VisibilityChecker _visibilityChecker> = $r4;

        $r5 = $r1.<org.codehaus.jackson.map.ObjectMapper: org.codehaus.jackson.map.jsontype.SubtypeResolver _subtypeResolver>;

        r0.<org.codehaus.jackson.map.ObjectReader: org.codehaus.jackson.map.jsontype.SubtypeResolver _subtypeResolver> = $r5;

        $r8 = $r1.<org.codehaus.jackson.map.ObjectMapper: org.codehaus.jackson.map.DeserializerProvider _deserializerProvider>;

        r0.<org.codehaus.jackson.map.ObjectReader: org.codehaus.jackson.map.DeserializerProvider _provider> = $r8;

        $r9 = $r1.<org.codehaus.jackson.map.ObjectMapper: org.codehaus.jackson.JsonFactory _jsonFactory>;

        r0.<org.codehaus.jackson.map.ObjectReader: org.codehaus.jackson.JsonFactory _jsonFactory> = $r9;

        $r10 = $r1.<org.codehaus.jackson.map.ObjectMapper: org.codehaus.jackson.map.DeserializationConfig _deserializationConfig>;

        $r7 = r0.<org.codehaus.jackson.map.ObjectReader: org.codehaus.jackson.map.jsontype.TypeResolverBuilder _defaultTyper>;

        $r4 = r0.<org.codehaus.jackson.map.ObjectReader: org.codehaus.jackson.map.introspect.VisibilityChecker _visibilityChecker>;

        $r5 = r0.<org.codehaus.jackson.map.ObjectReader: org.codehaus.jackson.map.jsontype.SubtypeResolver _subtypeResolver>;

        $r10 = virtualinvoke $r10.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.map.DeserializationConfig createUnshared(org.codehaus.jackson.map.jsontype.TypeResolverBuilder,org.codehaus.jackson.map.introspect.VisibilityChecker,org.codehaus.jackson.map.jsontype.SubtypeResolver)>($r7, $r4, $r5);

        r0.<org.codehaus.jackson.map.ObjectReader: org.codehaus.jackson.map.DeserializationConfig _config> = $r10;

        r0.<org.codehaus.jackson.map.ObjectReader: org.codehaus.jackson.type.JavaType _valueType> = $r2;

        r0.<org.codehaus.jackson.map.ObjectReader: java.lang.Object _valueToUpdate> = $r3;

        if $r3 == null goto label1;

        $z0 = virtualinvoke $r2.<org.codehaus.jackson.type.JavaType: boolean isArrayType()>();

        if $z0 == 0 goto label1;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Can not update an array value");

        throw $r11;

     label1:
        return;
    }

    protected void <init>(org.codehaus.jackson.map.ObjectReader, org.codehaus.jackson.map.DeserializationConfig, org.codehaus.jackson.type.JavaType, java.lang.Object)
    {
        org.codehaus.jackson.map.ObjectReader r0, $r1;
        org.codehaus.jackson.map.DeserializationConfig $r2;
        org.codehaus.jackson.type.JavaType $r3;
        java.lang.Object $r4;
        boolean $z0;
        java.util.concurrent.ConcurrentHashMap $r5;
        org.codehaus.jackson.map.jsontype.TypeResolverBuilder $r6;
        org.codehaus.jackson.map.introspect.VisibilityChecker $r7;
        org.codehaus.jackson.map.DeserializerProvider $r8;
        org.codehaus.jackson.JsonFactory $r9;
        org.codehaus.jackson.map.jsontype.SubtypeResolver $r10;
        java.lang.IllegalArgumentException $r11;

        r0 := @this: org.codehaus.jackson.map.ObjectReader;

        $r1 := @parameter0: org.codehaus.jackson.map.ObjectReader;

        $r2 := @parameter1: org.codehaus.jackson.map.DeserializationConfig;

        $r3 := @parameter2: org.codehaus.jackson.type.JavaType;

        $r4 := @parameter3: java.lang.Object;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r5 = $r1.<org.codehaus.jackson.map.ObjectReader: java.util.concurrent.ConcurrentHashMap _rootDeserializers>;

        r0.<org.codehaus.jackson.map.ObjectReader: java.util.concurrent.ConcurrentHashMap _rootDeserializers> = $r5;

        $r6 = $r1.<org.codehaus.jackson.map.ObjectReader: org.codehaus.jackson.map.jsontype.TypeResolverBuilder _defaultTyper>;

        r0.<org.codehaus.jackson.map.ObjectReader: org.codehaus.jackson.map.jsontype.TypeResolverBuilder _defaultTyper> = $r6;

        $r7 = $r1.<org.codehaus.jackson.map.ObjectReader: org.codehaus.jackson.map.introspect.VisibilityChecker _visibilityChecker>;

        r0.<org.codehaus.jackson.map.ObjectReader: org.codehaus.jackson.map.introspect.VisibilityChecker _visibilityChecker> = $r7;

        $r8 = $r1.<org.codehaus.jackson.map.ObjectReader: org.codehaus.jackson.map.DeserializerProvider _provider>;

        r0.<org.codehaus.jackson.map.ObjectReader: org.codehaus.jackson.map.DeserializerProvider _provider> = $r8;

        $r9 = $r1.<org.codehaus.jackson.map.ObjectReader: org.codehaus.jackson.JsonFactory _jsonFactory>;

        r0.<org.codehaus.jackson.map.ObjectReader: org.codehaus.jackson.JsonFactory _jsonFactory> = $r9;

        $r10 = $r1.<org.codehaus.jackson.map.ObjectReader: org.codehaus.jackson.map.jsontype.SubtypeResolver _subtypeResolver>;

        r0.<org.codehaus.jackson.map.ObjectReader: org.codehaus.jackson.map.jsontype.SubtypeResolver _subtypeResolver> = $r10;

        r0.<org.codehaus.jackson.map.ObjectReader: org.codehaus.jackson.map.DeserializationConfig _config> = $r2;

        r0.<org.codehaus.jackson.map.ObjectReader: org.codehaus.jackson.type.JavaType _valueType> = $r3;

        r0.<org.codehaus.jackson.map.ObjectReader: java.lang.Object _valueToUpdate> = $r4;

        if $r4 == null goto label1;

        $z0 = virtualinvoke $r3.<org.codehaus.jackson.type.JavaType: boolean isArrayType()>();

        if $z0 == 0 goto label1;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Can not update an array value");

        throw $r11;

     label1:
        return;
    }

    protected static org.codehaus.jackson.JsonToken _initForReading(org.codehaus.jackson.JsonParser) throws java.io.IOException, org.codehaus.jackson.JsonParseException, org.codehaus.jackson.map.JsonMappingException
    {
        org.codehaus.jackson.JsonParser $r0;
        java.io.EOFException $r1;
        org.codehaus.jackson.JsonToken $r2;

        $r0 := @parameter0: org.codehaus.jackson.JsonParser;

        $r2 = virtualinvoke $r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken getCurrentToken()>();

        if $r2 != null goto label1;

        $r2 = virtualinvoke $r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken nextToken()>();

        if $r2 != null goto label1;

        $r1 = new java.io.EOFException;

        specialinvoke $r1.<java.io.EOFException: void <init>(java.lang.String)>("No content to map to Object due to end of input");

        throw $r1;

     label1:
        return $r2;
    }

    protected java.lang.Object _bind(org.codehaus.jackson.JsonParser) throws java.io.IOException, org.codehaus.jackson.JsonParseException, org.codehaus.jackson.map.JsonMappingException
    {
        org.codehaus.jackson.map.ObjectReader r0;
        org.codehaus.jackson.JsonParser $r1;
        org.codehaus.jackson.JsonToken $r2, $r3;
        java.lang.Object r4;
        org.codehaus.jackson.map.DeserializationConfig $r5;
        org.codehaus.jackson.map.DeserializationContext $r6;
        org.codehaus.jackson.type.JavaType $r7;
        org.codehaus.jackson.map.JsonDeserializer $r8;

        r0 := @this: org.codehaus.jackson.map.ObjectReader;

        $r1 := @parameter0: org.codehaus.jackson.JsonParser;

        $r2 = staticinvoke <org.codehaus.jackson.map.ObjectReader: org.codehaus.jackson.JsonToken _initForReading(org.codehaus.jackson.JsonParser)>($r1);

        $r3 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NULL>;

        if $r2 == $r3 goto label1;

        $r3 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken END_ARRAY>;

        if $r2 == $r3 goto label1;

        $r3 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken END_OBJECT>;

        if $r2 != $r3 goto label3;

     label1:
        r4 = r0.<org.codehaus.jackson.map.ObjectReader: java.lang.Object _valueToUpdate>;

     label2:
        virtualinvoke $r1.<org.codehaus.jackson.JsonParser: void clearCurrentToken()>();

        return r4;

     label3:
        $r5 = r0.<org.codehaus.jackson.map.ObjectReader: org.codehaus.jackson.map.DeserializationConfig _config>;

        $r6 = virtualinvoke r0.<org.codehaus.jackson.map.ObjectReader: org.codehaus.jackson.map.DeserializationContext _createDeserializationContext(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationConfig)>($r1, $r5);

        r4 = r0.<org.codehaus.jackson.map.ObjectReader: java.lang.Object _valueToUpdate>;

        if r4 != null goto label4;

        $r5 = r0.<org.codehaus.jackson.map.ObjectReader: org.codehaus.jackson.map.DeserializationConfig _config>;

        $r7 = r0.<org.codehaus.jackson.map.ObjectReader: org.codehaus.jackson.type.JavaType _valueType>;

        $r8 = virtualinvoke r0.<org.codehaus.jackson.map.ObjectReader: org.codehaus.jackson.map.JsonDeserializer _findRootDeserializer(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.type.JavaType)>($r5, $r7);

        r4 = virtualinvoke $r8.<org.codehaus.jackson.map.JsonDeserializer: java.lang.Object deserialize(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>($r1, $r6);

        goto label2;

     label4:
        $r5 = r0.<org.codehaus.jackson.map.ObjectReader: org.codehaus.jackson.map.DeserializationConfig _config>;

        $r7 = r0.<org.codehaus.jackson.map.ObjectReader: org.codehaus.jackson.type.JavaType _valueType>;

        $r8 = virtualinvoke r0.<org.codehaus.jackson.map.ObjectReader: org.codehaus.jackson.map.JsonDeserializer _findRootDeserializer(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.type.JavaType)>($r5, $r7);

        r4 = r0.<org.codehaus.jackson.map.ObjectReader: java.lang.Object _valueToUpdate>;

        virtualinvoke $r8.<org.codehaus.jackson.map.JsonDeserializer: java.lang.Object deserialize(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext,java.lang.Object)>($r1, $r6, r4);

        r4 = r0.<org.codehaus.jackson.map.ObjectReader: java.lang.Object _valueToUpdate>;

        goto label2;
    }

    protected java.lang.Object _bindAndClose(org.codehaus.jackson.JsonParser) throws java.io.IOException, org.codehaus.jackson.JsonParseException, org.codehaus.jackson.map.JsonMappingException
    {
        org.codehaus.jackson.map.ObjectReader r0;
        org.codehaus.jackson.JsonParser $r1;
        org.codehaus.jackson.JsonToken $r2, $r3;
        java.lang.Object r4;
        org.codehaus.jackson.map.DeserializationConfig $r5;
        org.codehaus.jackson.map.DeserializationContext $r6;
        org.codehaus.jackson.type.JavaType $r7;
        org.codehaus.jackson.map.JsonDeserializer $r8;
        java.lang.Throwable $r9, $r10, $r11;

        r0 := @this: org.codehaus.jackson.map.ObjectReader;

        $r1 := @parameter0: org.codehaus.jackson.JsonParser;

     label01:
        $r2 = staticinvoke <org.codehaus.jackson.map.ObjectReader: org.codehaus.jackson.JsonToken _initForReading(org.codehaus.jackson.JsonParser)>($r1);

        $r3 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NULL>;

     label02:
        if $r2 == $r3 goto label07;

     label03:
        $r3 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken END_ARRAY>;

     label04:
        if $r2 == $r3 goto label07;

     label05:
        $r3 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken END_OBJECT>;

     label06:
        if $r2 != $r3 goto label10;

     label07:
        r4 = r0.<org.codehaus.jackson.map.ObjectReader: java.lang.Object _valueToUpdate>;

     label08:
        virtualinvoke $r1.<org.codehaus.jackson.JsonParser: void close()>();

     label09:
        return r4;

     label10:
        $r5 = r0.<org.codehaus.jackson.map.ObjectReader: org.codehaus.jackson.map.DeserializationConfig _config>;

        $r6 = virtualinvoke r0.<org.codehaus.jackson.map.ObjectReader: org.codehaus.jackson.map.DeserializationContext _createDeserializationContext(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationConfig)>($r1, $r5);

        r4 = r0.<org.codehaus.jackson.map.ObjectReader: java.lang.Object _valueToUpdate>;

     label11:
        if r4 != null goto label14;

     label12:
        $r5 = r0.<org.codehaus.jackson.map.ObjectReader: org.codehaus.jackson.map.DeserializationConfig _config>;

        $r7 = r0.<org.codehaus.jackson.map.ObjectReader: org.codehaus.jackson.type.JavaType _valueType>;

        $r8 = virtualinvoke r0.<org.codehaus.jackson.map.ObjectReader: org.codehaus.jackson.map.JsonDeserializer _findRootDeserializer(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.type.JavaType)>($r5, $r7);

        r4 = virtualinvoke $r8.<org.codehaus.jackson.map.JsonDeserializer: java.lang.Object deserialize(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>($r1, $r6);

     label13:
        goto label08;

     label14:
        $r5 = r0.<org.codehaus.jackson.map.ObjectReader: org.codehaus.jackson.map.DeserializationConfig _config>;

        $r7 = r0.<org.codehaus.jackson.map.ObjectReader: org.codehaus.jackson.type.JavaType _valueType>;

        $r8 = virtualinvoke r0.<org.codehaus.jackson.map.ObjectReader: org.codehaus.jackson.map.JsonDeserializer _findRootDeserializer(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.type.JavaType)>($r5, $r7);

        r4 = r0.<org.codehaus.jackson.map.ObjectReader: java.lang.Object _valueToUpdate>;

        virtualinvoke $r8.<org.codehaus.jackson.map.JsonDeserializer: java.lang.Object deserialize(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext,java.lang.Object)>($r1, $r6, r4);

        r4 = r0.<org.codehaus.jackson.map.ObjectReader: java.lang.Object _valueToUpdate>;

     label15:
        goto label08;

     label16:
        $r9 := @caughtexception;

     label17:
        virtualinvoke $r1.<org.codehaus.jackson.JsonParser: void close()>();

     label18:
        throw $r9;

     label19:
        $r10 := @caughtexception;

        return r4;

     label20:
        $r11 := @caughtexception;

        goto label18;

        catch java.lang.Throwable from label01 to label02 with label16;
        catch java.lang.Throwable from label03 to label04 with label16;
        catch java.lang.Throwable from label05 to label06 with label16;
        catch java.lang.Throwable from label07 to label08 with label16;
        catch java.io.IOException from label08 to label09 with label19;
        catch java.lang.Throwable from label10 to label11 with label16;
        catch java.lang.Throwable from label12 to label13 with label16;
        catch java.lang.Throwable from label14 to label15 with label16;
        catch java.io.IOException from label17 to label18 with label20;
    }

    protected org.codehaus.jackson.JsonNode _bindAndCloseAsTree(org.codehaus.jackson.JsonParser) throws java.io.IOException, org.codehaus.jackson.JsonParseException, org.codehaus.jackson.map.JsonMappingException
    {
        org.codehaus.jackson.map.ObjectReader r0;
        org.codehaus.jackson.JsonParser $r1;
        org.codehaus.jackson.JsonNode $r2;
        java.lang.Throwable $r3, $r4, $r5;

        r0 := @this: org.codehaus.jackson.map.ObjectReader;

        $r1 := @parameter0: org.codehaus.jackson.JsonParser;

     label1:
        $r2 = virtualinvoke r0.<org.codehaus.jackson.map.ObjectReader: org.codehaus.jackson.JsonNode _bindAsTree(org.codehaus.jackson.JsonParser)>($r1);

     label2:
        virtualinvoke $r1.<org.codehaus.jackson.JsonParser: void close()>();

     label3:
        return $r2;

     label4:
        $r3 := @caughtexception;

     label5:
        virtualinvoke $r1.<org.codehaus.jackson.JsonParser: void close()>();

     label6:
        throw $r3;

     label7:
        $r4 := @caughtexception;

        return $r2;

     label8:
        $r5 := @caughtexception;

        goto label6;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.io.IOException from label2 to label3 with label7;
        catch java.io.IOException from label5 to label6 with label8;
    }

    protected org.codehaus.jackson.JsonNode _bindAsTree(org.codehaus.jackson.JsonParser) throws java.io.IOException, org.codehaus.jackson.JsonParseException, org.codehaus.jackson.map.JsonMappingException
    {
        org.codehaus.jackson.map.ObjectReader r0;
        org.codehaus.jackson.JsonParser $r1;
        org.codehaus.jackson.type.JavaType $r2;
        org.codehaus.jackson.JsonToken $r3, $r4;
        org.codehaus.jackson.JsonNode r5;
        org.codehaus.jackson.map.DeserializationConfig $r6;
        org.codehaus.jackson.map.DeserializationContext $r7;
        org.codehaus.jackson.map.JsonDeserializer $r8;
        java.lang.Object $r9;

        r0 := @this: org.codehaus.jackson.map.ObjectReader;

        $r1 := @parameter0: org.codehaus.jackson.JsonParser;

        $r3 = staticinvoke <org.codehaus.jackson.map.ObjectReader: org.codehaus.jackson.JsonToken _initForReading(org.codehaus.jackson.JsonParser)>($r1);

        $r4 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NULL>;

        if $r3 == $r4 goto label1;

        $r4 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken END_ARRAY>;

        if $r3 == $r4 goto label1;

        $r4 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken END_OBJECT>;

        if $r3 != $r4 goto label3;

     label1:
        r5 = <org.codehaus.jackson.node.NullNode: org.codehaus.jackson.node.NullNode instance>;

     label2:
        virtualinvoke $r1.<org.codehaus.jackson.JsonParser: void clearCurrentToken()>();

        return r5;

     label3:
        $r6 = r0.<org.codehaus.jackson.map.ObjectReader: org.codehaus.jackson.map.DeserializationConfig _config>;

        $r7 = virtualinvoke r0.<org.codehaus.jackson.map.ObjectReader: org.codehaus.jackson.map.DeserializationContext _createDeserializationContext(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationConfig)>($r1, $r6);

        $r6 = r0.<org.codehaus.jackson.map.ObjectReader: org.codehaus.jackson.map.DeserializationConfig _config>;

        $r2 = <org.codehaus.jackson.map.ObjectReader: org.codehaus.jackson.type.JavaType JSON_NODE_TYPE>;

        $r8 = virtualinvoke r0.<org.codehaus.jackson.map.ObjectReader: org.codehaus.jackson.map.JsonDeserializer _findRootDeserializer(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.type.JavaType)>($r6, $r2);

        $r9 = virtualinvoke $r8.<org.codehaus.jackson.map.JsonDeserializer: java.lang.Object deserialize(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>($r1, $r7);

        r5 = (org.codehaus.jackson.JsonNode) $r9;

        goto label2;
    }

    protected org.codehaus.jackson.map.DeserializationContext _createDeserializationContext(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationConfig)
    {
        org.codehaus.jackson.map.ObjectReader r0;
        org.codehaus.jackson.JsonParser $r1;
        org.codehaus.jackson.map.DeserializationConfig $r2;
        org.codehaus.jackson.map.deser.StdDeserializationContext $r3;
        org.codehaus.jackson.map.DeserializerProvider $r4;

        r0 := @this: org.codehaus.jackson.map.ObjectReader;

        $r1 := @parameter0: org.codehaus.jackson.JsonParser;

        $r2 := @parameter1: org.codehaus.jackson.map.DeserializationConfig;

        $r3 = new org.codehaus.jackson.map.deser.StdDeserializationContext;

        $r4 = r0.<org.codehaus.jackson.map.ObjectReader: org.codehaus.jackson.map.DeserializerProvider _provider>;

        specialinvoke $r3.<org.codehaus.jackson.map.deser.StdDeserializationContext: void <init>(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializerProvider)>($r2, $r1, $r4);

        return $r3;
    }

    protected org.codehaus.jackson.map.JsonDeserializer _findRootDeserializer(org.codehaus.jackson.map.DeserializationConfig, org.codehaus.jackson.type.JavaType) throws org.codehaus.jackson.map.JsonMappingException
    {
        org.codehaus.jackson.map.ObjectReader r0;
        org.codehaus.jackson.map.DeserializationConfig $r1;
        org.codehaus.jackson.type.JavaType $r2;
        java.util.concurrent.ConcurrentHashMap $r3;
        java.lang.Object $r4;
        org.codehaus.jackson.map.JsonDeserializer r5;
        org.codehaus.jackson.map.DeserializerProvider $r6;
        org.codehaus.jackson.map.JsonMappingException $r7;
        java.lang.StringBuilder $r8;
        java.lang.String $r9;

        r0 := @this: org.codehaus.jackson.map.ObjectReader;

        $r1 := @parameter0: org.codehaus.jackson.map.DeserializationConfig;

        $r2 := @parameter1: org.codehaus.jackson.type.JavaType;

        $r3 = r0.<org.codehaus.jackson.map.ObjectReader: java.util.concurrent.ConcurrentHashMap _rootDeserializers>;

        $r4 = virtualinvoke $r3.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>($r2);

        r5 = (org.codehaus.jackson.map.JsonDeserializer) $r4;

        if r5 == null goto label1;

        return r5;

     label1:
        $r6 = r0.<org.codehaus.jackson.map.ObjectReader: org.codehaus.jackson.map.DeserializerProvider _provider>;

        r5 = virtualinvoke $r6.<org.codehaus.jackson.map.DeserializerProvider: org.codehaus.jackson.map.JsonDeserializer findTypedValueDeserializer(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanProperty)>($r1, $r2, null);

        if r5 != null goto label2;

        $r7 = new org.codehaus.jackson.map.JsonMappingException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can not find a deserializer for type ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<org.codehaus.jackson.map.JsonMappingException: void <init>(java.lang.String)>($r9);

        throw $r7;

     label2:
        $r3 = r0.<org.codehaus.jackson.map.ObjectReader: java.util.concurrent.ConcurrentHashMap _rootDeserializers>;

        virtualinvoke $r3.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, r5);

        return r5;
    }

    public org.codehaus.jackson.JsonNode readTree(java.io.InputStream) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.map.ObjectReader r0;
        java.io.InputStream $r1;
        org.codehaus.jackson.JsonFactory $r2;
        org.codehaus.jackson.JsonParser $r3;
        org.codehaus.jackson.JsonNode $r4;

        r0 := @this: org.codehaus.jackson.map.ObjectReader;

        $r1 := @parameter0: java.io.InputStream;

        $r2 = r0.<org.codehaus.jackson.map.ObjectReader: org.codehaus.jackson.JsonFactory _jsonFactory>;

        $r3 = virtualinvoke $r2.<org.codehaus.jackson.JsonFactory: org.codehaus.jackson.JsonParser createJsonParser(java.io.InputStream)>($r1);

        $r4 = virtualinvoke r0.<org.codehaus.jackson.map.ObjectReader: org.codehaus.jackson.JsonNode _bindAndCloseAsTree(org.codehaus.jackson.JsonParser)>($r3);

        return $r4;
    }

    public org.codehaus.jackson.JsonNode readTree(java.io.Reader) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.map.ObjectReader r0;
        java.io.Reader $r1;
        org.codehaus.jackson.JsonFactory $r2;
        org.codehaus.jackson.JsonParser $r3;
        org.codehaus.jackson.JsonNode $r4;

        r0 := @this: org.codehaus.jackson.map.ObjectReader;

        $r1 := @parameter0: java.io.Reader;

        $r2 = r0.<org.codehaus.jackson.map.ObjectReader: org.codehaus.jackson.JsonFactory _jsonFactory>;

        $r3 = virtualinvoke $r2.<org.codehaus.jackson.JsonFactory: org.codehaus.jackson.JsonParser createJsonParser(java.io.Reader)>($r1);

        $r4 = virtualinvoke r0.<org.codehaus.jackson.map.ObjectReader: org.codehaus.jackson.JsonNode _bindAndCloseAsTree(org.codehaus.jackson.JsonParser)>($r3);

        return $r4;
    }

    public org.codehaus.jackson.JsonNode readTree(java.lang.String) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.map.ObjectReader r0;
        java.lang.String $r1;
        org.codehaus.jackson.JsonFactory $r2;
        org.codehaus.jackson.JsonParser $r3;
        org.codehaus.jackson.JsonNode $r4;

        r0 := @this: org.codehaus.jackson.map.ObjectReader;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.codehaus.jackson.map.ObjectReader: org.codehaus.jackson.JsonFactory _jsonFactory>;

        $r3 = virtualinvoke $r2.<org.codehaus.jackson.JsonFactory: org.codehaus.jackson.JsonParser createJsonParser(java.lang.String)>($r1);

        $r4 = virtualinvoke r0.<org.codehaus.jackson.map.ObjectReader: org.codehaus.jackson.JsonNode _bindAndCloseAsTree(org.codehaus.jackson.JsonParser)>($r3);

        return $r4;
    }

    public org.codehaus.jackson.JsonNode readTree(org.codehaus.jackson.JsonParser) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.map.ObjectReader r0;
        org.codehaus.jackson.JsonParser $r1;
        org.codehaus.jackson.JsonNode $r2;

        r0 := @this: org.codehaus.jackson.map.ObjectReader;

        $r1 := @parameter0: org.codehaus.jackson.JsonParser;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.map.ObjectReader: org.codehaus.jackson.JsonNode _bindAsTree(org.codehaus.jackson.JsonParser)>($r1);

        return $r2;
    }

    public java.lang.Object readValue(java.io.File) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.map.ObjectReader r0;
        java.io.File $r1;
        org.codehaus.jackson.JsonFactory $r2;
        org.codehaus.jackson.JsonParser $r3;
        java.lang.Object $r4;

        r0 := @this: org.codehaus.jackson.map.ObjectReader;

        $r1 := @parameter0: java.io.File;

        $r2 = r0.<org.codehaus.jackson.map.ObjectReader: org.codehaus.jackson.JsonFactory _jsonFactory>;

        $r3 = virtualinvoke $r2.<org.codehaus.jackson.JsonFactory: org.codehaus.jackson.JsonParser createJsonParser(java.io.File)>($r1);

        $r4 = virtualinvoke r0.<org.codehaus.jackson.map.ObjectReader: java.lang.Object _bindAndClose(org.codehaus.jackson.JsonParser)>($r3);

        return $r4;
    }

    public java.lang.Object readValue(java.io.InputStream) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.map.ObjectReader r0;
        java.io.InputStream $r1;
        org.codehaus.jackson.JsonFactory $r2;
        org.codehaus.jackson.JsonParser $r3;
        java.lang.Object $r4;

        r0 := @this: org.codehaus.jackson.map.ObjectReader;

        $r1 := @parameter0: java.io.InputStream;

        $r2 = r0.<org.codehaus.jackson.map.ObjectReader: org.codehaus.jackson.JsonFactory _jsonFactory>;

        $r3 = virtualinvoke $r2.<org.codehaus.jackson.JsonFactory: org.codehaus.jackson.JsonParser createJsonParser(java.io.InputStream)>($r1);

        $r4 = virtualinvoke r0.<org.codehaus.jackson.map.ObjectReader: java.lang.Object _bindAndClose(org.codehaus.jackson.JsonParser)>($r3);

        return $r4;
    }

    public java.lang.Object readValue(java.io.Reader) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.map.ObjectReader r0;
        java.io.Reader $r1;
        org.codehaus.jackson.JsonFactory $r2;
        org.codehaus.jackson.JsonParser $r3;
        java.lang.Object $r4;

        r0 := @this: org.codehaus.jackson.map.ObjectReader;

        $r1 := @parameter0: java.io.Reader;

        $r2 = r0.<org.codehaus.jackson.map.ObjectReader: org.codehaus.jackson.JsonFactory _jsonFactory>;

        $r3 = virtualinvoke $r2.<org.codehaus.jackson.JsonFactory: org.codehaus.jackson.JsonParser createJsonParser(java.io.Reader)>($r1);

        $r4 = virtualinvoke r0.<org.codehaus.jackson.map.ObjectReader: java.lang.Object _bindAndClose(org.codehaus.jackson.JsonParser)>($r3);

        return $r4;
    }

    public java.lang.Object readValue(java.lang.String) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.map.ObjectReader r0;
        java.lang.String $r1;
        org.codehaus.jackson.JsonFactory $r2;
        org.codehaus.jackson.JsonParser $r3;
        java.lang.Object $r4;

        r0 := @this: org.codehaus.jackson.map.ObjectReader;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.codehaus.jackson.map.ObjectReader: org.codehaus.jackson.JsonFactory _jsonFactory>;

        $r3 = virtualinvoke $r2.<org.codehaus.jackson.JsonFactory: org.codehaus.jackson.JsonParser createJsonParser(java.lang.String)>($r1);

        $r4 = virtualinvoke r0.<org.codehaus.jackson.map.ObjectReader: java.lang.Object _bindAndClose(org.codehaus.jackson.JsonParser)>($r3);

        return $r4;
    }

    public java.lang.Object readValue(java.net.URL) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.map.ObjectReader r0;
        java.net.URL $r1;
        org.codehaus.jackson.JsonFactory $r2;
        org.codehaus.jackson.JsonParser $r3;
        java.lang.Object $r4;

        r0 := @this: org.codehaus.jackson.map.ObjectReader;

        $r1 := @parameter0: java.net.URL;

        $r2 = r0.<org.codehaus.jackson.map.ObjectReader: org.codehaus.jackson.JsonFactory _jsonFactory>;

        $r3 = virtualinvoke $r2.<org.codehaus.jackson.JsonFactory: org.codehaus.jackson.JsonParser createJsonParser(java.net.URL)>($r1);

        $r4 = virtualinvoke r0.<org.codehaus.jackson.map.ObjectReader: java.lang.Object _bindAndClose(org.codehaus.jackson.JsonParser)>($r3);

        return $r4;
    }

    public java.lang.Object readValue(org.codehaus.jackson.JsonNode) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.map.ObjectReader r0;
        org.codehaus.jackson.JsonNode $r1;
        org.codehaus.jackson.JsonParser $r2;
        java.lang.Object $r3;

        r0 := @this: org.codehaus.jackson.map.ObjectReader;

        $r1 := @parameter0: org.codehaus.jackson.JsonNode;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.JsonNode: org.codehaus.jackson.JsonParser traverse()>();

        $r3 = virtualinvoke r0.<org.codehaus.jackson.map.ObjectReader: java.lang.Object _bindAndClose(org.codehaus.jackson.JsonParser)>($r2);

        return $r3;
    }

    public java.lang.Object readValue(org.codehaus.jackson.JsonParser) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.map.ObjectReader r0;
        org.codehaus.jackson.JsonParser $r1;
        java.lang.Object $r2;

        r0 := @this: org.codehaus.jackson.map.ObjectReader;

        $r1 := @parameter0: org.codehaus.jackson.JsonParser;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.map.ObjectReader: java.lang.Object _bind(org.codehaus.jackson.JsonParser)>($r1);

        return $r2;
    }

    public java.lang.Object readValue(byte[]) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.map.ObjectReader r0;
        byte[] $r1;
        org.codehaus.jackson.JsonFactory $r2;
        org.codehaus.jackson.JsonParser $r3;
        java.lang.Object $r4;

        r0 := @this: org.codehaus.jackson.map.ObjectReader;

        $r1 := @parameter0: byte[];

        $r2 = r0.<org.codehaus.jackson.map.ObjectReader: org.codehaus.jackson.JsonFactory _jsonFactory>;

        $r3 = virtualinvoke $r2.<org.codehaus.jackson.JsonFactory: org.codehaus.jackson.JsonParser createJsonParser(byte[])>($r1);

        $r4 = virtualinvoke r0.<org.codehaus.jackson.map.ObjectReader: java.lang.Object _bindAndClose(org.codehaus.jackson.JsonParser)>($r3);

        return $r4;
    }

    public java.lang.Object readValue(byte[], int, int) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.map.ObjectReader r0;
        byte[] $r1;
        int $i0, $i1;
        org.codehaus.jackson.JsonFactory $r2;
        org.codehaus.jackson.JsonParser $r3;
        java.lang.Object $r4;

        r0 := @this: org.codehaus.jackson.map.ObjectReader;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = r0.<org.codehaus.jackson.map.ObjectReader: org.codehaus.jackson.JsonFactory _jsonFactory>;

        $r3 = virtualinvoke $r2.<org.codehaus.jackson.JsonFactory: org.codehaus.jackson.JsonParser createJsonParser(byte[],int,int)>($r1, $i0, $i1);

        $r4 = virtualinvoke r0.<org.codehaus.jackson.map.ObjectReader: java.lang.Object _bindAndClose(org.codehaus.jackson.JsonParser)>($r3);

        return $r4;
    }

    public org.codehaus.jackson.Version version()
    {
        org.codehaus.jackson.map.ObjectReader r0;
        java.lang.Class $r1;
        org.codehaus.jackson.Version $r2;

        r0 := @this: org.codehaus.jackson.map.ObjectReader;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = staticinvoke <org.codehaus.jackson.util.VersionUtil: org.codehaus.jackson.Version versionFor(java.lang.Class)>($r1);

        return $r2;
    }

    public org.codehaus.jackson.map.ObjectReader withNodeFactory(org.codehaus.jackson.node.JsonNodeFactory)
    {
        org.codehaus.jackson.map.ObjectReader r0, $r6;
        org.codehaus.jackson.node.JsonNodeFactory $r1, $r5;
        org.codehaus.jackson.type.JavaType $r2;
        java.lang.Object $r3;
        org.codehaus.jackson.map.DeserializationConfig $r4;

        r0 := @this: org.codehaus.jackson.map.ObjectReader;

        $r1 := @parameter0: org.codehaus.jackson.node.JsonNodeFactory;

        $r4 = r0.<org.codehaus.jackson.map.ObjectReader: org.codehaus.jackson.map.DeserializationConfig _config>;

        $r5 = virtualinvoke $r4.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.node.JsonNodeFactory getNodeFactory()>();

        if $r1 != $r5 goto label1;

        return r0;

     label1:
        $r4 = r0.<org.codehaus.jackson.map.ObjectReader: org.codehaus.jackson.map.DeserializationConfig _config>;

        $r4 = virtualinvoke $r4.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.map.DeserializationConfig createUnshared(org.codehaus.jackson.node.JsonNodeFactory)>($r1);

        $r6 = new org.codehaus.jackson.map.ObjectReader;

        $r2 = r0.<org.codehaus.jackson.map.ObjectReader: org.codehaus.jackson.type.JavaType _valueType>;

        $r3 = r0.<org.codehaus.jackson.map.ObjectReader: java.lang.Object _valueToUpdate>;

        specialinvoke $r6.<org.codehaus.jackson.map.ObjectReader: void <init>(org.codehaus.jackson.map.ObjectReader,org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.type.JavaType,java.lang.Object)>(r0, $r4, $r2, $r3);

        return $r6;
    }

    public org.codehaus.jackson.map.ObjectReader withType(java.lang.Class)
    {
        org.codehaus.jackson.map.ObjectReader r0;
        java.lang.Class r1;
        org.codehaus.jackson.type.JavaType $r2;

        r0 := @this: org.codehaus.jackson.map.ObjectReader;

        r1 := @parameter0: java.lang.Class;

        $r2 = staticinvoke <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType type(java.lang.reflect.Type)>(r1);

        r0 = virtualinvoke r0.<org.codehaus.jackson.map.ObjectReader: org.codehaus.jackson.map.ObjectReader withType(org.codehaus.jackson.type.JavaType)>($r2);

        return r0;
    }

    public org.codehaus.jackson.map.ObjectReader withType(java.lang.reflect.Type)
    {
        org.codehaus.jackson.map.ObjectReader r0;
        java.lang.reflect.Type $r1;
        org.codehaus.jackson.type.JavaType $r2;

        r0 := @this: org.codehaus.jackson.map.ObjectReader;

        $r1 := @parameter0: java.lang.reflect.Type;

        $r2 = staticinvoke <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType type(java.lang.reflect.Type)>($r1);

        r0 = virtualinvoke r0.<org.codehaus.jackson.map.ObjectReader: org.codehaus.jackson.map.ObjectReader withType(org.codehaus.jackson.type.JavaType)>($r2);

        return r0;
    }

    public org.codehaus.jackson.map.ObjectReader withType(org.codehaus.jackson.type.JavaType)
    {
        org.codehaus.jackson.map.ObjectReader r0, $r5;
        org.codehaus.jackson.type.JavaType $r1, $r4;
        org.codehaus.jackson.map.DeserializationConfig $r2;
        java.lang.Object $r3;

        r0 := @this: org.codehaus.jackson.map.ObjectReader;

        $r1 := @parameter0: org.codehaus.jackson.type.JavaType;

        $r4 = r0.<org.codehaus.jackson.map.ObjectReader: org.codehaus.jackson.type.JavaType _valueType>;

        if $r1 != $r4 goto label1;

        return r0;

     label1:
        $r5 = new org.codehaus.jackson.map.ObjectReader;

        $r2 = r0.<org.codehaus.jackson.map.ObjectReader: org.codehaus.jackson.map.DeserializationConfig _config>;

        $r3 = r0.<org.codehaus.jackson.map.ObjectReader: java.lang.Object _valueToUpdate>;

        specialinvoke $r5.<org.codehaus.jackson.map.ObjectReader: void <init>(org.codehaus.jackson.map.ObjectReader,org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.type.JavaType,java.lang.Object)>(r0, $r2, $r1, $r3);

        return $r5;
    }

    public org.codehaus.jackson.map.ObjectReader withValueToUpdate(java.lang.Object)
    {
        org.codehaus.jackson.map.ObjectReader r0, $r6;
        java.lang.Object $r1, $r2;
        java.lang.IllegalArgumentException $r3;
        java.lang.Class $r4;
        org.codehaus.jackson.type.JavaType $r5;
        org.codehaus.jackson.map.DeserializationConfig $r7;

        r0 := @this: org.codehaus.jackson.map.ObjectReader;

        $r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.codehaus.jackson.map.ObjectReader: java.lang.Object _valueToUpdate>;

        if $r1 != $r2 goto label1;

        return r0;

     label1:
        if $r1 != null goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("cat not update null value");

        throw $r3;

     label2:
        $r4 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = staticinvoke <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType type(java.lang.reflect.Type)>($r4);

        $r6 = new org.codehaus.jackson.map.ObjectReader;

        $r7 = r0.<org.codehaus.jackson.map.ObjectReader: org.codehaus.jackson.map.DeserializationConfig _config>;

        specialinvoke $r6.<org.codehaus.jackson.map.ObjectReader: void <init>(org.codehaus.jackson.map.ObjectReader,org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.type.JavaType,java.lang.Object)>(r0, $r7, $r5, $r1);

        return $r6;
    }
}
