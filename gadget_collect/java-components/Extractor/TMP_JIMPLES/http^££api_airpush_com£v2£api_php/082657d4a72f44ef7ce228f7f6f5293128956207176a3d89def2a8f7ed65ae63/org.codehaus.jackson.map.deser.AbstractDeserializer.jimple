public class org.codehaus.jackson.map.deser.AbstractDeserializer extends org.codehaus.jackson.map.JsonDeserializer
{
    protected final org.codehaus.jackson.type.JavaType _baseType;

    public void <init>(org.codehaus.jackson.type.JavaType)
    {
        org.codehaus.jackson.map.deser.AbstractDeserializer r0;
        org.codehaus.jackson.type.JavaType $r1;

        r0 := @this: org.codehaus.jackson.map.deser.AbstractDeserializer;

        $r1 := @parameter0: org.codehaus.jackson.type.JavaType;

        specialinvoke r0.<org.codehaus.jackson.map.JsonDeserializer: void <init>()>();

        r0.<org.codehaus.jackson.map.deser.AbstractDeserializer: org.codehaus.jackson.type.JavaType _baseType> = $r1;

        return;
    }

    public java.lang.Object deserialize(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.map.deser.AbstractDeserializer r0;
        org.codehaus.jackson.JsonParser $r1;
        org.codehaus.jackson.map.DeserializationContext $r2;
        org.codehaus.jackson.type.JavaType $r3;
        java.lang.Class $r4;
        org.codehaus.jackson.map.JsonMappingException $r5;

        r0 := @this: org.codehaus.jackson.map.deser.AbstractDeserializer;

        $r1 := @parameter0: org.codehaus.jackson.JsonParser;

        $r2 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        $r3 = r0.<org.codehaus.jackson.map.deser.AbstractDeserializer: org.codehaus.jackson.type.JavaType _baseType>;

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r2.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.JsonMappingException instantiationException(java.lang.Class,java.lang.String)>($r4, "abstract types can only be instantiated with additional type information");

        throw $r5;
    }

    public java.lang.Object deserializeWithType(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext, org.codehaus.jackson.map.TypeDeserializer) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.map.deser.AbstractDeserializer r0;
        org.codehaus.jackson.JsonParser $r1;
        org.codehaus.jackson.map.DeserializationContext $r2;
        org.codehaus.jackson.map.TypeDeserializer $r3;
        int[] $r4;
        org.codehaus.jackson.JsonToken $r5;
        int $i0;
        java.lang.Object $r6;
        java.lang.String $r7;
        org.codehaus.jackson.map.DeserializationConfig$Feature $r8;
        boolean $z0;
        java.math.BigInteger $r9;
        java.lang.Integer $r10;
        java.math.BigDecimal $r11;
        double $d0;
        java.lang.Double $r12;
        java.lang.Boolean r13;

        r0 := @this: org.codehaus.jackson.map.deser.AbstractDeserializer;

        $r1 := @parameter0: org.codehaus.jackson.JsonParser;

        $r2 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        $r3 := @parameter2: org.codehaus.jackson.map.TypeDeserializer;

        $r4 = <org.codehaus.jackson.map.deser.AbstractDeserializer$1: int[] $SwitchMap$org$codehaus$jackson$JsonToken>;

        $r5 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken getCurrentToken()>();

        $i0 = virtualinvoke $r5.<org.codehaus.jackson.JsonToken: int ordinal()>();

        $i0 = $r4[$i0];

        lookupswitch($i0)
        {
            case 1: goto label02;
            case 2: goto label03;
            case 3: goto label05;
            case 4: goto label07;
            case 5: goto label08;
            case 6: goto label09;
            case 7: goto label10;
            default: goto label01;
        };

     label01:
        $r6 = virtualinvoke $r3.<org.codehaus.jackson.map.TypeDeserializer: java.lang.Object deserializeTypedFromObject(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>($r1, $r2);

        return $r6;

     label02:
        $r7 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: java.lang.String getText()>();

        return $r7;

     label03:
        $r8 = <org.codehaus.jackson.map.DeserializationConfig$Feature: org.codehaus.jackson.map.DeserializationConfig$Feature USE_BIG_INTEGER_FOR_INTS>;

        $z0 = virtualinvoke $r2.<org.codehaus.jackson.map.DeserializationContext: boolean isEnabled(org.codehaus.jackson.map.DeserializationConfig$Feature)>($r8);

        if $z0 == 0 goto label04;

        $r9 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: java.math.BigInteger getBigIntegerValue()>();

        return $r9;

     label04:
        $i0 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: int getIntValue()>();

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        return $r10;

     label05:
        $r8 = <org.codehaus.jackson.map.DeserializationConfig$Feature: org.codehaus.jackson.map.DeserializationConfig$Feature USE_BIG_DECIMAL_FOR_FLOATS>;

        $z0 = virtualinvoke $r2.<org.codehaus.jackson.map.DeserializationContext: boolean isEnabled(org.codehaus.jackson.map.DeserializationConfig$Feature)>($r8);

        if $z0 == 0 goto label06;

        $r11 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: java.math.BigDecimal getDecimalValue()>();

        return $r11;

     label06:
        $d0 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: double getDoubleValue()>();

        $r12 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        return $r12;

     label07:
        r13 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        return r13;

     label08:
        r13 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        return r13;

     label09:
        $r6 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: java.lang.Object getEmbeddedObject()>();

        return $r6;

     label10:
        return null;
    }
}
