public abstract class org.codehaus.jackson.map.deser.StdDeserializer extends org.codehaus.jackson.map.JsonDeserializer
{
    protected final java.lang.Class _valueClass;

    protected void <init>(java.lang.Class)
    {
        org.codehaus.jackson.map.deser.StdDeserializer r0;
        java.lang.Class r1;

        r0 := @this: org.codehaus.jackson.map.deser.StdDeserializer;

        r1 := @parameter0: java.lang.Class;

        specialinvoke r0.<org.codehaus.jackson.map.JsonDeserializer: void <init>()>();

        r0.<org.codehaus.jackson.map.deser.StdDeserializer: java.lang.Class _valueClass> = r1;

        return;
    }

    protected void <init>(org.codehaus.jackson.type.JavaType)
    {
        org.codehaus.jackson.map.deser.StdDeserializer r0;
        org.codehaus.jackson.type.JavaType $r1;
        java.lang.Class $r2;

        r0 := @this: org.codehaus.jackson.map.deser.StdDeserializer;

        $r1 := @parameter0: org.codehaus.jackson.type.JavaType;

        specialinvoke r0.<org.codehaus.jackson.map.JsonDeserializer: void <init>()>();

        if $r1 != null goto label2;

        $r2 = null;

     label1:
        r0.<org.codehaus.jackson.map.deser.StdDeserializer: java.lang.Class _valueClass> = $r2;

        return;

     label2:
        $r2 = virtualinvoke $r1.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        goto label1;
    }

    protected final java.lang.Boolean _parseBoolean(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.map.deser.StdDeserializer r0;
        org.codehaus.jackson.JsonParser $r1;
        org.codehaus.jackson.map.DeserializationContext $r2;
        org.codehaus.jackson.JsonToken $r3, $r4;
        int $i0;
        java.lang.String $r5, $r6;
        boolean $z0;
        java.lang.Class $r7;
        org.codehaus.jackson.map.JsonMappingException $r8;
        java.lang.Boolean r9;

        r0 := @this: org.codehaus.jackson.map.deser.StdDeserializer;

        $r1 := @parameter0: org.codehaus.jackson.JsonParser;

        $r2 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        $r3 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken getCurrentToken()>();

        $r4 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_TRUE>;

        if $r3 != $r4 goto label1;

        r9 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        return r9;

     label1:
        $r4 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_FALSE>;

        if $r3 != $r4 goto label2;

        r9 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        return r9;

     label2:
        $r4 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NULL>;

        if $r3 != $r4 goto label3;

        return null;

     label3:
        $r4 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NUMBER_INT>;

        if $r3 != $r4 goto label5;

        $i0 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: int getIntValue()>();

        if $i0 != 0 goto label4;

        r9 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        return r9;

     label4:
        r9 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        return r9;

     label5:
        $r4 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_STRING>;

        if $r3 != $r4 goto label9;

        $r5 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: java.lang.String getText()>();

        $r5 = virtualinvoke $r5.<java.lang.String: java.lang.String trim()>();

        $r6 = "true";

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label6;

        r9 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        return r9;

     label6:
        $r6 = "false";

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 != 0 goto label7;

        $i0 = virtualinvoke $r5.<java.lang.String: int length()>();

        if $i0 != 0 goto label8;

     label7:
        r9 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        return r9;

     label8:
        $r7 = r0.<org.codehaus.jackson.map.deser.StdDeserializer: java.lang.Class _valueClass>;

        $r8 = virtualinvoke $r2.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.JsonMappingException weirdStringException(java.lang.Class,java.lang.String)>($r7, "only \"true\" or \"false\" recognized");

        throw $r8;

     label9:
        $r7 = r0.<org.codehaus.jackson.map.deser.StdDeserializer: java.lang.Class _valueClass>;

        $r8 = virtualinvoke $r2.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.JsonMappingException mappingException(java.lang.Class)>($r7);

        throw $r8;
    }

    protected final boolean _parseBooleanPrimitive(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.map.deser.StdDeserializer r0;
        org.codehaus.jackson.JsonParser $r1;
        org.codehaus.jackson.map.DeserializationContext $r2;
        org.codehaus.jackson.JsonToken $r3, $r4;
        int $i0;
        java.lang.String $r5, $r6;
        boolean $z0;
        java.lang.Boolean $r7;
        java.lang.Class $r8;
        org.codehaus.jackson.map.JsonMappingException $r9;

        r0 := @this: org.codehaus.jackson.map.deser.StdDeserializer;

        $r1 := @parameter0: org.codehaus.jackson.JsonParser;

        $r2 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        $r3 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken getCurrentToken()>();

        $r4 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_TRUE>;

        if $r3 != $r4 goto label1;

        return 1;

     label1:
        $r4 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_FALSE>;

        if $r3 != $r4 goto label2;

        return 0;

     label2:
        $r4 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NULL>;

        if $r3 != $r4 goto label3;

        return 0;

     label3:
        $r4 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NUMBER_INT>;

        if $r3 != $r4 goto label5;

        $i0 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: int getIntValue()>();

        if $i0 == 0 goto label4;

        return 1;

     label4:
        return 0;

     label5:
        $r4 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_STRING>;

        if $r3 != $r4 goto label9;

        $r5 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: java.lang.String getText()>();

        $r5 = virtualinvoke $r5.<java.lang.String: java.lang.String trim()>();

        $r6 = "true";

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label6;

        return 1;

     label6:
        $r6 = "false";

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 != 0 goto label7;

        $i0 = virtualinvoke $r5.<java.lang.String: int length()>();

        if $i0 != 0 goto label8;

     label7:
        $r7 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        $z0 = virtualinvoke $r7.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;

     label8:
        $r8 = r0.<org.codehaus.jackson.map.deser.StdDeserializer: java.lang.Class _valueClass>;

        $r9 = virtualinvoke $r2.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.JsonMappingException weirdStringException(java.lang.Class,java.lang.String)>($r8, "only \"true\" or \"false\" recognized");

        throw $r9;

     label9:
        $r8 = r0.<org.codehaus.jackson.map.deser.StdDeserializer: java.lang.Class _valueClass>;

        $r9 = virtualinvoke $r2.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.JsonMappingException mappingException(java.lang.Class)>($r8);

        throw $r9;
    }

    protected java.util.Date _parseDate(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.map.deser.StdDeserializer r0;
        org.codehaus.jackson.JsonParser $r1;
        org.codehaus.jackson.map.DeserializationContext $r2;
        org.codehaus.jackson.JsonToken $r3, $r4;
        java.util.Date $r5, $r11;
        long $l0;
        java.lang.String $r6;
        int $i1;
        java.lang.Class $r7;
        org.codehaus.jackson.map.JsonMappingException $r8;
        java.lang.Throwable $r9;
        java.lang.StringBuilder $r10, $r12;
        java.lang.IllegalArgumentException $r13;

        r0 := @this: org.codehaus.jackson.map.deser.StdDeserializer;

        $r1 := @parameter0: org.codehaus.jackson.JsonParser;

        $r2 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        $r3 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken getCurrentToken()>();

        $r4 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NUMBER_INT>;

        if $r3 != $r4 goto label03;

        $r11 = new java.util.Date;

     label01:
        $l0 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: long getLongValue()>();

        specialinvoke $r11.<java.util.Date: void <init>(long)>($l0);

     label02:
        return $r11;

     label03:
        $r4 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_STRING>;

        if $r3 != $r4 goto label08;

     label04:
        $r6 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: java.lang.String getText()>();

        $r6 = virtualinvoke $r6.<java.lang.String: java.lang.String trim()>();

        $i1 = virtualinvoke $r6.<java.lang.String: int length()>();

     label05:
        if $i1 != 0 goto label06;

        return null;

     label06:
        $r5 = virtualinvoke $r2.<org.codehaus.jackson.map.DeserializationContext: java.util.Date parseDate(java.lang.String)>($r6);

     label07:
        return $r5;

     label08:
        $r7 = r0.<org.codehaus.jackson.map.deser.StdDeserializer: java.lang.Class _valueClass>;

     label09:
        $r8 = virtualinvoke $r2.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.JsonMappingException mappingException(java.lang.Class)>($r7);

     label10:
        throw $r8;

     label11:
        $r9 := @caughtexception;

        $r7 = r0.<org.codehaus.jackson.map.deser.StdDeserializer: java.lang.Class _valueClass>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("not a valid representation (error: ");

        $r13 = (java.lang.IllegalArgumentException) $r9;

        $r6 = virtualinvoke $r13.<java.lang.IllegalArgumentException: java.lang.String getMessage()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r6 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = virtualinvoke $r2.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.JsonMappingException weirdStringException(java.lang.Class,java.lang.String)>($r7, $r6);

        throw $r8;

        catch java.lang.IllegalArgumentException from label01 to label02 with label11;
        catch java.lang.IllegalArgumentException from label04 to label05 with label11;
        catch java.lang.IllegalArgumentException from label06 to label07 with label11;
        catch java.lang.IllegalArgumentException from label09 to label10 with label11;
    }

    protected final java.lang.Double _parseDouble(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.map.deser.StdDeserializer r0;
        org.codehaus.jackson.JsonParser $r1;
        org.codehaus.jackson.map.DeserializationContext $r2;
        org.codehaus.jackson.JsonToken $r3, $r4;
        double $d0;
        java.lang.Double $r5;
        java.lang.String $r6, $r7;
        int $i0;
        char $c1;
        boolean $z0;
        java.lang.Throwable $r8;
        java.lang.Class $r9;
        org.codehaus.jackson.map.JsonMappingException $r10;

        r0 := @this: org.codehaus.jackson.map.deser.StdDeserializer;

        $r1 := @parameter0: org.codehaus.jackson.JsonParser;

        $r2 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        $r3 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken getCurrentToken()>();

        $r4 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NUMBER_INT>;

        if $r3 == $r4 goto label01;

        $r4 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NUMBER_FLOAT>;

        if $r3 != $r4 goto label02;

     label01:
        $d0 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: double getDoubleValue()>();

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        return $r5;

     label02:
        $r4 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_STRING>;

        if $r3 != $r4 goto label12;

        $r6 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: java.lang.String getText()>();

        $r6 = virtualinvoke $r6.<java.lang.String: java.lang.String trim()>();

        $i0 = virtualinvoke $r6.<java.lang.String: int length()>();

        if $i0 != 0 goto label03;

        return null;

     label03:
        $c1 = virtualinvoke $r6.<java.lang.String: char charAt(int)>(0);

        lookupswitch($c1)
        {
            case 45: goto label09;
            case 73: goto label06;
            case 78: goto label08;
            default: goto label04;
        };

     label04:
        $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r6);

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

     label05:
        return $r5;

     label06:
        $r7 = "Infinity";

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 != 0 goto label07;

        $r7 = "INF";

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label04;

     label07:
        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(#Infinity);

        return $r5;

     label08:
        $r7 = "NaN";

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label04;

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(#NaN);

        return $r5;

     label09:
        $r7 = "-Infinity";

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 != 0 goto label10;

        $r7 = "-INF";

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label04;

     label10:
        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(#-Infinity);

        return $r5;

     label11:
        $r8 := @caughtexception;

        $r9 = r0.<org.codehaus.jackson.map.deser.StdDeserializer: java.lang.Class _valueClass>;

        $r10 = virtualinvoke $r2.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.JsonMappingException weirdStringException(java.lang.Class,java.lang.String)>($r9, "not a valid Double value");

        throw $r10;

     label12:
        $r4 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NULL>;

        if $r3 != $r4 goto label13;

        return null;

     label13:
        $r9 = r0.<org.codehaus.jackson.map.deser.StdDeserializer: java.lang.Class _valueClass>;

        $r10 = virtualinvoke $r2.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.JsonMappingException mappingException(java.lang.Class)>($r9);

        throw $r10;

        catch java.lang.IllegalArgumentException from label04 to label05 with label11;
    }

    protected final double _parseDoublePrimitive(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.map.deser.StdDeserializer r0;
        org.codehaus.jackson.JsonParser $r1;
        org.codehaus.jackson.map.DeserializationContext $r2;
        org.codehaus.jackson.JsonToken $r3, $r4;
        double $d0;
        java.lang.String $r5, $r6;
        int $i0;
        char $c1;
        boolean $z0;
        java.lang.Throwable $r7;
        java.lang.Class $r8;
        org.codehaus.jackson.map.JsonMappingException $r9;

        r0 := @this: org.codehaus.jackson.map.deser.StdDeserializer;

        $r1 := @parameter0: org.codehaus.jackson.JsonParser;

        $r2 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        $r3 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken getCurrentToken()>();

        $r4 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NUMBER_INT>;

        if $r3 == $r4 goto label01;

        $r4 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NUMBER_FLOAT>;

        if $r3 != $r4 goto label02;

     label01:
        $d0 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: double getDoubleValue()>();

        return $d0;

     label02:
        $r4 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_STRING>;

        if $r3 != $r4 goto label12;

        $r5 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: java.lang.String getText()>();

        $r5 = virtualinvoke $r5.<java.lang.String: java.lang.String trim()>();

        $i0 = virtualinvoke $r5.<java.lang.String: int length()>();

        if $i0 != 0 goto label03;

        return 0.0;

     label03:
        $c1 = virtualinvoke $r5.<java.lang.String: char charAt(int)>(0);

        lookupswitch($c1)
        {
            case 45: goto label09;
            case 73: goto label06;
            case 78: goto label08;
            default: goto label04;
        };

     label04:
        $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r5);

     label05:
        return $d0;

     label06:
        $r6 = "Infinity";

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 != 0 goto label07;

        $r6 = "INF";

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label04;

     label07:
        return #Infinity;

     label08:
        $r6 = "NaN";

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label04;

        return #NaN;

     label09:
        $r6 = "-Infinity";

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 != 0 goto label10;

        $r6 = "-INF";

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label04;

     label10:
        return #-Infinity;

     label11:
        $r7 := @caughtexception;

        $r8 = r0.<org.codehaus.jackson.map.deser.StdDeserializer: java.lang.Class _valueClass>;

        $r9 = virtualinvoke $r2.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.JsonMappingException weirdStringException(java.lang.Class,java.lang.String)>($r8, "not a valid double value");

        throw $r9;

     label12:
        $r4 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NULL>;

        if $r3 != $r4 goto label13;

        return 0.0;

     label13:
        $r8 = r0.<org.codehaus.jackson.map.deser.StdDeserializer: java.lang.Class _valueClass>;

        $r9 = virtualinvoke $r2.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.JsonMappingException mappingException(java.lang.Class)>($r8);

        throw $r9;

        catch java.lang.IllegalArgumentException from label04 to label05 with label11;
    }

    protected final java.lang.Float _parseFloat(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.map.deser.StdDeserializer r0;
        org.codehaus.jackson.JsonParser $r1;
        org.codehaus.jackson.map.DeserializationContext $r2;
        org.codehaus.jackson.JsonToken $r3, $r4;
        float $f0;
        java.lang.Float $r5;
        java.lang.String $r6, $r7;
        int $i0;
        char $c1;
        boolean $z0;
        java.lang.Throwable $r8;
        java.lang.Class $r9;
        org.codehaus.jackson.map.JsonMappingException $r10;

        r0 := @this: org.codehaus.jackson.map.deser.StdDeserializer;

        $r1 := @parameter0: org.codehaus.jackson.JsonParser;

        $r2 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        $r3 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken getCurrentToken()>();

        $r4 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NUMBER_INT>;

        if $r3 == $r4 goto label01;

        $r4 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NUMBER_FLOAT>;

        if $r3 != $r4 goto label02;

     label01:
        $f0 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: float getFloatValue()>();

        $r5 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        return $r5;

     label02:
        $r4 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_STRING>;

        if $r3 != $r4 goto label12;

        $r6 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: java.lang.String getText()>();

        $r6 = virtualinvoke $r6.<java.lang.String: java.lang.String trim()>();

        $i0 = virtualinvoke $r6.<java.lang.String: int length()>();

        if $i0 != 0 goto label03;

        return null;

     label03:
        $c1 = virtualinvoke $r6.<java.lang.String: char charAt(int)>(0);

        lookupswitch($c1)
        {
            case 45: goto label09;
            case 73: goto label06;
            case 78: goto label08;
            default: goto label04;
        };

     label04:
        $f0 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>($r6);

        $r5 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

     label05:
        return $r5;

     label06:
        $r7 = "Infinity";

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 != 0 goto label07;

        $r7 = "INF";

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label04;

     label07:
        $r5 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(#InfinityF);

        return $r5;

     label08:
        $r7 = "NaN";

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label04;

        $r5 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(#NaNF);

        return $r5;

     label09:
        $r7 = "-Infinity";

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 != 0 goto label10;

        $r7 = "-INF";

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label04;

     label10:
        $r5 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(#-InfinityF);

        return $r5;

     label11:
        $r8 := @caughtexception;

        $r9 = r0.<org.codehaus.jackson.map.deser.StdDeserializer: java.lang.Class _valueClass>;

        $r10 = virtualinvoke $r2.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.JsonMappingException weirdStringException(java.lang.Class,java.lang.String)>($r9, "not a valid Float value");

        throw $r10;

     label12:
        $r4 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NULL>;

        if $r3 != $r4 goto label13;

        return null;

     label13:
        $r9 = r0.<org.codehaus.jackson.map.deser.StdDeserializer: java.lang.Class _valueClass>;

        $r10 = virtualinvoke $r2.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.JsonMappingException mappingException(java.lang.Class)>($r9);

        throw $r10;

        catch java.lang.IllegalArgumentException from label04 to label05 with label11;
    }

    protected final float _parseFloatPrimitive(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.map.deser.StdDeserializer r0;
        org.codehaus.jackson.JsonParser $r1;
        org.codehaus.jackson.map.DeserializationContext $r2;
        org.codehaus.jackson.JsonToken $r3, $r4;
        float $f0;
        java.lang.String $r5, $r6;
        int $i0;
        char $c1;
        boolean $z0;
        java.lang.Throwable $r7;
        java.lang.Class $r8;
        org.codehaus.jackson.map.JsonMappingException $r9;

        r0 := @this: org.codehaus.jackson.map.deser.StdDeserializer;

        $r1 := @parameter0: org.codehaus.jackson.JsonParser;

        $r2 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        $r3 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken getCurrentToken()>();

        $r4 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NUMBER_INT>;

        if $r3 == $r4 goto label01;

        $r4 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NUMBER_FLOAT>;

        if $r3 != $r4 goto label02;

     label01:
        $f0 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: float getFloatValue()>();

        return $f0;

     label02:
        $r4 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_STRING>;

        if $r3 != $r4 goto label12;

        $r5 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: java.lang.String getText()>();

        $r5 = virtualinvoke $r5.<java.lang.String: java.lang.String trim()>();

        $i0 = virtualinvoke $r5.<java.lang.String: int length()>();

        if $i0 != 0 goto label03;

        return 0.0F;

     label03:
        $c1 = virtualinvoke $r5.<java.lang.String: char charAt(int)>(0);

        lookupswitch($c1)
        {
            case 45: goto label09;
            case 73: goto label06;
            case 78: goto label08;
            default: goto label04;
        };

     label04:
        $f0 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>($r5);

     label05:
        return $f0;

     label06:
        $r6 = "Infinity";

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 != 0 goto label07;

        $r6 = "INF";

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label04;

     label07:
        return #InfinityF;

     label08:
        $r6 = "NaN";

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label04;

        return #NaNF;

     label09:
        $r6 = "-Infinity";

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 != 0 goto label10;

        $r6 = "-INF";

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label04;

     label10:
        return #-InfinityF;

     label11:
        $r7 := @caughtexception;

        $r8 = r0.<org.codehaus.jackson.map.deser.StdDeserializer: java.lang.Class _valueClass>;

        $r9 = virtualinvoke $r2.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.JsonMappingException weirdStringException(java.lang.Class,java.lang.String)>($r8, "not a valid float value");

        throw $r9;

     label12:
        $r4 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NULL>;

        if $r3 != $r4 goto label13;

        return 0.0F;

     label13:
        $r8 = r0.<org.codehaus.jackson.map.deser.StdDeserializer: java.lang.Class _valueClass>;

        $r9 = virtualinvoke $r2.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.JsonMappingException mappingException(java.lang.Class)>($r8);

        throw $r9;

        catch java.lang.IllegalArgumentException from label04 to label05 with label11;
    }

    protected final int _parseIntPrimitive(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.map.deser.StdDeserializer r0;
        org.codehaus.jackson.JsonParser $r1;
        org.codehaus.jackson.map.DeserializationContext $r2;
        org.codehaus.jackson.JsonToken $r3, $r4;
        int $i0;
        java.lang.String $r5;
        long $l1;
        byte $b2;
        java.lang.Class $r6;
        java.lang.StringBuilder $r7;
        org.codehaus.jackson.map.JsonMappingException $r8;
        java.lang.Throwable $r9;

        r0 := @this: org.codehaus.jackson.map.deser.StdDeserializer;

        $r1 := @parameter0: org.codehaus.jackson.JsonParser;

        $r2 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        $r3 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken getCurrentToken()>();

        $r4 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NUMBER_INT>;

        if $r3 == $r4 goto label01;

        $r4 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NUMBER_FLOAT>;

        if $r3 != $r4 goto label02;

     label01:
        $i0 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: int getIntValue()>();

        return $i0;

     label02:
        $r4 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_STRING>;

        if $r3 != $r4 goto label15;

        $r5 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: java.lang.String getText()>();

        $r5 = virtualinvoke $r5.<java.lang.String: java.lang.String trim()>();

     label03:
        $i0 = virtualinvoke $r5.<java.lang.String: int length()>();

     label04:
        if $i0 <= 9 goto label12;

     label05:
        $l1 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r5);

     label06:
        $b2 = $l1 cmp -2147483648L;

        if $b2 < 0 goto label07;

        $b2 = $l1 cmp 2147483647L;

        if $b2 <= 0 goto label11;

     label07:
        $r6 = r0.<org.codehaus.jackson.map.deser.StdDeserializer: java.lang.Class _valueClass>;

        $r7 = new java.lang.StringBuilder;

     label08:
        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Overflow: numeric value (");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") out of range of int (");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(-2147483648);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" - ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(2147483647);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r5 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = virtualinvoke $r2.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.JsonMappingException weirdStringException(java.lang.Class,java.lang.String)>($r6, $r5);

     label09:
        throw $r8;

     label10:
        $r9 := @caughtexception;

        $r6 = r0.<org.codehaus.jackson.map.deser.StdDeserializer: java.lang.Class _valueClass>;

        $r8 = virtualinvoke $r2.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.JsonMappingException weirdStringException(java.lang.Class,java.lang.String)>($r6, "not a valid int value");

        throw $r8;

     label11:
        $i0 = (int) $l1;

        return $i0;

     label12:
        if $i0 != 0 goto label13;

        return 0;

     label13:
        $i0 = staticinvoke <org.codehaus.jackson.io.NumberInput: int parseInt(java.lang.String)>($r5);

     label14:
        return $i0;

     label15:
        $r4 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NULL>;

        if $r3 != $r4 goto label16;

        return 0;

     label16:
        $r6 = r0.<org.codehaus.jackson.map.deser.StdDeserializer: java.lang.Class _valueClass>;

        $r8 = virtualinvoke $r2.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.JsonMappingException mappingException(java.lang.Class)>($r6);

        throw $r8;

        catch java.lang.IllegalArgumentException from label03 to label04 with label10;
        catch java.lang.IllegalArgumentException from label05 to label06 with label10;
        catch java.lang.IllegalArgumentException from label08 to label09 with label10;
        catch java.lang.IllegalArgumentException from label13 to label14 with label10;
    }

    protected final java.lang.Integer _parseInteger(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.map.deser.StdDeserializer r0;
        org.codehaus.jackson.JsonParser $r1;
        org.codehaus.jackson.map.DeserializationContext $r2;
        org.codehaus.jackson.JsonToken $r3, $r4;
        int $i0;
        java.lang.Integer $r5;
        java.lang.String $r6;
        long $l1;
        byte $b2;
        java.lang.Class $r7;
        java.lang.StringBuilder $r8;
        org.codehaus.jackson.map.JsonMappingException $r9;
        java.lang.Throwable $r10;

        r0 := @this: org.codehaus.jackson.map.deser.StdDeserializer;

        $r1 := @parameter0: org.codehaus.jackson.JsonParser;

        $r2 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        $r3 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken getCurrentToken()>();

        $r4 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NUMBER_INT>;

        if $r3 == $r4 goto label01;

        $r4 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NUMBER_FLOAT>;

        if $r3 != $r4 goto label02;

     label01:
        $i0 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: int getIntValue()>();

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        return $r5;

     label02:
        $r4 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_STRING>;

        if $r3 != $r4 goto label17;

        $r6 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: java.lang.String getText()>();

        $r6 = virtualinvoke $r6.<java.lang.String: java.lang.String trim()>();

     label03:
        $i0 = virtualinvoke $r6.<java.lang.String: int length()>();

     label04:
        if $i0 <= 9 goto label14;

     label05:
        $l1 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r6);

     label06:
        $b2 = $l1 cmp -2147483648L;

        if $b2 < 0 goto label07;

        $b2 = $l1 cmp 2147483647L;

        if $b2 <= 0 goto label11;

     label07:
        $r7 = r0.<org.codehaus.jackson.map.deser.StdDeserializer: java.lang.Class _valueClass>;

        $r8 = new java.lang.StringBuilder;

     label08:
        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Overflow: numeric value (");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") out of range of Integer (");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(-2147483648);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" - ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(2147483647);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r6 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = virtualinvoke $r2.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.JsonMappingException weirdStringException(java.lang.Class,java.lang.String)>($r7, $r6);

     label09:
        throw $r9;

     label10:
        $r10 := @caughtexception;

        $r7 = r0.<org.codehaus.jackson.map.deser.StdDeserializer: java.lang.Class _valueClass>;

        $r9 = virtualinvoke $r2.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.JsonMappingException weirdStringException(java.lang.Class,java.lang.String)>($r7, "not a valid Integer value");

        throw $r9;

     label11:
        $i0 = (int) $l1;

     label12:
        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

     label13:
        return $r5;

     label14:
        if $i0 != 0 goto label15;

        return null;

     label15:
        $i0 = staticinvoke <org.codehaus.jackson.io.NumberInput: int parseInt(java.lang.String)>($r6);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

     label16:
        return $r5;

     label17:
        $r4 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NULL>;

        if $r3 != $r4 goto label18;

        return null;

     label18:
        $r7 = r0.<org.codehaus.jackson.map.deser.StdDeserializer: java.lang.Class _valueClass>;

        $r9 = virtualinvoke $r2.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.JsonMappingException mappingException(java.lang.Class)>($r7);

        throw $r9;

        catch java.lang.IllegalArgumentException from label03 to label04 with label10;
        catch java.lang.IllegalArgumentException from label05 to label06 with label10;
        catch java.lang.IllegalArgumentException from label08 to label09 with label10;
        catch java.lang.IllegalArgumentException from label12 to label13 with label10;
        catch java.lang.IllegalArgumentException from label15 to label16 with label10;
    }

    protected final java.lang.Long _parseLong(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.map.deser.StdDeserializer r0;
        org.codehaus.jackson.JsonParser $r1;
        org.codehaus.jackson.map.DeserializationContext $r2;
        org.codehaus.jackson.JsonToken $r3, $r4;
        long $l0;
        java.lang.Long $r5;
        java.lang.String $r6;
        int $i1;
        java.lang.Throwable $r7;
        java.lang.Class $r8;
        org.codehaus.jackson.map.JsonMappingException $r9;

        r0 := @this: org.codehaus.jackson.map.deser.StdDeserializer;

        $r1 := @parameter0: org.codehaus.jackson.JsonParser;

        $r2 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        $r3 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken getCurrentToken()>();

        $r4 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NUMBER_INT>;

        if $r3 == $r4 goto label1;

        $r4 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NUMBER_FLOAT>;

        if $r3 != $r4 goto label2;

     label1:
        $l0 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: long getLongValue()>();

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        return $r5;

     label2:
        $r4 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_STRING>;

        if $r3 != $r4 goto label6;

        $r6 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: java.lang.String getText()>();

        $r6 = virtualinvoke $r6.<java.lang.String: java.lang.String trim()>();

        $i1 = virtualinvoke $r6.<java.lang.String: int length()>();

        if $i1 != 0 goto label3;

        return null;

     label3:
        $l0 = staticinvoke <org.codehaus.jackson.io.NumberInput: long parseLong(java.lang.String)>($r6);

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

     label4:
        return $r5;

     label5:
        $r7 := @caughtexception;

        $r8 = r0.<org.codehaus.jackson.map.deser.StdDeserializer: java.lang.Class _valueClass>;

        $r9 = virtualinvoke $r2.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.JsonMappingException weirdStringException(java.lang.Class,java.lang.String)>($r8, "not a valid Long value");

        throw $r9;

     label6:
        $r4 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NULL>;

        if $r3 != $r4 goto label7;

        return null;

     label7:
        $r8 = r0.<org.codehaus.jackson.map.deser.StdDeserializer: java.lang.Class _valueClass>;

        $r9 = virtualinvoke $r2.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.JsonMappingException mappingException(java.lang.Class)>($r8);

        throw $r9;

        catch java.lang.IllegalArgumentException from label3 to label4 with label5;
    }

    protected final long _parseLongPrimitive(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.map.deser.StdDeserializer r0;
        org.codehaus.jackson.JsonParser $r1;
        org.codehaus.jackson.map.DeserializationContext $r2;
        org.codehaus.jackson.JsonToken $r3, $r4;
        long $l0;
        java.lang.String $r5;
        int $i1;
        java.lang.Throwable $r6;
        java.lang.Class $r7;
        org.codehaus.jackson.map.JsonMappingException $r8;

        r0 := @this: org.codehaus.jackson.map.deser.StdDeserializer;

        $r1 := @parameter0: org.codehaus.jackson.JsonParser;

        $r2 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        $r3 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken getCurrentToken()>();

        $r4 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NUMBER_INT>;

        if $r3 == $r4 goto label1;

        $r4 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NUMBER_FLOAT>;

        if $r3 != $r4 goto label2;

     label1:
        $l0 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: long getLongValue()>();

        return $l0;

     label2:
        $r4 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_STRING>;

        if $r3 != $r4 goto label6;

        $r5 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: java.lang.String getText()>();

        $r5 = virtualinvoke $r5.<java.lang.String: java.lang.String trim()>();

        $i1 = virtualinvoke $r5.<java.lang.String: int length()>();

        if $i1 != 0 goto label3;

        return 0L;

     label3:
        $l0 = staticinvoke <org.codehaus.jackson.io.NumberInput: long parseLong(java.lang.String)>($r5);

     label4:
        return $l0;

     label5:
        $r6 := @caughtexception;

        $r7 = r0.<org.codehaus.jackson.map.deser.StdDeserializer: java.lang.Class _valueClass>;

        $r8 = virtualinvoke $r2.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.JsonMappingException weirdStringException(java.lang.Class,java.lang.String)>($r7, "not a valid long value");

        throw $r8;

     label6:
        $r4 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NULL>;

        if $r3 != $r4 goto label7;

        return 0L;

     label7:
        $r7 = r0.<org.codehaus.jackson.map.deser.StdDeserializer: java.lang.Class _valueClass>;

        $r8 = virtualinvoke $r2.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.JsonMappingException mappingException(java.lang.Class)>($r7);

        throw $r8;

        catch java.lang.IllegalArgumentException from label3 to label4 with label5;
    }

    protected final java.lang.Short _parseShort(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.map.deser.StdDeserializer r0;
        org.codehaus.jackson.JsonParser $r1;
        org.codehaus.jackson.map.DeserializationContext $r2;
        org.codehaus.jackson.JsonToken $r3, $r4;
        short $s0;
        java.lang.Short $r5;
        int $i1;
        java.lang.Class $r6;
        org.codehaus.jackson.map.JsonMappingException $r7;

        r0 := @this: org.codehaus.jackson.map.deser.StdDeserializer;

        $r1 := @parameter0: org.codehaus.jackson.JsonParser;

        $r2 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        $r3 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken getCurrentToken()>();

        $r4 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NULL>;

        if $r3 != $r4 goto label1;

        return null;

     label1:
        $r4 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NUMBER_INT>;

        if $r3 == $r4 goto label2;

        $r4 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NUMBER_FLOAT>;

        if $r3 != $r4 goto label3;

     label2:
        $s0 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: short getShortValue()>();

        $r5 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>($s0);

        return $r5;

     label3:
        $i1 = virtualinvoke r0.<org.codehaus.jackson.map.deser.StdDeserializer: int _parseIntPrimitive(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>($r1, $r2);

        if $i1 < -32768 goto label4;

        if $i1 <= 32767 goto label5;

     label4:
        $r6 = r0.<org.codehaus.jackson.map.deser.StdDeserializer: java.lang.Class _valueClass>;

        $r7 = virtualinvoke $r2.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.JsonMappingException weirdStringException(java.lang.Class,java.lang.String)>($r6, "overflow, value can not be represented as 16-bit value");

        throw $r7;

     label5:
        $s0 = (short) $i1;

        $r5 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>($s0);

        return $r5;
    }

    protected final short _parseShortPrimitive(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.map.deser.StdDeserializer r0;
        org.codehaus.jackson.JsonParser $r1;
        org.codehaus.jackson.map.DeserializationContext $r2;
        int $i0;
        java.lang.Class $r3;
        org.codehaus.jackson.map.JsonMappingException $r4;
        short $s1;

        r0 := @this: org.codehaus.jackson.map.deser.StdDeserializer;

        $r1 := @parameter0: org.codehaus.jackson.JsonParser;

        $r2 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        $i0 = virtualinvoke r0.<org.codehaus.jackson.map.deser.StdDeserializer: int _parseIntPrimitive(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>($r1, $r2);

        if $i0 < -32768 goto label1;

        if $i0 <= 32767 goto label2;

     label1:
        $r3 = r0.<org.codehaus.jackson.map.deser.StdDeserializer: java.lang.Class _valueClass>;

        $r4 = virtualinvoke $r2.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.JsonMappingException weirdStringException(java.lang.Class,java.lang.String)>($r3, "overflow, value can not be represented as 16-bit value");

        throw $r4;

     label2:
        $s1 = (short) $i0;

        return $s1;
    }

    public java.lang.Object deserializeWithType(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext, org.codehaus.jackson.map.TypeDeserializer) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.map.deser.StdDeserializer r0;
        org.codehaus.jackson.JsonParser $r1;
        org.codehaus.jackson.map.DeserializationContext $r2;
        org.codehaus.jackson.map.TypeDeserializer $r3;
        java.lang.Object $r4;

        r0 := @this: org.codehaus.jackson.map.deser.StdDeserializer;

        $r1 := @parameter0: org.codehaus.jackson.JsonParser;

        $r2 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        $r3 := @parameter2: org.codehaus.jackson.map.TypeDeserializer;

        $r4 = virtualinvoke $r3.<org.codehaus.jackson.map.TypeDeserializer: java.lang.Object deserializeTypedFromAny(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>($r1, $r2);

        return $r4;
    }

    protected org.codehaus.jackson.map.JsonDeserializer findDeserializer(org.codehaus.jackson.map.DeserializationConfig, org.codehaus.jackson.map.DeserializerProvider, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.BeanProperty) throws org.codehaus.jackson.map.JsonMappingException
    {
        org.codehaus.jackson.map.deser.StdDeserializer r0;
        org.codehaus.jackson.map.DeserializationConfig $r1;
        org.codehaus.jackson.map.DeserializerProvider $r2;
        org.codehaus.jackson.type.JavaType $r3;
        org.codehaus.jackson.map.BeanProperty $r4;
        org.codehaus.jackson.map.JsonDeserializer $r5;

        r0 := @this: org.codehaus.jackson.map.deser.StdDeserializer;

        $r1 := @parameter0: org.codehaus.jackson.map.DeserializationConfig;

        $r2 := @parameter1: org.codehaus.jackson.map.DeserializerProvider;

        $r3 := @parameter2: org.codehaus.jackson.type.JavaType;

        $r4 := @parameter3: org.codehaus.jackson.map.BeanProperty;

        $r5 = virtualinvoke $r2.<org.codehaus.jackson.map.DeserializerProvider: org.codehaus.jackson.map.JsonDeserializer findValueDeserializer(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanProperty)>($r1, $r3, $r4);

        return $r5;
    }

    public java.lang.Class getValueClass()
    {
        org.codehaus.jackson.map.deser.StdDeserializer r0;
        java.lang.Class r1;

        r0 := @this: org.codehaus.jackson.map.deser.StdDeserializer;

        r1 = r0.<org.codehaus.jackson.map.deser.StdDeserializer: java.lang.Class _valueClass>;

        return r1;
    }

    public org.codehaus.jackson.type.JavaType getValueType()
    {
        org.codehaus.jackson.map.deser.StdDeserializer r0;

        r0 := @this: org.codehaus.jackson.map.deser.StdDeserializer;

        return null;
    }

    protected void handleUnknownProperty(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext, java.lang.Object, java.lang.String) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.map.deser.StdDeserializer r0;
        org.codehaus.jackson.JsonParser $r1;
        org.codehaus.jackson.map.DeserializationContext $r2;
        java.lang.String $r3;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.deser.StdDeserializer;

        $r1 := @parameter0: org.codehaus.jackson.JsonParser;

        $r2 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        $r4 := @parameter2: java.lang.Object;

        $r3 := @parameter3: java.lang.String;

        if $r4 != null goto label1;

        $r4 = virtualinvoke r0.<org.codehaus.jackson.map.deser.StdDeserializer: java.lang.Class getValueClass()>();

     label1:
        $z0 = virtualinvoke $r2.<org.codehaus.jackson.map.DeserializationContext: boolean handleUnknownProperty(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.JsonDeserializer,java.lang.Object,java.lang.String)>($r1, r0, $r4, $r3);

        if $z0 == 0 goto label2;

        return;

     label2:
        virtualinvoke r0.<org.codehaus.jackson.map.deser.StdDeserializer: void reportUnknownProperty(org.codehaus.jackson.map.DeserializationContext,java.lang.Object,java.lang.String)>($r2, $r4, $r3);

        virtualinvoke $r1.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonParser skipChildren()>();

        return;
    }

    protected boolean isDefaultSerializer(org.codehaus.jackson.map.JsonDeserializer)
    {
        org.codehaus.jackson.map.deser.StdDeserializer r0;
        org.codehaus.jackson.map.JsonDeserializer r1;
        java.lang.Class $r2;
        java.lang.'annotation'.Annotation $r3;

        r0 := @this: org.codehaus.jackson.map.deser.StdDeserializer;

        r1 := @parameter0: org.codehaus.jackson.map.JsonDeserializer;

        if r1 == null goto label1;

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/codehaus/jackson/map/annotate/JacksonStdImpl;");

        if $r3 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    protected void reportUnknownProperty(org.codehaus.jackson.map.DeserializationContext, java.lang.Object, java.lang.String) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.map.deser.StdDeserializer r0;
        org.codehaus.jackson.map.DeserializationContext $r1;
        java.lang.Object $r2;
        java.lang.String $r3;
        org.codehaus.jackson.map.DeserializationConfig$Feature $r4;
        boolean $z0;
        org.codehaus.jackson.map.JsonMappingException $r5;

        r0 := @this: org.codehaus.jackson.map.deser.StdDeserializer;

        $r1 := @parameter0: org.codehaus.jackson.map.DeserializationContext;

        $r2 := @parameter1: java.lang.Object;

        $r3 := @parameter2: java.lang.String;

        $r4 = <org.codehaus.jackson.map.DeserializationConfig$Feature: org.codehaus.jackson.map.DeserializationConfig$Feature FAIL_ON_UNKNOWN_PROPERTIES>;

        $z0 = virtualinvoke $r1.<org.codehaus.jackson.map.DeserializationContext: boolean isEnabled(org.codehaus.jackson.map.DeserializationConfig$Feature)>($r4);

        if $z0 == 0 goto label1;

        $r5 = virtualinvoke $r1.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.JsonMappingException unknownFieldException(java.lang.Object,java.lang.String)>($r2, $r3);

        throw $r5;

     label1:
        return;
    }
}
