public class org.codehaus.jackson.map.ser.impl.ObjectArraySerializer extends org.codehaus.jackson.map.ser.ArraySerializers$AsArraySerializer implements org.codehaus.jackson.map.ResolvableSerializer
{
    protected org.codehaus.jackson.map.ser.impl.PropertySerializerMap _dynamicSerializers;
    protected org.codehaus.jackson.map.JsonSerializer _elementSerializer;
    protected final org.codehaus.jackson.type.JavaType _elementType;
    protected final boolean _staticTyping;

    public void <init>(org.codehaus.jackson.type.JavaType, boolean, org.codehaus.jackson.map.TypeSerializer, org.codehaus.jackson.map.BeanProperty)
    {
        org.codehaus.jackson.map.ser.impl.ObjectArraySerializer r0;
        org.codehaus.jackson.type.JavaType $r1;
        boolean $z0;
        org.codehaus.jackson.map.TypeSerializer $r2;
        org.codehaus.jackson.map.BeanProperty $r3;
        org.codehaus.jackson.map.ser.impl.PropertySerializerMap $r4;

        r0 := @this: org.codehaus.jackson.map.ser.impl.ObjectArraySerializer;

        $r1 := @parameter0: org.codehaus.jackson.type.JavaType;

        $z0 := @parameter1: boolean;

        $r2 := @parameter2: org.codehaus.jackson.map.TypeSerializer;

        $r3 := @parameter3: org.codehaus.jackson.map.BeanProperty;

        specialinvoke r0.<org.codehaus.jackson.map.ser.ArraySerializers$AsArraySerializer: void <init>(java.lang.Class,org.codehaus.jackson.map.TypeSerializer,org.codehaus.jackson.map.BeanProperty)>(class "[Ljava/lang/Object;", $r2, $r3);

        r0.<org.codehaus.jackson.map.ser.impl.ObjectArraySerializer: org.codehaus.jackson.type.JavaType _elementType> = $r1;

        r0.<org.codehaus.jackson.map.ser.impl.ObjectArraySerializer: boolean _staticTyping> = $z0;

        $r4 = staticinvoke <org.codehaus.jackson.map.ser.impl.PropertySerializerMap: org.codehaus.jackson.map.ser.impl.PropertySerializerMap emptyMap()>();

        r0.<org.codehaus.jackson.map.ser.impl.ObjectArraySerializer: org.codehaus.jackson.map.ser.impl.PropertySerializerMap _dynamicSerializers> = $r4;

        return;
    }

    protected final org.codehaus.jackson.map.JsonSerializer _findAndAddDynamic(org.codehaus.jackson.map.ser.impl.PropertySerializerMap, java.lang.Class, org.codehaus.jackson.map.SerializerProvider) throws org.codehaus.jackson.map.JsonMappingException
    {
        org.codehaus.jackson.map.ser.impl.ObjectArraySerializer r0;
        org.codehaus.jackson.map.ser.impl.PropertySerializerMap $r1, $r6;
        java.lang.Class r2;
        org.codehaus.jackson.map.SerializerProvider $r3;
        org.codehaus.jackson.map.ser.impl.PropertySerializerMap$SerializerAndMapResult $r4;
        org.codehaus.jackson.map.BeanProperty $r5;
        org.codehaus.jackson.map.JsonSerializer r7;

        r0 := @this: org.codehaus.jackson.map.ser.impl.ObjectArraySerializer;

        $r1 := @parameter0: org.codehaus.jackson.map.ser.impl.PropertySerializerMap;

        r2 := @parameter1: java.lang.Class;

        $r3 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        $r5 = r0.<org.codehaus.jackson.map.ser.impl.ObjectArraySerializer: org.codehaus.jackson.map.BeanProperty _property>;

        $r4 = virtualinvoke $r1.<org.codehaus.jackson.map.ser.impl.PropertySerializerMap: org.codehaus.jackson.map.ser.impl.PropertySerializerMap$SerializerAndMapResult findAndAddSerializer(java.lang.Class,org.codehaus.jackson.map.SerializerProvider,org.codehaus.jackson.map.BeanProperty)>(r2, $r3, $r5);

        $r6 = $r4.<org.codehaus.jackson.map.ser.impl.PropertySerializerMap$SerializerAndMapResult: org.codehaus.jackson.map.ser.impl.PropertySerializerMap map>;

        if $r1 == $r6 goto label1;

        $r1 = $r4.<org.codehaus.jackson.map.ser.impl.PropertySerializerMap$SerializerAndMapResult: org.codehaus.jackson.map.ser.impl.PropertySerializerMap map>;

        r0.<org.codehaus.jackson.map.ser.impl.ObjectArraySerializer: org.codehaus.jackson.map.ser.impl.PropertySerializerMap _dynamicSerializers> = $r1;

     label1:
        r7 = $r4.<org.codehaus.jackson.map.ser.impl.PropertySerializerMap$SerializerAndMapResult: org.codehaus.jackson.map.JsonSerializer serializer>;

        return r7;
    }

    public org.codehaus.jackson.map.ser.ContainerSerializerBase _withValueTypeSerializer(org.codehaus.jackson.map.TypeSerializer)
    {
        org.codehaus.jackson.map.ser.impl.ObjectArraySerializer r0, $r2;
        org.codehaus.jackson.map.TypeSerializer $r1;
        org.codehaus.jackson.type.JavaType $r3;
        boolean $z0;
        org.codehaus.jackson.map.BeanProperty $r4;

        r0 := @this: org.codehaus.jackson.map.ser.impl.ObjectArraySerializer;

        $r1 := @parameter0: org.codehaus.jackson.map.TypeSerializer;

        $r2 = new org.codehaus.jackson.map.ser.impl.ObjectArraySerializer;

        $r3 = r0.<org.codehaus.jackson.map.ser.impl.ObjectArraySerializer: org.codehaus.jackson.type.JavaType _elementType>;

        $z0 = r0.<org.codehaus.jackson.map.ser.impl.ObjectArraySerializer: boolean _staticTyping>;

        $r4 = r0.<org.codehaus.jackson.map.ser.impl.ObjectArraySerializer: org.codehaus.jackson.map.BeanProperty _property>;

        specialinvoke $r2.<org.codehaus.jackson.map.ser.impl.ObjectArraySerializer: void <init>(org.codehaus.jackson.type.JavaType,boolean,org.codehaus.jackson.map.TypeSerializer,org.codehaus.jackson.map.BeanProperty)>($r3, $z0, $r1, $r4);

        return $r2;
    }

    public org.codehaus.jackson.JsonNode getSchema(org.codehaus.jackson.map.SerializerProvider, java.lang.reflect.Type) throws org.codehaus.jackson.map.JsonMappingException
    {
        org.codehaus.jackson.map.ser.impl.ObjectArraySerializer r0;
        org.codehaus.jackson.map.SerializerProvider $r1;
        java.lang.reflect.Type $r2;
        org.codehaus.jackson.node.ObjectNode $r3;
        org.codehaus.jackson.type.JavaType $r4;
        boolean $z0;
        org.codehaus.jackson.map.type.ArrayType r5;
        java.lang.Class $r6;
        org.codehaus.jackson.JsonNode $r7;
        org.codehaus.jackson.map.BeanProperty $r8;
        org.codehaus.jackson.map.JsonSerializer $r9;
        org.codehaus.jackson.schema.SchemaAware r10;

        r0 := @this: org.codehaus.jackson.map.ser.impl.ObjectArraySerializer;

        $r1 := @parameter0: org.codehaus.jackson.map.SerializerProvider;

        $r2 := @parameter1: java.lang.reflect.Type;

        $r3 = virtualinvoke r0.<org.codehaus.jackson.map.ser.impl.ObjectArraySerializer: org.codehaus.jackson.node.ObjectNode createSchemaNode(java.lang.String,boolean)>("array", 1);

        if $r2 == null goto label4;

        $r4 = staticinvoke <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType type(java.lang.reflect.Type)>($r2);

        $z0 = virtualinvoke $r4.<org.codehaus.jackson.type.JavaType: boolean isArrayType()>();

        if $z0 == 0 goto label4;

        r5 = (org.codehaus.jackson.map.type.ArrayType) $r4;

        $r4 = virtualinvoke r5.<org.codehaus.jackson.map.type.ArrayType: org.codehaus.jackson.type.JavaType getContentType()>();

        $r6 = virtualinvoke $r4.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        if $r6 != class "Ljava/lang/Object;" goto label1;

        $r7 = staticinvoke <org.codehaus.jackson.schema.JsonSchema: org.codehaus.jackson.JsonNode getDefaultSchemaNode()>();

        virtualinvoke $r3.<org.codehaus.jackson.node.ObjectNode: org.codehaus.jackson.JsonNode put(java.lang.String,org.codehaus.jackson.JsonNode)>("items", $r7);

        return $r3;

     label1:
        $r8 = r0.<org.codehaus.jackson.map.ser.impl.ObjectArraySerializer: org.codehaus.jackson.map.BeanProperty _property>;

        $r9 = virtualinvoke $r1.<org.codehaus.jackson.map.SerializerProvider: org.codehaus.jackson.map.JsonSerializer findValueSerializer(java.lang.Class,org.codehaus.jackson.map.BeanProperty)>($r6, $r8);

        $z0 = $r9 instanceof org.codehaus.jackson.schema.SchemaAware;

        if $z0 == 0 goto label3;

        r10 = (org.codehaus.jackson.schema.SchemaAware) $r9;

        $r7 = interfaceinvoke r10.<org.codehaus.jackson.schema.SchemaAware: org.codehaus.jackson.JsonNode getSchema(org.codehaus.jackson.map.SerializerProvider,java.lang.reflect.Type)>($r1, null);

     label2:
        virtualinvoke $r3.<org.codehaus.jackson.node.ObjectNode: org.codehaus.jackson.JsonNode put(java.lang.String,org.codehaus.jackson.JsonNode)>("items", $r7);

        return $r3;

     label3:
        $r7 = staticinvoke <org.codehaus.jackson.schema.JsonSchema: org.codehaus.jackson.JsonNode getDefaultSchemaNode()>();

        goto label2;

     label4:
        return $r3;
    }

    public void resolve(org.codehaus.jackson.map.SerializerProvider) throws org.codehaus.jackson.map.JsonMappingException
    {
        org.codehaus.jackson.map.ser.impl.ObjectArraySerializer r0;
        org.codehaus.jackson.map.SerializerProvider $r1;
        org.codehaus.jackson.map.BeanProperty $r2;
        org.codehaus.jackson.map.JsonSerializer $r3;
        boolean $z0;
        org.codehaus.jackson.type.JavaType $r4;

        r0 := @this: org.codehaus.jackson.map.ser.impl.ObjectArraySerializer;

        $r1 := @parameter0: org.codehaus.jackson.map.SerializerProvider;

        $z0 = r0.<org.codehaus.jackson.map.ser.impl.ObjectArraySerializer: boolean _staticTyping>;

        if $z0 == 0 goto label1;

        $r4 = r0.<org.codehaus.jackson.map.ser.impl.ObjectArraySerializer: org.codehaus.jackson.type.JavaType _elementType>;

        $r2 = r0.<org.codehaus.jackson.map.ser.impl.ObjectArraySerializer: org.codehaus.jackson.map.BeanProperty _property>;

        $r3 = virtualinvoke $r1.<org.codehaus.jackson.map.SerializerProvider: org.codehaus.jackson.map.JsonSerializer findValueSerializer(org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanProperty)>($r4, $r2);

        r0.<org.codehaus.jackson.map.ser.impl.ObjectArraySerializer: org.codehaus.jackson.map.JsonSerializer _elementSerializer> = $r3;

     label1:
        return;
    }

    public volatile void serializeContents(java.lang.Object, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        org.codehaus.jackson.map.ser.impl.ObjectArraySerializer r0;
        org.codehaus.jackson.JsonGenerator $r1;
        org.codehaus.jackson.map.SerializerProvider $r2;
        java.lang.Object $r3;
        java.lang.Object[] $r4;

        r0 := @this: org.codehaus.jackson.map.ser.impl.ObjectArraySerializer;

        $r3 := @parameter0: java.lang.Object;

        $r1 := @parameter1: org.codehaus.jackson.JsonGenerator;

        $r2 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        $r4 = (java.lang.Object[]) $r3;

        virtualinvoke r0.<org.codehaus.jackson.map.ser.impl.ObjectArraySerializer: void serializeContents(java.lang.Object[],org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>($r4, $r1, $r2);

        return;
    }

    public void serializeContents(java.lang.Object[], org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        org.codehaus.jackson.map.ser.impl.ObjectArraySerializer r0;
        java.lang.Object[] $r1;
        org.codehaus.jackson.JsonGenerator $r2;
        org.codehaus.jackson.map.SerializerProvider $r3;
        int i0, i1;
        org.codehaus.jackson.map.ser.impl.PropertySerializerMap r4;
        org.codehaus.jackson.map.JsonSerializer $r5, r9;
        org.codehaus.jackson.map.TypeSerializer $r6;
        java.lang.Object r7;
        java.lang.Class $r8;
        java.lang.Throwable $r10, $r12;
        java.lang.Exception $r11, $r15, $r16;
        boolean $z0;
        java.lang.Error r13;
        org.codehaus.jackson.map.JsonMappingException $r14;

        r0 := @this: org.codehaus.jackson.map.ser.impl.ObjectArraySerializer;

        $r1 := @parameter0: java.lang.Object[];

        $r2 := @parameter1: org.codehaus.jackson.JsonGenerator;

        $r3 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        i0 = lengthof $r1;

        if i0 != 0 goto label01;

        return;

     label01:
        $r5 = r0.<org.codehaus.jackson.map.ser.impl.ObjectArraySerializer: org.codehaus.jackson.map.JsonSerializer _elementSerializer>;

        if $r5 == null goto label02;

        $r5 = r0.<org.codehaus.jackson.map.ser.impl.ObjectArraySerializer: org.codehaus.jackson.map.JsonSerializer _elementSerializer>;

        virtualinvoke r0.<org.codehaus.jackson.map.ser.impl.ObjectArraySerializer: void serializeContentsUsing(java.lang.Object[],org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider,org.codehaus.jackson.map.JsonSerializer)>($r1, $r2, $r3, $r5);

        return;

     label02:
        $r6 = r0.<org.codehaus.jackson.map.ser.impl.ObjectArraySerializer: org.codehaus.jackson.map.TypeSerializer _valueTypeSerializer>;

        if $r6 == null goto label03;

        virtualinvoke r0.<org.codehaus.jackson.map.ser.impl.ObjectArraySerializer: void serializeTypedContents(java.lang.Object[],org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>($r1, $r2, $r3);

        return;

     label03:
        i1 = 0;

        r7 = null;

     label04:
        r4 = r0.<org.codehaus.jackson.map.ser.impl.ObjectArraySerializer: org.codehaus.jackson.map.ser.impl.PropertySerializerMap _dynamicSerializers>;

     label05:
        if i1 >= i0 goto label24;

     label06:
        r7 = $r1[i1];

     label07:
        if r7 != null goto label10;

     label08:
        virtualinvoke $r3.<org.codehaus.jackson.map.SerializerProvider: void defaultSerializeNull(org.codehaus.jackson.JsonGenerator)>($r2);

     label09:
        i1 = i1 + 1;

        goto label05;

     label10:
        $r8 = virtualinvoke r7.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke r4.<org.codehaus.jackson.map.ser.impl.PropertySerializerMap: org.codehaus.jackson.map.JsonSerializer serializerFor(java.lang.Class)>($r8);

     label11:
        r9 = $r5;

        if $r5 != null goto label14;

     label12:
        $r5 = virtualinvoke r0.<org.codehaus.jackson.map.ser.impl.ObjectArraySerializer: org.codehaus.jackson.map.JsonSerializer _findAndAddDynamic(org.codehaus.jackson.map.ser.impl.PropertySerializerMap,java.lang.Class,org.codehaus.jackson.map.SerializerProvider)>(r4, $r8, $r3);

     label13:
        r9 = $r5;

     label14:
        virtualinvoke r9.<org.codehaus.jackson.map.JsonSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>(r7, $r2, $r3);

     label15:
        goto label09;

     label16:
        $r10 := @caughtexception;

        throw $r10;

     label17:
        $r11 := @caughtexception;

        r7 = null;

     label18:
        $r10 = $r11;

     label19:
        $z0 = $r10 instanceof java.lang.reflect.InvocationTargetException;

        if $z0 == 0 goto label20;

        $r12 = virtualinvoke $r10.<java.lang.Throwable: java.lang.Throwable getCause()>();

        if $r12 == null goto label20;

        $r10 = virtualinvoke $r10.<java.lang.Throwable: java.lang.Throwable getCause()>();

        goto label19;

     label20:
        $z0 = $r10 instanceof java.lang.Error;

        if $z0 == 0 goto label21;

        r13 = (java.lang.Error) $r10;

        throw r13;

     label21:
        $r14 = staticinvoke <org.codehaus.jackson.map.JsonMappingException: org.codehaus.jackson.map.JsonMappingException wrapWithPath(java.lang.Throwable,java.lang.Object,int)>($r10, r7, i1);

        throw $r14;

     label22:
        $r15 := @caughtexception;

        $r11 = $r15;

        goto label18;

     label23:
        $r16 := @caughtexception;

        $r11 = $r16;

        goto label18;

     label24:
        return;

        catch java.lang.Exception from label04 to label05 with label17;
        catch java.lang.Exception from label06 to label07 with label23;
        catch java.io.IOException from label08 to label09 with label16;
        catch java.io.IOException from label10 to label11 with label16;
        catch java.io.IOException from label12 to label13 with label16;
        catch java.io.IOException from label14 to label15 with label16;
        catch java.lang.Exception from label08 to label09 with label22;
        catch java.lang.Exception from label10 to label11 with label22;
        catch java.lang.Exception from label12 to label13 with label22;
        catch java.lang.Exception from label14 to label15 with label22;
    }

    public void serializeContentsUsing(java.lang.Object[], org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider, org.codehaus.jackson.map.JsonSerializer) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        org.codehaus.jackson.map.ser.impl.ObjectArraySerializer r0;
        java.lang.Object[] $r1;
        org.codehaus.jackson.JsonGenerator $r2;
        org.codehaus.jackson.map.SerializerProvider $r3;
        org.codehaus.jackson.map.JsonSerializer r4;
        int i0, i1;
        org.codehaus.jackson.map.TypeSerializer r5;
        java.lang.Object r6;
        java.lang.Throwable $r7, $r9;
        java.lang.Exception $r8, $r12;
        boolean $z0;
        java.lang.Error r10;
        org.codehaus.jackson.map.JsonMappingException $r11;

        r0 := @this: org.codehaus.jackson.map.ser.impl.ObjectArraySerializer;

        $r1 := @parameter0: java.lang.Object[];

        $r2 := @parameter1: org.codehaus.jackson.JsonGenerator;

        $r3 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        r4 := @parameter3: org.codehaus.jackson.map.JsonSerializer;

        i0 = lengthof $r1;

        r5 = r0.<org.codehaus.jackson.map.ser.impl.ObjectArraySerializer: org.codehaus.jackson.map.TypeSerializer _valueTypeSerializer>;

        i1 = 0;

        r6 = null;

     label01:
        if i1 >= i0 goto label18;

     label02:
        r6 = $r1[i1];

     label03:
        if r6 != null goto label06;

     label04:
        virtualinvoke $r3.<org.codehaus.jackson.map.SerializerProvider: void defaultSerializeNull(org.codehaus.jackson.JsonGenerator)>($r2);

     label05:
        i1 = i1 + 1;

        goto label01;

     label06:
        if r5 != null goto label10;

     label07:
        virtualinvoke r4.<org.codehaus.jackson.map.JsonSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>(r6, $r2, $r3);

     label08:
        goto label05;

     label09:
        $r7 := @caughtexception;

        throw $r7;

     label10:
        virtualinvoke r4.<org.codehaus.jackson.map.JsonSerializer: void serializeWithType(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider,org.codehaus.jackson.map.TypeSerializer)>(r6, $r2, $r3, r5);

     label11:
        goto label05;

     label12:
        $r8 := @caughtexception;

     label13:
        $r7 = $r8;

     label14:
        $z0 = $r7 instanceof java.lang.reflect.InvocationTargetException;

        if $z0 == 0 goto label15;

        $r9 = virtualinvoke $r7.<java.lang.Throwable: java.lang.Throwable getCause()>();

        if $r9 == null goto label15;

        $r7 = virtualinvoke $r7.<java.lang.Throwable: java.lang.Throwable getCause()>();

        goto label14;

     label15:
        $z0 = $r7 instanceof java.lang.Error;

        if $z0 == 0 goto label16;

        r10 = (java.lang.Error) $r7;

        throw r10;

     label16:
        $r11 = staticinvoke <org.codehaus.jackson.map.JsonMappingException: org.codehaus.jackson.map.JsonMappingException wrapWithPath(java.lang.Throwable,java.lang.Object,int)>($r7, r6, i1);

        throw $r11;

     label17:
        $r12 := @caughtexception;

        $r8 = $r12;

        goto label13;

     label18:
        return;

        catch java.lang.Exception from label02 to label03 with label17;
        catch java.io.IOException from label04 to label05 with label09;
        catch java.io.IOException from label07 to label08 with label09;
        catch java.lang.Exception from label04 to label05 with label12;
        catch java.lang.Exception from label07 to label08 with label12;
        catch java.io.IOException from label10 to label11 with label09;
        catch java.lang.Exception from label10 to label11 with label12;
    }

    public void serializeTypedContents(java.lang.Object[], org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        org.codehaus.jackson.map.ser.impl.ObjectArraySerializer r0;
        java.lang.Object[] $r1;
        org.codehaus.jackson.JsonGenerator $r2;
        org.codehaus.jackson.map.SerializerProvider $r3;
        int i0, i1;
        org.codehaus.jackson.map.ser.impl.PropertySerializerMap r4;
        org.codehaus.jackson.map.TypeSerializer r5;
        java.lang.Object r6;
        java.lang.Class $r7;
        org.codehaus.jackson.map.JsonSerializer $r8, r9;
        java.lang.Throwable $r10, $r12;
        java.lang.Exception $r11, $r15, $r16;
        boolean $z0;
        java.lang.Error r13;
        org.codehaus.jackson.map.JsonMappingException $r14;

        r0 := @this: org.codehaus.jackson.map.ser.impl.ObjectArraySerializer;

        $r1 := @parameter0: java.lang.Object[];

        $r2 := @parameter1: org.codehaus.jackson.JsonGenerator;

        $r3 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        i0 = lengthof $r1;

        r5 = r0.<org.codehaus.jackson.map.ser.impl.ObjectArraySerializer: org.codehaus.jackson.map.TypeSerializer _valueTypeSerializer>;

        i1 = 0;

        r6 = null;

     label01:
        r4 = r0.<org.codehaus.jackson.map.ser.impl.ObjectArraySerializer: org.codehaus.jackson.map.ser.impl.PropertySerializerMap _dynamicSerializers>;

     label02:
        if i1 >= i0 goto label21;

     label03:
        r6 = $r1[i1];

     label04:
        if r6 != null goto label07;

     label05:
        virtualinvoke $r3.<org.codehaus.jackson.map.SerializerProvider: void defaultSerializeNull(org.codehaus.jackson.JsonGenerator)>($r2);

     label06:
        i1 = i1 + 1;

        goto label02;

     label07:
        $r7 = virtualinvoke r6.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = virtualinvoke r4.<org.codehaus.jackson.map.ser.impl.PropertySerializerMap: org.codehaus.jackson.map.JsonSerializer serializerFor(java.lang.Class)>($r7);

     label08:
        r9 = $r8;

        if $r8 != null goto label11;

     label09:
        $r8 = virtualinvoke r0.<org.codehaus.jackson.map.ser.impl.ObjectArraySerializer: org.codehaus.jackson.map.JsonSerializer _findAndAddDynamic(org.codehaus.jackson.map.ser.impl.PropertySerializerMap,java.lang.Class,org.codehaus.jackson.map.SerializerProvider)>(r4, $r7, $r3);

     label10:
        r9 = $r8;

     label11:
        virtualinvoke r9.<org.codehaus.jackson.map.JsonSerializer: void serializeWithType(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider,org.codehaus.jackson.map.TypeSerializer)>(r6, $r2, $r3, r5);

     label12:
        goto label06;

     label13:
        $r10 := @caughtexception;

        throw $r10;

     label14:
        $r11 := @caughtexception;

        r6 = null;

     label15:
        $r10 = $r11;

     label16:
        $z0 = $r10 instanceof java.lang.reflect.InvocationTargetException;

        if $z0 == 0 goto label17;

        $r12 = virtualinvoke $r10.<java.lang.Throwable: java.lang.Throwable getCause()>();

        if $r12 == null goto label17;

        $r10 = virtualinvoke $r10.<java.lang.Throwable: java.lang.Throwable getCause()>();

        goto label16;

     label17:
        $z0 = $r10 instanceof java.lang.Error;

        if $z0 == 0 goto label18;

        r13 = (java.lang.Error) $r10;

        throw r13;

     label18:
        $r14 = staticinvoke <org.codehaus.jackson.map.JsonMappingException: org.codehaus.jackson.map.JsonMappingException wrapWithPath(java.lang.Throwable,java.lang.Object,int)>($r10, r6, i1);

        throw $r14;

     label19:
        $r15 := @caughtexception;

        $r11 = $r15;

        goto label15;

     label20:
        $r16 := @caughtexception;

        $r11 = $r16;

        goto label15;

     label21:
        return;

        catch java.lang.Exception from label01 to label02 with label14;
        catch java.lang.Exception from label03 to label04 with label20;
        catch java.io.IOException from label05 to label06 with label13;
        catch java.io.IOException from label07 to label08 with label13;
        catch java.io.IOException from label09 to label10 with label13;
        catch java.io.IOException from label11 to label12 with label13;
        catch java.lang.Exception from label05 to label06 with label19;
        catch java.lang.Exception from label07 to label08 with label19;
        catch java.lang.Exception from label09 to label10 with label19;
        catch java.lang.Exception from label11 to label12 with label19;
    }
}
