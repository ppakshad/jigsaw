public abstract class com.squareup.picasso.RequestHandler extends java.lang.Object
{

    public void <init>()
    {
        com.squareup.picasso.RequestHandler r0;

        r0 := @this: com.squareup.picasso.RequestHandler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void calculateInSampleSize(int, int, int, int, android.graphics.BitmapFactory$Options, com.squareup.picasso.Request)
    {
        int $i0, $i1, $i2, $i3, $i4;
        android.graphics.BitmapFactory$Options $r0;
        com.squareup.picasso.Request $r1;
        float $f0, $f1;
        double $d0;
        boolean $z0;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $r0 := @parameter4: android.graphics.BitmapFactory$Options;

        $r1 := @parameter5: com.squareup.picasso.Request;

        $i4 = 1;

        if $i3 > $i1 goto label1;

        if $i2 <= $i0 goto label2;

     label1:
        if $i1 != 0 goto label3;

        $f0 = (float) $i2;

        $f1 = (float) $i0;

        $f0 = $f0 / $f1;

        $d0 = (double) $f0;

        $d0 = staticinvoke <java.lang.Math: double floor(double)>($d0);

        $i4 = (int) $d0;

     label2:
        $r0.<android.graphics.BitmapFactory$Options: int inSampleSize> = $i4;

        $r0.<android.graphics.BitmapFactory$Options: boolean inJustDecodeBounds> = 0;

        return;

     label3:
        if $i0 != 0 goto label4;

        $f0 = (float) $i3;

        $f1 = (float) $i1;

        $f0 = $f0 / $f1;

        $d0 = (double) $f0;

        $d0 = staticinvoke <java.lang.Math: double floor(double)>($d0);

        $i4 = (int) $d0;

        goto label2;

     label4:
        $f0 = (float) $i3;

        $f1 = (float) $i1;

        $f0 = $f0 / $f1;

        $d0 = (double) $f0;

        $d0 = staticinvoke <java.lang.Math: double floor(double)>($d0);

        $i1 = (int) $d0;

        $f0 = (float) $i2;

        $f1 = (float) $i0;

        $f0 = $f0 / $f1;

        $d0 = (double) $f0;

        $d0 = staticinvoke <java.lang.Math: double floor(double)>($d0);

        $i0 = (int) $d0;

        $z0 = $r1.<com.squareup.picasso.Request: boolean centerInside>;

        if $z0 == 0 goto label5;

        $i4 = staticinvoke <java.lang.Math: int max(int,int)>($i1, $i0);

        goto label2;

     label5:
        $i4 = staticinvoke <java.lang.Math: int min(int,int)>($i1, $i0);

        goto label2;
    }

    static void calculateInSampleSize(int, int, android.graphics.BitmapFactory$Options, com.squareup.picasso.Request)
    {
        int $i0, $i1, $i2, $i3;
        android.graphics.BitmapFactory$Options $r0;
        com.squareup.picasso.Request $r1;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r0 := @parameter2: android.graphics.BitmapFactory$Options;

        $r1 := @parameter3: com.squareup.picasso.Request;

        $i2 = $r0.<android.graphics.BitmapFactory$Options: int outWidth>;

        $i3 = $r0.<android.graphics.BitmapFactory$Options: int outHeight>;

        staticinvoke <com.squareup.picasso.RequestHandler: void calculateInSampleSize(int,int,int,int,android.graphics.BitmapFactory$Options,com.squareup.picasso.Request)>($i0, $i1, $i2, $i3, $r0, $r1);

        return;
    }

    static android.graphics.BitmapFactory$Options createBitmapOptions(com.squareup.picasso.Request)
    {
        com.squareup.picasso.Request $r0;
        boolean $z0, $z1;
        android.graphics.Bitmap$Config $r1;
        android.graphics.BitmapFactory$Options $r2;

        $r0 := @parameter0: com.squareup.picasso.Request;

        $z0 = virtualinvoke $r0.<com.squareup.picasso.Request: boolean hasSize()>();

        $r1 = $r0.<com.squareup.picasso.Request: android.graphics.Bitmap$Config config>;

        if $r1 == null goto label3;

        $z1 = 1;

     label1:
        if $z0 != 0 goto label2;

        if $z1 == 0 goto label4;

     label2:
        $r2 = new android.graphics.BitmapFactory$Options;

        specialinvoke $r2.<android.graphics.BitmapFactory$Options: void <init>()>();

        $r2.<android.graphics.BitmapFactory$Options: boolean inJustDecodeBounds> = $z0;

        if $z1 == 0 goto label5;

        $r1 = $r0.<com.squareup.picasso.Request: android.graphics.Bitmap$Config config>;

        $r2.<android.graphics.BitmapFactory$Options: android.graphics.Bitmap$Config inPreferredConfig> = $r1;

        return $r2;

     label3:
        $z1 = 0;

        goto label1;

     label4:
        return null;

     label5:
        return $r2;
    }

    static boolean requiresInSampleSize(android.graphics.BitmapFactory$Options)
    {
        android.graphics.BitmapFactory$Options $r0;
        boolean $z0;

        $r0 := @parameter0: android.graphics.BitmapFactory$Options;

        if $r0 == null goto label1;

        $z0 = $r0.<android.graphics.BitmapFactory$Options: boolean inJustDecodeBounds>;

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public abstract boolean canHandleRequest(com.squareup.picasso.Request);

    int getRetryCount()
    {
        com.squareup.picasso.RequestHandler r0;

        r0 := @this: com.squareup.picasso.RequestHandler;

        return 0;
    }

    public abstract com.squareup.picasso.RequestHandler$Result load(com.squareup.picasso.Request, int) throws java.io.IOException;

    boolean shouldRetry(boolean, android.net.NetworkInfo)
    {
        com.squareup.picasso.RequestHandler r0;
        boolean $z0;
        android.net.NetworkInfo $r1;

        r0 := @this: com.squareup.picasso.RequestHandler;

        $z0 := @parameter0: boolean;

        $r1 := @parameter1: android.net.NetworkInfo;

        return 0;
    }

    boolean supportsReplay()
    {
        com.squareup.picasso.RequestHandler r0;

        r0 := @this: com.squareup.picasso.RequestHandler;

        return 0;
    }
}
