public abstract class com.movesky.app.main.units.Unit extends com.movesky.app.engine.entity.BasicMovable
{
    private static int nextHashCodeID;
    protected static android.graphics.Paint tempPaint;
    boolean attackedByUber;
    private com.movesky.app.engine.ai.fsm.FiniteStateMachine fsm;
    private int hashCodeID;
    protected int health;
    com.movesky.app.main.units.Unit killer;
    protected android.graphics.Paint paint;
    protected com.movesky.app.engine.particles.ParticleSystem particleSystem;
    protected com.movesky.app.main.units.Unit target;
    protected com.movesky.app.main.Team team;
    protected com.movesky.app.main.units.UnitManager unitManager;

    static void <clinit>()
    {
        android.graphics.Paint $r0;

        $r0 = new android.graphics.Paint;

        specialinvoke $r0.<android.graphics.Paint: void <init>()>();

        <com.movesky.app.main.units.Unit: android.graphics.Paint tempPaint> = $r0;

        return;
    }

    public void <init>(com.movesky.app.main.units.UnitManager, com.movesky.app.main.Team, android.graphics.Paint, com.movesky.app.engine.particles.ParticleSystem)
    {
        com.movesky.app.main.units.Unit r0;
        com.movesky.app.main.units.UnitManager $r1;
        com.movesky.app.main.Team $r2;
        android.graphics.Paint $r3;
        com.movesky.app.engine.particles.ParticleSystem $r4;
        int $i0, $i1;
        com.movesky.app.engine.ai.fsm.FiniteStateMachine $r5;

        r0 := @this: com.movesky.app.main.units.Unit;

        $r1 := @parameter0: com.movesky.app.main.units.UnitManager;

        $r2 := @parameter1: com.movesky.app.main.Team;

        $r3 := @parameter2: android.graphics.Paint;

        $r4 := @parameter3: com.movesky.app.engine.particles.ParticleSystem;

        specialinvoke r0.<com.movesky.app.engine.entity.BasicMovable: void <init>()>();

        $i0 = virtualinvoke r0.<com.movesky.app.main.units.Unit: int getStartingHealth()>();

        r0.<com.movesky.app.main.units.Unit: int health> = $i0;

        $i1 = <com.movesky.app.main.units.Unit: int nextHashCodeID>;

        $i0 = $i1 + 1;

        <com.movesky.app.main.units.Unit: int nextHashCodeID> = $i0;

        r0.<com.movesky.app.main.units.Unit: int hashCodeID> = $i1;

        r0.<com.movesky.app.main.units.Unit: com.movesky.app.main.Team team> = $r2;

        r0.<com.movesky.app.main.units.Unit: com.movesky.app.main.units.UnitManager unitManager> = $r1;

        r0.<com.movesky.app.main.units.Unit: com.movesky.app.engine.particles.ParticleSystem particleSystem> = $r4;

        r0.<com.movesky.app.main.units.Unit: android.graphics.Paint paint> = $r3;

        $r5 = new com.movesky.app.engine.ai.fsm.FiniteStateMachine;

        specialinvoke $r5.<com.movesky.app.engine.ai.fsm.FiniteStateMachine: void <init>()>();

        r0.<com.movesky.app.main.units.Unit: com.movesky.app.engine.ai.fsm.FiniteStateMachine fsm> = $r5;

        return;
    }

    public static void resetNextHashCodeID()
    {
        <com.movesky.app.main.units.Unit: int nextHashCodeID> = 0;

        return;
    }

    public abstract void drawChassis(android.graphics.Canvas);

    public void drawEffects(android.graphics.Canvas)
    {
        com.movesky.app.main.units.Unit r0;
        android.graphics.Canvas $r1;

        r0 := @this: com.movesky.app.main.units.Unit;

        $r1 := @parameter0: android.graphics.Canvas;

        return;
    }

    public void drawHealthBar(android.graphics.Canvas, boolean)
    {
        com.movesky.app.main.units.Unit r0;
        android.graphics.Canvas $r1;
        boolean $z0, $z1;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7;
        android.graphics.Paint $r2, $r3;
        android.graphics.Paint$Style $r4;
        int $i0;

        r0 := @this: com.movesky.app.main.units.Unit;

        $r1 := @parameter0: android.graphics.Canvas;

        $z0 := @parameter1: boolean;

        $z1 = virtualinvoke r0.<com.movesky.app.main.units.Unit: boolean isDead()>();

        if $z1 == 0 goto label1;

        return;

     label1:
        $r2 = <com.movesky.app.main.units.Unit: android.graphics.Paint tempPaint>;

        $r3 = r0.<com.movesky.app.main.units.Unit: android.graphics.Paint paint>;

        virtualinvoke $r2.<android.graphics.Paint: void set(android.graphics.Paint)>($r3);

        $r2 = r0.<com.movesky.app.main.units.Unit: android.graphics.Paint paint>;

        $r4 = <android.graphics.Paint$Style: android.graphics.Paint$Style FILL>;

        virtualinvoke $r2.<android.graphics.Paint: void setStyle(android.graphics.Paint$Style)>($r4);

        $f2 = virtualinvoke r0.<com.movesky.app.main.units.Unit: float getRadius()>();

        $f0 = virtualinvoke r0.<com.movesky.app.main.units.Unit: float getX()>();

        $f0 = $f0 - $f2;

        if $z0 == 0 goto label3;

        $f3 = virtualinvoke r0.<com.movesky.app.main.units.Unit: float getY()>();

        $f1 = $f2 * 2.0F;

        $f3 = $f3 + $f1;

     label2:
        $f1 = 2.0F * $f2;

        $f1 = $f0 + $f1;

        $f2 = $f2 / 2.0F;

        $f2 = $f3 + $f2;

        $r2 = r0.<com.movesky.app.main.units.Unit: android.graphics.Paint paint>;

        virtualinvoke $r2.<android.graphics.Paint: void setColor(int)>(-1);

        $f4 = $f0 - 1.0F;

        $f5 = $f3 - 1.0F;

        $f6 = $f1 + 1.0F;

        $f7 = 1.0F + $f2;

        $r2 = r0.<com.movesky.app.main.units.Unit: android.graphics.Paint paint>;

        virtualinvoke $r1.<android.graphics.Canvas: void drawRect(float,float,float,float,android.graphics.Paint)>($f4, $f5, $f6, $f7, $r2);

        $r2 = r0.<com.movesky.app.main.units.Unit: android.graphics.Paint paint>;

        virtualinvoke $r2.<android.graphics.Paint: void setColor(int)>(-65536);

        $r2 = r0.<com.movesky.app.main.units.Unit: android.graphics.Paint paint>;

        virtualinvoke $r1.<android.graphics.Canvas: void drawRect(float,float,float,float,android.graphics.Paint)>($f0, $f3, $f1, $f2, $r2);

        $r2 = r0.<com.movesky.app.main.units.Unit: android.graphics.Paint paint>;

        virtualinvoke $r2.<android.graphics.Paint: void setColor(int)>(-16711936);

        $i0 = virtualinvoke r0.<com.movesky.app.main.units.Unit: int getStartingHealth()>();

        $f4 = (float) $i0;

        $i0 = virtualinvoke r0.<com.movesky.app.main.units.Unit: int getHealth()>();

        $f5 = (float) $i0;

        $f1 = staticinvoke <com.movesky.app.engine.util.MathUtils: float scale(float,float,float,float,float,boolean)>(0.0F, $f4, $f0, $f1, $f5, 1);

        $r2 = r0.<com.movesky.app.main.units.Unit: android.graphics.Paint paint>;

        virtualinvoke $r1.<android.graphics.Canvas: void drawRect(float,float,float,float,android.graphics.Paint)>($f0, $f3, $f1, $f2, $r2);

        $r2 = r0.<com.movesky.app.main.units.Unit: android.graphics.Paint paint>;

        $r3 = <com.movesky.app.main.units.Unit: android.graphics.Paint tempPaint>;

        virtualinvoke $r2.<android.graphics.Paint: void set(android.graphics.Paint)>($r3);

        return;

     label3:
        $f3 = virtualinvoke r0.<com.movesky.app.main.units.Unit: float getY()>();

        $f1 = $f2 * 2.0F;

        $f3 = $f3 - $f1;

        goto label2;
    }

    public com.movesky.app.engine.ai.fsm.FiniteStateMachine getFSM()
    {
        com.movesky.app.main.units.Unit r0;
        com.movesky.app.engine.ai.fsm.FiniteStateMachine r1;

        r0 := @this: com.movesky.app.main.units.Unit;

        r1 = r0.<com.movesky.app.main.units.Unit: com.movesky.app.engine.ai.fsm.FiniteStateMachine fsm>;

        return r1;
    }

    public int getHealth()
    {
        com.movesky.app.main.units.Unit r0;
        int i0;

        r0 := @this: com.movesky.app.main.units.Unit;

        i0 = r0.<com.movesky.app.main.units.Unit: int health>;

        return i0;
    }

    public com.movesky.app.main.units.Unit getKiller()
    {
        com.movesky.app.main.units.Unit r0;

        r0 := @this: com.movesky.app.main.units.Unit;

        r0 = r0.<com.movesky.app.main.units.Unit: com.movesky.app.main.units.Unit killer>;

        return r0;
    }

    public abstract float getRadius();

    public int getSimulationSyncHash()
    {
        com.movesky.app.main.units.Unit r0;
        float $f0;
        int $i0, $i1;
        com.movesky.app.main.units.UnitType $r1;

        r0 := @this: com.movesky.app.main.units.Unit;

        $f0 = virtualinvoke r0.<com.movesky.app.main.units.Unit: float getX()>();

        $i0 = staticinvoke <com.movesky.app.engine.net.simulation.Hash: int mix(int,float)>(0, $f0);

        $f0 = virtualinvoke r0.<com.movesky.app.main.units.Unit: float getY()>();

        $i0 = staticinvoke <com.movesky.app.engine.net.simulation.Hash: int mix(int,float)>($i0, $f0);

        $f0 = virtualinvoke r0.<com.movesky.app.main.units.Unit: float getXVel()>();

        $i0 = staticinvoke <com.movesky.app.engine.net.simulation.Hash: int mix(int,float)>($i0, $f0);

        $f0 = virtualinvoke r0.<com.movesky.app.main.units.Unit: float getYVel()>();

        $i0 = staticinvoke <com.movesky.app.engine.net.simulation.Hash: int mix(int,float)>($i0, $f0);

        $i1 = virtualinvoke r0.<com.movesky.app.main.units.Unit: int getHealth()>();

        $i0 = staticinvoke <com.movesky.app.engine.net.simulation.Hash: int mix(int,int)>($i0, $i1);

        $r1 = virtualinvoke r0.<com.movesky.app.main.units.Unit: com.movesky.app.main.units.UnitType getType()>();

        $i1 = virtualinvoke $r1.<com.movesky.app.main.units.UnitType: int ordinal()>();

        $i0 = staticinvoke <com.movesky.app.engine.net.simulation.Hash: int mix(int,int)>($i0, $i1);

        return $i0;
    }

    public abstract int getStartingHealth();

    public com.movesky.app.engine.ai.fsm.FiniteState getState()
    {
        com.movesky.app.main.units.Unit r0;
        com.movesky.app.engine.ai.fsm.FiniteState $r1;
        com.movesky.app.engine.ai.fsm.FiniteStateMachine $r2;

        r0 := @this: com.movesky.app.main.units.Unit;

        $r2 = r0.<com.movesky.app.main.units.Unit: com.movesky.app.engine.ai.fsm.FiniteStateMachine fsm>;

        $r1 = virtualinvoke $r2.<com.movesky.app.engine.ai.fsm.FiniteStateMachine: com.movesky.app.engine.ai.fsm.FiniteState getCurrState()>();

        return $r1;
    }

    public java.lang.String getStateName()
    {
        com.movesky.app.main.units.Unit r0;
        java.lang.String $r1;
        com.movesky.app.engine.ai.fsm.FiniteStateMachine $r2;

        r0 := @this: com.movesky.app.main.units.Unit;

        $r2 = r0.<com.movesky.app.main.units.Unit: com.movesky.app.engine.ai.fsm.FiniteStateMachine fsm>;

        $r1 = virtualinvoke $r2.<com.movesky.app.engine.ai.fsm.FiniteStateMachine: java.lang.String getStateName()>();

        return $r1;
    }

    public com.movesky.app.main.units.Unit getTarget()
    {
        com.movesky.app.main.units.Unit r0;

        r0 := @this: com.movesky.app.main.units.Unit;

        r0 = r0.<com.movesky.app.main.units.Unit: com.movesky.app.main.units.Unit target>;

        return r0;
    }

    public com.movesky.app.main.Team getTeam()
    {
        com.movesky.app.main.units.Unit r0;
        com.movesky.app.main.Team r1;

        r0 := @this: com.movesky.app.main.units.Unit;

        r1 = r0.<com.movesky.app.main.units.Unit: com.movesky.app.main.Team team>;

        return r1;
    }

    public abstract com.movesky.app.main.units.UnitType getType();

    public int hashCode()
    {
        com.movesky.app.main.units.Unit r0;
        int i0;

        r0 := @this: com.movesky.app.main.units.Unit;

        i0 = r0.<com.movesky.app.main.units.Unit: int hashCodeID>;

        return i0;
    }

    public boolean isDead()
    {
        com.movesky.app.main.units.Unit r0;
        int $i0;
        float $f0;
        byte $b1;

        r0 := @this: com.movesky.app.main.units.Unit;

        $i0 = r0.<com.movesky.app.main.units.Unit: int health>;

        $f0 = (float) $i0;

        $b1 = $f0 cmpg 0.0F;

        if $b1 > 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    protected void onDead()
    {
        com.movesky.app.main.units.Unit r0;
        int $i0, $i2;
        float $f0, $f1, $f2, $f3, $f4, $f5;
        byte $b1;
        com.movesky.app.engine.particles.ParticleSystem $r1;
        com.movesky.app.engine.particles.Particle $r2;
        com.movesky.app.main.Team $r3;

        r0 := @this: com.movesky.app.main.units.Unit;

        $i0 = 0;

     label1:
        $f0 = (float) $i0;

        $f1 = virtualinvoke r0.<com.movesky.app.main.units.Unit: float getRadius()>();

        $f1 = 10.0F * $f1;

        $b1 = $f0 cmpg $f1;

        if $b1 >= 0 goto label2;

        $f2 = staticinvoke <com.movesky.app.engine.util.MathUtils: float randInRange(float,float)>(0.0F, 6.2831855F);

        $f1 = staticinvoke <android.util.FloatMath: float sin(float)>($f2);

        $f0 = staticinvoke <android.util.FloatMath: float cos(float)>($f2);

        $f3 = staticinvoke <com.movesky.app.engine.util.MathUtils: float randInRange(float,float)>(25.0F, 50.0F);

        $f4 = $f3 * $f0;

        $f3 = staticinvoke <com.movesky.app.engine.util.MathUtils: float randInRange(float,float)>(25.0F, 50.0F);

        $f3 = $f3 * $f1;

        $r1 = r0.<com.movesky.app.main.units.Unit: com.movesky.app.engine.particles.ParticleSystem particleSystem>;

        $r2 = virtualinvoke $r1.<com.movesky.app.engine.particles.ParticleSystem: com.movesky.app.engine.particles.Particle createParticle()>();

        $r2 = virtualinvoke $r2.<com.movesky.app.engine.particles.Particle: com.movesky.app.engine.particles.Particle line()>();

        $f5 = virtualinvoke r0.<com.movesky.app.main.units.Unit: float getRadius()>();

        $f4 = $f4 * $f5;

        $f4 = $f4 * 0.25F;

        $f5 = virtualinvoke r0.<com.movesky.app.main.units.Unit: float getRadius()>();

        $f3 = $f3 * $f5;

        $f3 = $f3 * 0.25F;

        $r2 = virtualinvoke $r2.<com.movesky.app.engine.particles.Particle: com.movesky.app.engine.particles.Particle velocity(float,float)>($f4, $f3);

        $r2 = virtualinvoke $r2.<com.movesky.app.engine.particles.Particle: com.movesky.app.engine.particles.Particle angle(float)>($f2);

        $r2 = virtualinvoke $r2.<com.movesky.app.engine.particles.Particle: com.movesky.app.engine.particles.Particle shrink(float,float)>(0.1F, 0.15F);

        $f2 = virtualinvoke r0.<com.movesky.app.main.units.Unit: float getRadius()>();

        $f2 = $f2 * 1.5F;

        $r2 = virtualinvoke $r2.<com.movesky.app.engine.particles.Particle: com.movesky.app.engine.particles.Particle radius(float)>($f2);

        $f2 = virtualinvoke r0.<com.movesky.app.main.units.Unit: float getRadius()>();

        $f2 = $f2 / 2.0F;

        $r2 = virtualinvoke $r2.<com.movesky.app.engine.particles.Particle: com.movesky.app.engine.particles.Particle width(float)>($f2);

        $f2 = virtualinvoke r0.<com.movesky.app.main.units.Unit: float getX()>();

        $f1 = $f1 * 2.0F;

        $f1 = $f1 + $f2;

        $f2 = virtualinvoke r0.<com.movesky.app.main.units.Unit: float getY()>();

        $f0 = $f0 * 2.0F;

        $f0 = $f0 + $f2;

        $r2 = virtualinvoke $r2.<com.movesky.app.engine.particles.Particle: com.movesky.app.engine.particles.Particle position(float,float)>($f1, $f0);

        $r3 = r0.<com.movesky.app.main.units.Unit: com.movesky.app.main.Team team>;

        $i2 = virtualinvoke $r3.<com.movesky.app.main.Team: int getRandomShade()>();

        virtualinvoke $r2.<com.movesky.app.engine.particles.Particle: com.movesky.app.engine.particles.Particle color(int)>($i2);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return;
    }

    public void setFSM(com.movesky.app.engine.ai.fsm.FiniteStateMachine)
    {
        com.movesky.app.main.units.Unit r0;
        com.movesky.app.engine.ai.fsm.FiniteStateMachine $r1;

        r0 := @this: com.movesky.app.main.units.Unit;

        $r1 := @parameter0: com.movesky.app.engine.ai.fsm.FiniteStateMachine;

        r0.<com.movesky.app.main.units.Unit: com.movesky.app.engine.ai.fsm.FiniteStateMachine fsm> = $r1;

        return;
    }

    public void setTarget(com.movesky.app.main.units.Unit)
    {
        com.movesky.app.main.units.Unit r0, $r1;

        r0 := @this: com.movesky.app.main.units.Unit;

        $r1 := @parameter0: com.movesky.app.main.units.Unit;

        r0.<com.movesky.app.main.units.Unit: com.movesky.app.main.units.Unit target> = $r1;

        return;
    }

    public void setTeam(com.movesky.app.main.Team)
    {
        com.movesky.app.main.units.Unit r0;
        com.movesky.app.main.Team $r1;

        r0 := @this: com.movesky.app.main.units.Unit;

        $r1 := @parameter0: com.movesky.app.main.Team;

        r0.<com.movesky.app.main.units.Unit: com.movesky.app.main.Team team> = $r1;

        return;
    }

    public void takeDamage(float, com.movesky.app.main.units.Unit)
    {
        com.movesky.app.main.units.Unit r0, $r1;
        float $f0, $f1;
        com.movesky.app.main.units.UnitType $r2, $r3;
        boolean $z0;
        int $i0;
        com.movesky.app.main.units.UnitManager $r4;

        r0 := @this: com.movesky.app.main.units.Unit;

        $f0 := @parameter0: float;

        $r1 := @parameter1: com.movesky.app.main.units.Unit;

        $z0 = virtualinvoke r0.<com.movesky.app.main.units.Unit: boolean isDead()>();

        if $z0 != 0 goto label2;

        $i0 = r0.<com.movesky.app.main.units.Unit: int health>;

        $f1 = (float) $i0;

        $f0 = $f1 - $f0;

        $i0 = (int) $f0;

        r0.<com.movesky.app.main.units.Unit: int health> = $i0;

        if $r1 == null goto label1;

        $r3 = virtualinvoke $r1.<com.movesky.app.main.units.Unit: com.movesky.app.main.units.UnitType getType()>();

        $r2 = <com.movesky.app.main.units.UnitType: com.movesky.app.main.units.UnitType UBER>;

        if $r3 != $r2 goto label1;

        r0.<com.movesky.app.main.units.Unit: boolean attackedByUber> = 1;

     label1:
        $z0 = virtualinvoke r0.<com.movesky.app.main.units.Unit: boolean isDead()>();

        if $z0 == 0 goto label2;

        virtualinvoke r0.<com.movesky.app.main.units.Unit: void onDead()>();

        r0.<com.movesky.app.main.units.Unit: com.movesky.app.main.units.Unit killer> = $r1;

        $r4 = r0.<com.movesky.app.main.units.Unit: com.movesky.app.main.units.UnitManager unitManager>;

        interfaceinvoke $r4.<com.movesky.app.main.units.UnitManager: void notifyUnitDead(com.movesky.app.main.units.Unit)>(r0);

     label2:
        return;
    }

    public boolean wasDamagedByUber()
    {
        com.movesky.app.main.units.Unit r0;
        boolean z0;

        r0 := @this: com.movesky.app.main.units.Unit;

        z0 = r0.<com.movesky.app.main.units.Unit: boolean attackedByUber>;

        return z0;
    }
}
