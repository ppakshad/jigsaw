public abstract class com.movesky.app.main.ai.UnitAI extends java.lang.Object
{
    private static final float SEARCH_RADIUS;
    private final java.util.HashSet cachedUnitSet;
    protected com.movesky.app.main.GridAcceleration m_accel;
    protected com.movesky.app.engine.ai.ConnectedGraph m_map_grid;
    private float m_max_vel;
    private float m_max_vel_change;
    private float m_objective_weighting;
    protected com.movesky.app.engine.ai.Pathfinder m_pathfinder;
    protected com.movesky.app.engine.fastgraph.LineOfSightTester m_tester;

    public void <init>()
    {
        com.movesky.app.main.ai.UnitAI r0;
        java.util.HashSet $r1;

        r0 := @this: com.movesky.app.main.ai.UnitAI;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        r0.<com.movesky.app.main.ai.UnitAI: java.util.HashSet cachedUnitSet> = $r1;

        r0.<com.movesky.app.main.ai.UnitAI: float m_max_vel_change> = 0.5F;

        r0.<com.movesky.app.main.ai.UnitAI: float m_objective_weighting> = 0.05F;

        r0.<com.movesky.app.main.ai.UnitAI: float m_max_vel> = 35.0F;

        return;
    }

    protected void calculateFlocking(com.movesky.app.main.units.Unit, com.movesky.app.main.ai.AIController, com.movesky.app.engine.ai.FlockRulesCalculator, com.movesky.app.engine.util.Point)
    {
        com.movesky.app.main.ai.UnitAI r0;
        com.movesky.app.main.units.Unit $r1;
        com.movesky.app.main.ai.AIController $r2;
        com.movesky.app.engine.ai.FlockRulesCalculator $r3;
        com.movesky.app.engine.util.Point $r4;

        r0 := @this: com.movesky.app.main.ai.UnitAI;

        $r1 := @parameter0: com.movesky.app.main.units.Unit;

        $r2 := @parameter1: com.movesky.app.main.ai.AIController;

        $r3 := @parameter2: com.movesky.app.engine.ai.FlockRulesCalculator;

        $r4 := @parameter3: com.movesky.app.engine.util.Point;

        $r4.<com.movesky.app.engine.util.Point: float x> = 0.0F;

        $r4.<com.movesky.app.engine.util.Point: float y> = 0.0F;

        return;
    }

    protected final com.movesky.app.main.units.Unit getClosestEnemy(com.movesky.app.main.units.Unit)
    {
        com.movesky.app.main.ai.UnitAI r0;
        com.movesky.app.main.units.Unit $r1, $r4, $r8;
        float $f0, $f1, $f2, $f3, $f4;
        java.util.HashSet $r2;
        com.movesky.app.main.GridAcceleration $r3;
        com.movesky.app.main.Team $r5, $r9;
        java.util.Iterator $r6;
        boolean $z0;
        java.lang.Object $r7;
        byte $b0;

        r0 := @this: com.movesky.app.main.ai.UnitAI;

        $r1 := @parameter0: com.movesky.app.main.units.Unit;

        $f0 = virtualinvoke $r1.<com.movesky.app.main.units.Unit: float getX()>();

        $f1 = virtualinvoke $r1.<com.movesky.app.main.units.Unit: float getY()>();

        $r2 = r0.<com.movesky.app.main.ai.UnitAI: java.util.HashSet cachedUnitSet>;

        virtualinvoke $r2.<java.util.HashSet: void clear()>();

        $r3 = r0.<com.movesky.app.main.ai.UnitAI: com.movesky.app.main.GridAcceleration m_accel>;

        $f2 = $f0 - 50.0F;

        $f3 = $f1 - 50.0F;

        $f0 = $f0 + 50.0F;

        $f1 = $f1 + 50.0F;

        $r2 = r0.<com.movesky.app.main.ai.UnitAI: java.util.HashSet cachedUnitSet>;

        virtualinvoke $r3.<com.movesky.app.main.GridAcceleration: void getUnitsInAABB(float,float,float,float,java.util.HashSet)>($f2, $f3, $f0, $f1, $r2);

        $f2 = 2500.0F;

        $r4 = null;

        $r5 = virtualinvoke $r1.<com.movesky.app.main.units.Unit: com.movesky.app.main.Team getTeam()>();

        $r5 = virtualinvoke $r5.<com.movesky.app.main.Team: com.movesky.app.main.Team getOppositeTeam()>();

        $r2 = r0.<com.movesky.app.main.ai.UnitAI: java.util.HashSet cachedUnitSet>;

        $r6 = virtualinvoke $r2.<java.util.HashSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (com.movesky.app.main.units.Unit) $r7;

        $r9 = virtualinvoke $r8.<com.movesky.app.main.units.Unit: com.movesky.app.main.Team getTeam()>();

        if $r9 != $r5 goto label4;

        $f3 = virtualinvoke $r1.<com.movesky.app.main.units.Unit: float getX()>();

        $f1 = virtualinvoke $r1.<com.movesky.app.main.units.Unit: float getY()>();

        $f0 = virtualinvoke $r8.<com.movesky.app.main.units.Unit: float getX()>();

        $f4 = virtualinvoke $r8.<com.movesky.app.main.units.Unit: float getY()>();

        $f3 = staticinvoke <com.movesky.app.engine.util.MathUtils: float getDistSqr(float,float,float,float)>($f3, $f1, $f0, $f4);

        $b0 = $f3 cmpg $f2;

        if $b0 >= 0 goto label4;

        $f2 = $f3;

     label2:
        $r4 = $r8;

        goto label1;

     label3:
        return $r4;

     label4:
        $r8 = $r4;

        goto label2;
    }

    protected final com.movesky.app.engine.util.Point getClosestNode(com.movesky.app.engine.util.Point)
    {
        com.movesky.app.main.ai.UnitAI r0;
        com.movesky.app.engine.util.Point $r1, $r2, $r8;
        float $f0, $f1, $f2, $f3, $f4;
        com.movesky.app.engine.ai.ConnectedGraph $r3;
        java.util.HashMap $r4;
        java.util.Set $r5;
        java.util.Iterator $r6;
        boolean $z0;
        java.lang.Object $r7;
        byte $b0;
        com.movesky.app.engine.fastgraph.LineOfSightTester $r9;
        com.movesky.app.engine.fastgraph.Wall $r10;

        r0 := @this: com.movesky.app.main.ai.UnitAI;

        $r1 := @parameter0: com.movesky.app.engine.util.Point;

        $f2 = 0.0F;

        $r2 = null;

        $r3 = r0.<com.movesky.app.main.ai.UnitAI: com.movesky.app.engine.ai.ConnectedGraph m_map_grid>;

        $r4 = virtualinvoke $r3.<com.movesky.app.engine.ai.ConnectedGraph: java.util.HashMap getGraph()>();

        $r5 = virtualinvoke $r4.<java.util.HashMap: java.util.Set keySet()>();

        $r6 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (com.movesky.app.engine.util.Point) $r7;

        $f3 = $r8.<com.movesky.app.engine.util.Point: float x>;

        $f4 = $r8.<com.movesky.app.engine.util.Point: float y>;

        $f0 = $r1.<com.movesky.app.engine.util.Point: float x>;

        $f1 = $r1.<com.movesky.app.engine.util.Point: float y>;

        $f0 = staticinvoke <com.movesky.app.engine.util.MathUtils: float getDistSqr(float,float,float,float)>($f3, $f4, $f0, $f1);

        if $r2 == null goto label2;

        $b0 = $f0 cmpg $f2;

        if $b0 >= 0 goto label5;

     label2:
        $r9 = r0.<com.movesky.app.main.ai.UnitAI: com.movesky.app.engine.fastgraph.LineOfSightTester m_tester>;

        $r10 = virtualinvoke $r9.<com.movesky.app.engine.fastgraph.LineOfSightTester: com.movesky.app.engine.fastgraph.Wall isLineOfSightClear(com.movesky.app.engine.util.Point,com.movesky.app.engine.util.Point)>($r1, $r8);

        if $r10 != null goto label5;

        $f2 = $f0;

     label3:
        $r2 = $r8;

        goto label1;

     label4:
        return $r2;

     label5:
        $r8 = $r2;

        goto label3;
    }

    public float getMaxVel()
    {
        com.movesky.app.main.ai.UnitAI r0;
        float f0;

        r0 := @this: com.movesky.app.main.ai.UnitAI;

        f0 = r0.<com.movesky.app.main.ai.UnitAI: float m_max_vel>;

        return f0;
    }

    public float getMaxVelChange()
    {
        com.movesky.app.main.ai.UnitAI r0;
        float f0;

        r0 := @this: com.movesky.app.main.ai.UnitAI;

        f0 = r0.<com.movesky.app.main.ai.UnitAI: float m_max_vel_change>;

        return f0;
    }

    public float getObjectiveWeighting()
    {
        com.movesky.app.main.ai.UnitAI r0;
        float f0;

        r0 := @this: com.movesky.app.main.ai.UnitAI;

        f0 = r0.<com.movesky.app.main.ai.UnitAI: float m_objective_weighting>;

        return f0;
    }

    public void setMaxVel(float)
    {
        com.movesky.app.main.ai.UnitAI r0;
        byte $b0;
        float $f0;

        r0 := @this: com.movesky.app.main.ai.UnitAI;

        $f0 := @parameter0: float;

        $b0 = $f0 cmpg 0.0F;

        if $b0 >= 0 goto label1;

        $f0 = 0.0F;

     label1:
        r0.<com.movesky.app.main.ai.UnitAI: float m_max_vel> = $f0;

        return;
    }

    public void setMaxVelChange(float)
    {
        com.movesky.app.main.ai.UnitAI r0;
        byte $b0;
        float $f0;

        r0 := @this: com.movesky.app.main.ai.UnitAI;

        $f0 := @parameter0: float;

        $b0 = $f0 cmpg 0.0F;

        if $b0 >= 0 goto label1;

        $f0 = 0.0F;

     label1:
        r0.<com.movesky.app.main.ai.UnitAI: float m_max_vel_change> = $f0;

        return;
    }

    public void setObjectiveWeighting(float)
    {
        com.movesky.app.main.ai.UnitAI r0;
        float $f0;

        r0 := @this: com.movesky.app.main.ai.UnitAI;

        $f0 := @parameter0: float;

        r0.<com.movesky.app.main.ai.UnitAI: float m_objective_weighting> = $f0;

        return;
    }

    public final void setPathfinder(com.movesky.app.engine.ai.Pathfinder, com.movesky.app.engine.ai.ConnectedGraph, com.movesky.app.engine.fastgraph.LineOfSightTester, com.movesky.app.main.GridAcceleration)
    {
        com.movesky.app.main.ai.UnitAI r0;
        com.movesky.app.engine.ai.Pathfinder $r1;
        com.movesky.app.engine.ai.ConnectedGraph $r2;
        com.movesky.app.engine.fastgraph.LineOfSightTester $r3;
        com.movesky.app.main.GridAcceleration $r4;

        r0 := @this: com.movesky.app.main.ai.UnitAI;

        $r1 := @parameter0: com.movesky.app.engine.ai.Pathfinder;

        $r2 := @parameter1: com.movesky.app.engine.ai.ConnectedGraph;

        $r3 := @parameter2: com.movesky.app.engine.fastgraph.LineOfSightTester;

        $r4 := @parameter3: com.movesky.app.main.GridAcceleration;

        r0.<com.movesky.app.main.ai.UnitAI: com.movesky.app.engine.ai.Pathfinder m_pathfinder> = $r1;

        r0.<com.movesky.app.main.ai.UnitAI: com.movesky.app.engine.ai.ConnectedGraph m_map_grid> = $r2;

        r0.<com.movesky.app.main.ai.UnitAI: com.movesky.app.engine.fastgraph.LineOfSightTester m_tester> = $r3;

        r0.<com.movesky.app.main.ai.UnitAI: com.movesky.app.main.GridAcceleration m_accel> = $r4;

        return;
    }

    public abstract void update(com.movesky.app.main.units.Unit, com.movesky.app.main.ai.AIController, com.movesky.app.engine.ai.FlockRulesCalculator);

    public static void <clinit>()
    {
        <com.movesky.app.main.ai.UnitAI: float SEARCH_RADIUS> = 50.0F;

        return;
    }
}
